// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        (unknown)
// source: ydeyes.proto

package ydyes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform int32

const (
	Platform_PLATFORM_UNKNOWNTYPE Platform = 0
	Platform_PLATFORM_WIN32       Platform = 1
	Platform_PLATFORM_WIN64       Platform = 2
	Platform_PLATFORM_LINUX32     Platform = 3
	Platform_PLATFORM_LINUX64     Platform = 4
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_UNKNOWNTYPE",
		1: "PLATFORM_WIN32",
		2: "PLATFORM_WIN64",
		3: "PLATFORM_LINUX32",
		4: "PLATFORM_LINUX64",
	}
	Platform_value = map[string]int32{
		"PLATFORM_UNKNOWNTYPE": 0,
		"PLATFORM_WIN32":       1,
		"PLATFORM_WIN64":       2,
		"PLATFORM_LINUX32":     3,
		"PLATFORM_LINUX64":     4,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Platform(num)
	return nil
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0}
}

type RspCode int32

const (
	RspCode_RSP_CODE_SUCCESS RspCode = 0
	RspCode_RSP_CODE_ERROR   RspCode = 1
)

// Enum value maps for RspCode.
var (
	RspCode_name = map[int32]string{
		0: "RSP_CODE_SUCCESS",
		1: "RSP_CODE_ERROR",
	}
	RspCode_value = map[string]int32{
		"RSP_CODE_SUCCESS": 0,
		"RSP_CODE_ERROR":   1,
	}
)

func (x RspCode) Enum() *RspCode {
	p := new(RspCode)
	*p = x
	return p
}

func (x RspCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RspCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[1].Descriptor()
}

func (RspCode) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[1]
}

func (x RspCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RspCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RspCode(num)
	return nil
}

// Deprecated: Use RspCode.Descriptor instead.
func (RspCode) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{1}
}

type SpecimenBwType int32

const (
	SpecimenBwType_NULL_BW_TYPE       SpecimenBwType = 0
	SpecimenBwType_WHITE_BW_TYPE      SpecimenBwType = 10
	SpecimenBwType_BLACK_BW_TYPE      SpecimenBwType = 20
	SpecimenBwType_BLACK_BW_TYPE_MAN1 SpecimenBwType = 21
	SpecimenBwType_BLACK_BW_TYPE_MAN2 SpecimenBwType = 22
	SpecimenBwType_GRAY_BW_TYPE       SpecimenBwType = 30
)

// Enum value maps for SpecimenBwType.
var (
	SpecimenBwType_name = map[int32]string{
		0:  "NULL_BW_TYPE",
		10: "WHITE_BW_TYPE",
		20: "BLACK_BW_TYPE",
		21: "BLACK_BW_TYPE_MAN1",
		22: "BLACK_BW_TYPE_MAN2",
		30: "GRAY_BW_TYPE",
	}
	SpecimenBwType_value = map[string]int32{
		"NULL_BW_TYPE":       0,
		"WHITE_BW_TYPE":      10,
		"BLACK_BW_TYPE":      20,
		"BLACK_BW_TYPE_MAN1": 21,
		"BLACK_BW_TYPE_MAN2": 22,
		"GRAY_BW_TYPE":       30,
	}
)

func (x SpecimenBwType) Enum() *SpecimenBwType {
	p := new(SpecimenBwType)
	*p = x
	return p
}

func (x SpecimenBwType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenBwType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[2].Descriptor()
}

func (SpecimenBwType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[2]
}

func (x SpecimenBwType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SpecimenBwType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SpecimenBwType(num)
	return nil
}

// Deprecated: Use SpecimenBwType.Descriptor instead.
func (SpecimenBwType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{2}
}

type FileType int32

const (
	FileType_FILETYPE_UNKNOWN FileType = -1
	FileType_FILETYPE_SCRIPT  FileType = 0
	FileType_FILETYPE_BIN     FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		-1: "FILETYPE_UNKNOWN",
		0:  "FILETYPE_SCRIPT",
		1:  "FILETYPE_BIN",
	}
	FileType_value = map[string]int32{
		"FILETYPE_UNKNOWN": -1,
		"FILETYPE_SCRIPT":  0,
		"FILETYPE_BIN":     1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[3].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[3]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FileType(num)
	return nil
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{3}
}

type EventsMalwareStatus int32

const (
	EventsMalwareStatus_EVT_MALWARE_STATUS_INIT      EventsMalwareStatus = 0
	EventsMalwareStatus_EVT_MALWARE_STATUS_SHOW      EventsMalwareStatus = 4
	EventsMalwareStatus_EVT_MALWARE_STATUS_TRUST     EventsMalwareStatus = 5
	EventsMalwareStatus_EVT_MALWARE_STATUS_QUARA     EventsMalwareStatus = 6
	EventsMalwareStatus_EVT_MALWARE_STATUS_WHITE     EventsMalwareStatus = 7
	EventsMalwareStatus_EVT_MALWARE_STATUS_DELETE    EventsMalwareStatus = 8
	EventsMalwareStatus_EVT_MALAWRE_STATUS_QUARAING  EventsMalwareStatus = 10
	EventsMalwareStatus_EVT_MALAWRE_STATUS_RESTORING EventsMalwareStatus = 11
	EventsMalwareStatus_EVT_MALAWRE_STATUS_EVTDEL    EventsMalwareStatus = 12
)

// Enum value maps for EventsMalwareStatus.
var (
	EventsMalwareStatus_name = map[int32]string{
		0:  "EVT_MALWARE_STATUS_INIT",
		4:  "EVT_MALWARE_STATUS_SHOW",
		5:  "EVT_MALWARE_STATUS_TRUST",
		6:  "EVT_MALWARE_STATUS_QUARA",
		7:  "EVT_MALWARE_STATUS_WHITE",
		8:  "EVT_MALWARE_STATUS_DELETE",
		10: "EVT_MALAWRE_STATUS_QUARAING",
		11: "EVT_MALAWRE_STATUS_RESTORING",
		12: "EVT_MALAWRE_STATUS_EVTDEL",
	}
	EventsMalwareStatus_value = map[string]int32{
		"EVT_MALWARE_STATUS_INIT":      0,
		"EVT_MALWARE_STATUS_SHOW":      4,
		"EVT_MALWARE_STATUS_TRUST":     5,
		"EVT_MALWARE_STATUS_QUARA":     6,
		"EVT_MALWARE_STATUS_WHITE":     7,
		"EVT_MALWARE_STATUS_DELETE":    8,
		"EVT_MALAWRE_STATUS_QUARAING":  10,
		"EVT_MALAWRE_STATUS_RESTORING": 11,
		"EVT_MALAWRE_STATUS_EVTDEL":    12,
	}
)

func (x EventsMalwareStatus) Enum() *EventsMalwareStatus {
	p := new(EventsMalwareStatus)
	*p = x
	return p
}

func (x EventsMalwareStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventsMalwareStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[4].Descriptor()
}

func (EventsMalwareStatus) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[4]
}

func (x EventsMalwareStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventsMalwareStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventsMalwareStatus(num)
	return nil
}

// Deprecated: Use EventsMalwareStatus.Descriptor instead.
func (EventsMalwareStatus) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{4}
}

type FileOptCode int32

const (
	FileOptCode_FILE_CREATE FileOptCode = 0
	FileOptCode_FILE_WRITE  FileOptCode = 1
	FileOptCode_FILE_DEL    FileOptCode = 2
)

// Enum value maps for FileOptCode.
var (
	FileOptCode_name = map[int32]string{
		0: "FILE_CREATE",
		1: "FILE_WRITE",
		2: "FILE_DEL",
	}
	FileOptCode_value = map[string]int32{
		"FILE_CREATE": 0,
		"FILE_WRITE":  1,
		"FILE_DEL":    2,
	}
)

func (x FileOptCode) Enum() *FileOptCode {
	p := new(FileOptCode)
	*p = x
	return p
}

func (x FileOptCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileOptCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[5].Descriptor()
}

func (FileOptCode) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[5]
}

func (x FileOptCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FileOptCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FileOptCode(num)
	return nil
}

// Deprecated: Use FileOptCode.Descriptor instead.
func (FileOptCode) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{5}
}

type YmonOper int32

const (
	YmonOper_YMON_REG_DELETE_KEY               YmonOper = 256 // sub_cmd_ymon_reg
	YmonOper_YMON_REG_SET_VALUE_KEY            YmonOper = 257
	YmonOper_YMON_REG_DELETE_VALUE_KEY         YmonOper = 258
	YmonOper_YMON_REG_SET_INFORMATION_KEY      YmonOper = 259
	YmonOper_YMON_REG_RENAME_KEY               YmonOper = 260
	YmonOper_YMON_REG_ENUMERATE_KEY            YmonOper = 261
	YmonOper_YMON_REG_ENUMERATE_VALUE_KEY      YmonOper = 262
	YmonOper_YMON_REG_QUERY_KEY                YmonOper = 263
	YmonOper_YMON_REG_QUERY_VALUE_KEY          YmonOper = 264
	YmonOper_YMON_REG_QUERY_MULTIPLE_VALUE_KEY YmonOper = 265
	YmonOper_YMON_REG_CREATE_KEY               YmonOper = 266
	YmonOper_YMON_REG_OPEN_KEY                 YmonOper = 267
	YmonOper_YMON_REG_HANDLE_CLOSE             YmonOper = 268
	YmonOper_YMON_REG_CREATE_KEY_EX            YmonOper = 269
	YmonOper_YMON_REG_OPEN_KEY_EX              YmonOper = 270
	YmonOper_YMON_REG_FLUSH_KEY                YmonOper = 271
	YmonOper_YMON_REG_LOAD_KEY                 YmonOper = 272
	YmonOper_YMON_REG_UNLOAD_KEY               YmonOper = 273
	YmonOper_YMON_REG_QUERY_KEY_SECURITY       YmonOper = 274
	YmonOper_YMON_REG_SET_KEY_SECURITY         YmonOper = 275
	YmonOper_YMON_REG_RESTORE_KEY              YmonOper = 276
	YmonOper_YMON_REG_SAVE_KEY                 YmonOper = 277
	YmonOper_YMON_REG_REPLACE_KEY              YmonOper = 278
	YmonOper_YMON_REG_QUERY_KEY_NAME           YmonOper = 279
)

// Enum value maps for YmonOper.
var (
	YmonOper_name = map[int32]string{
		256: "YMON_REG_DELETE_KEY",
		257: "YMON_REG_SET_VALUE_KEY",
		258: "YMON_REG_DELETE_VALUE_KEY",
		259: "YMON_REG_SET_INFORMATION_KEY",
		260: "YMON_REG_RENAME_KEY",
		261: "YMON_REG_ENUMERATE_KEY",
		262: "YMON_REG_ENUMERATE_VALUE_KEY",
		263: "YMON_REG_QUERY_KEY",
		264: "YMON_REG_QUERY_VALUE_KEY",
		265: "YMON_REG_QUERY_MULTIPLE_VALUE_KEY",
		266: "YMON_REG_CREATE_KEY",
		267: "YMON_REG_OPEN_KEY",
		268: "YMON_REG_HANDLE_CLOSE",
		269: "YMON_REG_CREATE_KEY_EX",
		270: "YMON_REG_OPEN_KEY_EX",
		271: "YMON_REG_FLUSH_KEY",
		272: "YMON_REG_LOAD_KEY",
		273: "YMON_REG_UNLOAD_KEY",
		274: "YMON_REG_QUERY_KEY_SECURITY",
		275: "YMON_REG_SET_KEY_SECURITY",
		276: "YMON_REG_RESTORE_KEY",
		277: "YMON_REG_SAVE_KEY",
		278: "YMON_REG_REPLACE_KEY",
		279: "YMON_REG_QUERY_KEY_NAME",
	}
	YmonOper_value = map[string]int32{
		"YMON_REG_DELETE_KEY":               256,
		"YMON_REG_SET_VALUE_KEY":            257,
		"YMON_REG_DELETE_VALUE_KEY":         258,
		"YMON_REG_SET_INFORMATION_KEY":      259,
		"YMON_REG_RENAME_KEY":               260,
		"YMON_REG_ENUMERATE_KEY":            261,
		"YMON_REG_ENUMERATE_VALUE_KEY":      262,
		"YMON_REG_QUERY_KEY":                263,
		"YMON_REG_QUERY_VALUE_KEY":          264,
		"YMON_REG_QUERY_MULTIPLE_VALUE_KEY": 265,
		"YMON_REG_CREATE_KEY":               266,
		"YMON_REG_OPEN_KEY":                 267,
		"YMON_REG_HANDLE_CLOSE":             268,
		"YMON_REG_CREATE_KEY_EX":            269,
		"YMON_REG_OPEN_KEY_EX":              270,
		"YMON_REG_FLUSH_KEY":                271,
		"YMON_REG_LOAD_KEY":                 272,
		"YMON_REG_UNLOAD_KEY":               273,
		"YMON_REG_QUERY_KEY_SECURITY":       274,
		"YMON_REG_SET_KEY_SECURITY":         275,
		"YMON_REG_RESTORE_KEY":              276,
		"YMON_REG_SAVE_KEY":                 277,
		"YMON_REG_REPLACE_KEY":              278,
		"YMON_REG_QUERY_KEY_NAME":           279,
	}
)

func (x YmonOper) Enum() *YmonOper {
	p := new(YmonOper)
	*p = x
	return p
}

func (x YmonOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YmonOper) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[6].Descriptor()
}

func (YmonOper) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[6]
}

func (x YmonOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YmonOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YmonOper(num)
	return nil
}

// Deprecated: Use YmonOper.Descriptor instead.
func (YmonOper) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{6}
}

type RegistryOperate int32

const (
	RegistryOperate_Registry_None             RegistryOperate = 0
	RegistryOperate_Registry_Del_Key          RegistryOperate = 100001
	RegistryOperate_Registry_Set_Key          RegistryOperate = 100002
	RegistryOperate_Registry_Create_Key       RegistryOperate = 100003
	RegistryOperate_Registry_Rename_Key       RegistryOperate = 100004
	RegistryOperate_Registry_Set_Key_Security RegistryOperate = 100005
	RegistryOperate_Registry_Del_Key_Value    RegistryOperate = 200001
	RegistryOperate_Registry_Set_Key_Value    RegistryOperate = 200002
)

// Enum value maps for RegistryOperate.
var (
	RegistryOperate_name = map[int32]string{
		0:      "Registry_None",
		100001: "Registry_Del_Key",
		100002: "Registry_Set_Key",
		100003: "Registry_Create_Key",
		100004: "Registry_Rename_Key",
		100005: "Registry_Set_Key_Security",
		200001: "Registry_Del_Key_Value",
		200002: "Registry_Set_Key_Value",
	}
	RegistryOperate_value = map[string]int32{
		"Registry_None":             0,
		"Registry_Del_Key":          100001,
		"Registry_Set_Key":          100002,
		"Registry_Create_Key":       100003,
		"Registry_Rename_Key":       100004,
		"Registry_Set_Key_Security": 100005,
		"Registry_Del_Key_Value":    200001,
		"Registry_Set_Key_Value":    200002,
	}
)

func (x RegistryOperate) Enum() *RegistryOperate {
	p := new(RegistryOperate)
	*p = x
	return p
}

func (x RegistryOperate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistryOperate) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[7].Descriptor()
}

func (RegistryOperate) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[7]
}

func (x RegistryOperate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegistryOperate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegistryOperate(num)
	return nil
}

// Deprecated: Use RegistryOperate.Descriptor instead.
func (RegistryOperate) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{7}
}

//--------------------------------------------------------------------------------------------
//网站防篡改  cmd_tamper_protect = 0x50;
// 防护状态
type TamperProtectStatus int32

const (
	TamperProtectStatus_TP_STATUS_UNSTARTED       TamperProtectStatus = 0 //未开启
	TamperProtectStatus_TP_STATUS_STARTING        TamperProtectStatus = 1 //启动中
	TamperProtectStatus_TP_STATUS_STARTED         TamperProtectStatus = 2 //已启动
	TamperProtectStatus_TP_STATUS_STOPPING        TamperProtectStatus = 3 //关闭中
	TamperProtectStatus_TP_STATUS_STOPPED         TamperProtectStatus = 4 //已关闭
	TamperProtectStatus_TP_STATUS_LICENSE_EXPIRED TamperProtectStatus = 5 //授权到期
)

// Enum value maps for TamperProtectStatus.
var (
	TamperProtectStatus_name = map[int32]string{
		0: "TP_STATUS_UNSTARTED",
		1: "TP_STATUS_STARTING",
		2: "TP_STATUS_STARTED",
		3: "TP_STATUS_STOPPING",
		4: "TP_STATUS_STOPPED",
		5: "TP_STATUS_LICENSE_EXPIRED",
	}
	TamperProtectStatus_value = map[string]int32{
		"TP_STATUS_UNSTARTED":       0,
		"TP_STATUS_STARTING":        1,
		"TP_STATUS_STARTED":         2,
		"TP_STATUS_STOPPING":        3,
		"TP_STATUS_STOPPED":         4,
		"TP_STATUS_LICENSE_EXPIRED": 5,
	}
)

func (x TamperProtectStatus) Enum() *TamperProtectStatus {
	p := new(TamperProtectStatus)
	*p = x
	return p
}

func (x TamperProtectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[8].Descriptor()
}

func (TamperProtectStatus) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[8]
}

func (x TamperProtectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectStatus(num)
	return nil
}

// Deprecated: Use TamperProtectStatus.Descriptor instead.
func (TamperProtectStatus) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{8}
}

// 防护异常类型
type TamperProtectException int32

const (
	TamperProtectException_TP_EXP_NONE                                 TamperProtectException = 0  //无异常
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED                       TamperProtectException = 1  //超出限制
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_NOT_A_DIRECTORY       TamperProtectException = 11 //超出限制，监控路径不是一个目录
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_NOT_SUPPORT_FILE_TYPE TamperProtectException = 12 //超出限制，文件类型不支持
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_TOO_DEEP_DIR          TamperProtectException = 13 //超出限制，目录深度超过限制
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_TOO_MANY_FILES        TamperProtectException = 14 //超出限制，文件数量超出限制
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_PATH_TOO_LONG         TamperProtectException = 15 //超出限制，路径太长
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_FILE_TOO_BIG          TamperProtectException = 16 //超出限制，文件太大
	TamperProtectException_TP_EXP_LIMIT_EXCEEDED_FILE_READ_FAILED      TamperProtectException = 17 //超出限制，文件读取失败
	TamperProtectException_TP_EXP_AGENT_OFFLINE                        TamperProtectException = 2  //agent离线，后台使用
	TamperProtectException_TP_EXP_TIMEOUT                              TamperProtectException = 3  //超时，后台使用
	TamperProtectException_TP_EXP_DISK_INSUFFICIENT                    TamperProtectException = 4  //磁盘不足
	TamperProtectException_TP_EXP_MACHINE_DESTROYED                    TamperProtectException = 5  //机器已销毁，后台使用
	TamperProtectException_TP_EXP_FILE_MODIFIED                        TamperProtectException = 6  //文件备份时发生变化（相对StartResponse）
	TamperProtectException_TP_EXP_MISC                                 TamperProtectException = 99 //其他
)

// Enum value maps for TamperProtectException.
var (
	TamperProtectException_name = map[int32]string{
		0:  "TP_EXP_NONE",
		1:  "TP_EXP_LIMIT_EXCEEDED",
		11: "TP_EXP_LIMIT_EXCEEDED_NOT_A_DIRECTORY",
		12: "TP_EXP_LIMIT_EXCEEDED_NOT_SUPPORT_FILE_TYPE",
		13: "TP_EXP_LIMIT_EXCEEDED_TOO_DEEP_DIR",
		14: "TP_EXP_LIMIT_EXCEEDED_TOO_MANY_FILES",
		15: "TP_EXP_LIMIT_EXCEEDED_PATH_TOO_LONG",
		16: "TP_EXP_LIMIT_EXCEEDED_FILE_TOO_BIG",
		17: "TP_EXP_LIMIT_EXCEEDED_FILE_READ_FAILED",
		2:  "TP_EXP_AGENT_OFFLINE",
		3:  "TP_EXP_TIMEOUT",
		4:  "TP_EXP_DISK_INSUFFICIENT",
		5:  "TP_EXP_MACHINE_DESTROYED",
		6:  "TP_EXP_FILE_MODIFIED",
		99: "TP_EXP_MISC",
	}
	TamperProtectException_value = map[string]int32{
		"TP_EXP_NONE":                                 0,
		"TP_EXP_LIMIT_EXCEEDED":                       1,
		"TP_EXP_LIMIT_EXCEEDED_NOT_A_DIRECTORY":       11,
		"TP_EXP_LIMIT_EXCEEDED_NOT_SUPPORT_FILE_TYPE": 12,
		"TP_EXP_LIMIT_EXCEEDED_TOO_DEEP_DIR":          13,
		"TP_EXP_LIMIT_EXCEEDED_TOO_MANY_FILES":        14,
		"TP_EXP_LIMIT_EXCEEDED_PATH_TOO_LONG":         15,
		"TP_EXP_LIMIT_EXCEEDED_FILE_TOO_BIG":          16,
		"TP_EXP_LIMIT_EXCEEDED_FILE_READ_FAILED":      17,
		"TP_EXP_AGENT_OFFLINE":                        2,
		"TP_EXP_TIMEOUT":                              3,
		"TP_EXP_DISK_INSUFFICIENT":                    4,
		"TP_EXP_MACHINE_DESTROYED":                    5,
		"TP_EXP_FILE_MODIFIED":                        6,
		"TP_EXP_MISC":                                 99,
	}
)

func (x TamperProtectException) Enum() *TamperProtectException {
	p := new(TamperProtectException)
	*p = x
	return p
}

func (x TamperProtectException) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectException) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[9].Descriptor()
}

func (TamperProtectException) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[9]
}

func (x TamperProtectException) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectException) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectException(num)
	return nil
}

// Deprecated: Use TamperProtectException.Descriptor instead.
func (TamperProtectException) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{9}
}

// 文件类型
type TamperProtectFileType int32

const (
	TamperProtectFileType_TP_FILE_REGULAR   TamperProtectFileType = 0 //常规文件
	TamperProtectFileType_TP_FILE_DIR       TamperProtectFileType = 1 //目录
	TamperProtectFileType_TP_FILE_SOFT_LINK TamperProtectFileType = 2 //软链
)

// Enum value maps for TamperProtectFileType.
var (
	TamperProtectFileType_name = map[int32]string{
		0: "TP_FILE_REGULAR",
		1: "TP_FILE_DIR",
		2: "TP_FILE_SOFT_LINK",
	}
	TamperProtectFileType_value = map[string]int32{
		"TP_FILE_REGULAR":   0,
		"TP_FILE_DIR":       1,
		"TP_FILE_SOFT_LINK": 2,
	}
)

func (x TamperProtectFileType) Enum() *TamperProtectFileType {
	p := new(TamperProtectFileType)
	*p = x
	return p
}

func (x TamperProtectFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[10].Descriptor()
}

func (TamperProtectFileType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[10]
}

func (x TamperProtectFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectFileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectFileType(num)
	return nil
}

// Deprecated: Use TamperProtectFileType.Descriptor instead.
func (TamperProtectFileType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{10}
}

// 恢复类型
type TamperProtectRecoverType int32

const (
	TamperProtectRecoverType_TP_RECOVER_CONTENT_RECOVER     TamperProtectRecoverType = 0 //内容被修改恢复
	TamperProtectRecoverType_TP_RECOVER_PERMISSIONS_RECOVER TamperProtectRecoverType = 1 //权限被修改恢复
	TamperProtectRecoverType_TP_RECOVER_OWNERSHIP_RECOVER   TamperProtectRecoverType = 2 //归属被修改恢复
	TamperProtectRecoverType_TP_RECOVER_DELETED_RECOVER     TamperProtectRecoverType = 3 //被删除恢复
	TamperProtectRecoverType_TP_RECOVER_NEW_DELETE          TamperProtectRecoverType = 4 //新增删除
)

// Enum value maps for TamperProtectRecoverType.
var (
	TamperProtectRecoverType_name = map[int32]string{
		0: "TP_RECOVER_CONTENT_RECOVER",
		1: "TP_RECOVER_PERMISSIONS_RECOVER",
		2: "TP_RECOVER_OWNERSHIP_RECOVER",
		3: "TP_RECOVER_DELETED_RECOVER",
		4: "TP_RECOVER_NEW_DELETE",
	}
	TamperProtectRecoverType_value = map[string]int32{
		"TP_RECOVER_CONTENT_RECOVER":     0,
		"TP_RECOVER_PERMISSIONS_RECOVER": 1,
		"TP_RECOVER_OWNERSHIP_RECOVER":   2,
		"TP_RECOVER_DELETED_RECOVER":     3,
		"TP_RECOVER_NEW_DELETE":          4,
	}
)

func (x TamperProtectRecoverType) Enum() *TamperProtectRecoverType {
	p := new(TamperProtectRecoverType)
	*p = x
	return p
}

func (x TamperProtectRecoverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectRecoverType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[11].Descriptor()
}

func (TamperProtectRecoverType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[11]
}

func (x TamperProtectRecoverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectRecoverType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectRecoverType(num)
	return nil
}

// Deprecated: Use TamperProtectRecoverType.Descriptor instead.
func (TamperProtectRecoverType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{11}
}

//--------------------------------------------------------------------------------------------
//新版漏扫（青藤） cmd_vulner_detect = 0x60;
// 异常
type VulnerDetectException int32

const (
	VulnerDetectException_VD_EXP_SUCCESS                 VulnerDetectException = 0  // 成功
	VulnerDetectException_VD_EXP_INFO                    VulnerDetectException = 1  // 传递信息或过程日志
	VulnerDetectException_VD_EXP_ALREADY_EXISTS          VulnerDetectException = 2  // 任务已存在
	VulnerDetectException_VD_EXP_TOO_MANY_TASKS          VulnerDetectException = 3  // 待执行的任务过多
	VulnerDetectException_VD_EXP_INVALID_CONFIG          VulnerDetectException = 4  // 无效配置
	VulnerDetectException_VD_EXP_DOWNLOAD_FAILED         VulnerDetectException = 5  // 下载失败
	VulnerDetectException_VD_EXP_UNZIP_FAILED            VulnerDetectException = 6  // 解压失败
	VulnerDetectException_VD_EXP_BIN_PATH_NOT_EXISTS     VulnerDetectException = 7  // 可执行路径不存在
	VulnerDetectException_VD_EXP_BIN_PATH_CHMOD_FAILED   VulnerDetectException = 8  // 可执行文件 chmod 失败
	VulnerDetectException_VD_EXP_CREATE_PROCESS_FAILED   VulnerDetectException = 9  // 创建进程失败
	VulnerDetectException_VD_EXP_PROCESS_EXIT_UNEXPECTED VulnerDetectException = 10 // 进程异常退出
	VulnerDetectException_VD_EXP_CPU_EXCEED_LIMIT        VulnerDetectException = 11 // CPU 超限
	VulnerDetectException_VD_EXP_MEM_EXCEED_LIMIT        VulnerDetectException = 12 // 内存 超限
	VulnerDetectException_VD_EXP_TIMEOUT                 VulnerDetectException = 13 // 执行超时
	VulnerDetectException_VD_EXP_NO_RESULT               VulnerDetectException = 14 // 无结果文件
	VulnerDetectException_VD_EXP_RESULT_EMPTY            VulnerDetectException = 15 // 结果文件为空
	VulnerDetectException_VD_EXP_RESULT_TOO_BIG          VulnerDetectException = 16 // 结果文件太大
	VulnerDetectException_VD_EXP_SEND_TO_AGENT_ERR       VulnerDetectException = 99 // 任务下发失败
)

// Enum value maps for VulnerDetectException.
var (
	VulnerDetectException_name = map[int32]string{
		0:  "VD_EXP_SUCCESS",
		1:  "VD_EXP_INFO",
		2:  "VD_EXP_ALREADY_EXISTS",
		3:  "VD_EXP_TOO_MANY_TASKS",
		4:  "VD_EXP_INVALID_CONFIG",
		5:  "VD_EXP_DOWNLOAD_FAILED",
		6:  "VD_EXP_UNZIP_FAILED",
		7:  "VD_EXP_BIN_PATH_NOT_EXISTS",
		8:  "VD_EXP_BIN_PATH_CHMOD_FAILED",
		9:  "VD_EXP_CREATE_PROCESS_FAILED",
		10: "VD_EXP_PROCESS_EXIT_UNEXPECTED",
		11: "VD_EXP_CPU_EXCEED_LIMIT",
		12: "VD_EXP_MEM_EXCEED_LIMIT",
		13: "VD_EXP_TIMEOUT",
		14: "VD_EXP_NO_RESULT",
		15: "VD_EXP_RESULT_EMPTY",
		16: "VD_EXP_RESULT_TOO_BIG",
		99: "VD_EXP_SEND_TO_AGENT_ERR",
	}
	VulnerDetectException_value = map[string]int32{
		"VD_EXP_SUCCESS":                 0,
		"VD_EXP_INFO":                    1,
		"VD_EXP_ALREADY_EXISTS":          2,
		"VD_EXP_TOO_MANY_TASKS":          3,
		"VD_EXP_INVALID_CONFIG":          4,
		"VD_EXP_DOWNLOAD_FAILED":         5,
		"VD_EXP_UNZIP_FAILED":            6,
		"VD_EXP_BIN_PATH_NOT_EXISTS":     7,
		"VD_EXP_BIN_PATH_CHMOD_FAILED":   8,
		"VD_EXP_CREATE_PROCESS_FAILED":   9,
		"VD_EXP_PROCESS_EXIT_UNEXPECTED": 10,
		"VD_EXP_CPU_EXCEED_LIMIT":        11,
		"VD_EXP_MEM_EXCEED_LIMIT":        12,
		"VD_EXP_TIMEOUT":                 13,
		"VD_EXP_NO_RESULT":               14,
		"VD_EXP_RESULT_EMPTY":            15,
		"VD_EXP_RESULT_TOO_BIG":          16,
		"VD_EXP_SEND_TO_AGENT_ERR":       99,
	}
)

func (x VulnerDetectException) Enum() *VulnerDetectException {
	p := new(VulnerDetectException)
	*p = x
	return p
}

func (x VulnerDetectException) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerDetectException) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[12].Descriptor()
}

func (VulnerDetectException) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[12]
}

func (x VulnerDetectException) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VulnerDetectException) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VulnerDetectException(num)
	return nil
}

// Deprecated: Use VulnerDetectException.Descriptor instead.
func (VulnerDetectException) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{12}
}

//--------------------------------------------------------------------------------------------
//新版基线 cmd_vulner_detect = 0x61; 协议结构和0x60一致
// 异常
type BaselineDetectException int32

const (
	BaselineDetectException_BL_EXP_SUCCESS                 BaselineDetectException = 0  // 成功
	BaselineDetectException_BL_EXP_INFO                    BaselineDetectException = 1  // 传递信息或过程日志
	BaselineDetectException_BL_EXP_ALREADY_EXISTS          BaselineDetectException = 2  // 任务已存在
	BaselineDetectException_BL_EXP_TOO_MANY_TASKS          BaselineDetectException = 3  // 待执行的任务过多
	BaselineDetectException_BL_EXP_INVALID_CONFIG          BaselineDetectException = 4  // 无效配置
	BaselineDetectException_BL_EXP_DOWNLOAD_FAILED         BaselineDetectException = 5  // 下载失败
	BaselineDetectException_BL_EXP_UNZIP_FAILED            BaselineDetectException = 6  // 解压失败
	BaselineDetectException_BL_EXP_BIN_PATH_NOT_EXISTS     BaselineDetectException = 7  // 可执行路径不存在
	BaselineDetectException_BL_EXP_BIN_PATH_CHMOD_FAILED   BaselineDetectException = 8  // 可执行文件 chmod 失败
	BaselineDetectException_BL_EXP_CREATE_PROCESS_FAILED   BaselineDetectException = 9  // 创建进程失败
	BaselineDetectException_BL_EXP_PROCESS_EXIT_UNEXPECTED BaselineDetectException = 10 // 进程异常退出
	BaselineDetectException_BL_EXP_CPU_EXCEED_LIMIT        BaselineDetectException = 11 // CPU 超限
	BaselineDetectException_BL_EXP_MEM_EXCEED_LIMIT        BaselineDetectException = 12 // 内存 超限
	BaselineDetectException_BL_EXP_TIMEOUT                 BaselineDetectException = 13 // 执行超时
	BaselineDetectException_BL_EXP_NO_RESULT               BaselineDetectException = 14 // 无结果文件
	BaselineDetectException_BL_EXP_RESULT_EMPTY            BaselineDetectException = 15 // 结果文件为空
	BaselineDetectException_BL_EXP_RESULT_TOO_BIG          BaselineDetectException = 16 // 结果文件太大
	BaselineDetectException_BL_EXP_SEND_TO_AGENT_ERR       BaselineDetectException = 99 // 任务下发失败
)

// Enum value maps for BaselineDetectException.
var (
	BaselineDetectException_name = map[int32]string{
		0:  "BL_EXP_SUCCESS",
		1:  "BL_EXP_INFO",
		2:  "BL_EXP_ALREADY_EXISTS",
		3:  "BL_EXP_TOO_MANY_TASKS",
		4:  "BL_EXP_INVALID_CONFIG",
		5:  "BL_EXP_DOWNLOAD_FAILED",
		6:  "BL_EXP_UNZIP_FAILED",
		7:  "BL_EXP_BIN_PATH_NOT_EXISTS",
		8:  "BL_EXP_BIN_PATH_CHMOD_FAILED",
		9:  "BL_EXP_CREATE_PROCESS_FAILED",
		10: "BL_EXP_PROCESS_EXIT_UNEXPECTED",
		11: "BL_EXP_CPU_EXCEED_LIMIT",
		12: "BL_EXP_MEM_EXCEED_LIMIT",
		13: "BL_EXP_TIMEOUT",
		14: "BL_EXP_NO_RESULT",
		15: "BL_EXP_RESULT_EMPTY",
		16: "BL_EXP_RESULT_TOO_BIG",
		99: "BL_EXP_SEND_TO_AGENT_ERR",
	}
	BaselineDetectException_value = map[string]int32{
		"BL_EXP_SUCCESS":                 0,
		"BL_EXP_INFO":                    1,
		"BL_EXP_ALREADY_EXISTS":          2,
		"BL_EXP_TOO_MANY_TASKS":          3,
		"BL_EXP_INVALID_CONFIG":          4,
		"BL_EXP_DOWNLOAD_FAILED":         5,
		"BL_EXP_UNZIP_FAILED":            6,
		"BL_EXP_BIN_PATH_NOT_EXISTS":     7,
		"BL_EXP_BIN_PATH_CHMOD_FAILED":   8,
		"BL_EXP_CREATE_PROCESS_FAILED":   9,
		"BL_EXP_PROCESS_EXIT_UNEXPECTED": 10,
		"BL_EXP_CPU_EXCEED_LIMIT":        11,
		"BL_EXP_MEM_EXCEED_LIMIT":        12,
		"BL_EXP_TIMEOUT":                 13,
		"BL_EXP_NO_RESULT":               14,
		"BL_EXP_RESULT_EMPTY":            15,
		"BL_EXP_RESULT_TOO_BIG":          16,
		"BL_EXP_SEND_TO_AGENT_ERR":       99,
	}
)

func (x BaselineDetectException) Enum() *BaselineDetectException {
	p := new(BaselineDetectException)
	*p = x
	return p
}

func (x BaselineDetectException) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaselineDetectException) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[13].Descriptor()
}

func (BaselineDetectException) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[13]
}

func (x BaselineDetectException) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BaselineDetectException) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BaselineDetectException(num)
	return nil
}

// Deprecated: Use BaselineDetectException.Descriptor instead.
func (BaselineDetectException) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{13}
}

//--------------------------------------------------------------------------------------------
//木马 cmd_malware = 0x70;
// 异常 //todo翼展修改补充
type MalwareScanException int32

const (
	MalwareScanException_MS_EXP_SUCCESS           MalwareScanException = 0  // 成功
	MalwareScanException_MS_EXP_INFO              MalwareScanException = 1  // 传递信息或过程日志
	MalwareScanException_MS_EXP_ALREADY_EXISTS    MalwareScanException = 2  // 任务已存在
	MalwareScanException_MS_EXP_TOO_MANY_TASKS    MalwareScanException = 3  // 待执行的任务过多
	MalwareScanException_MS_EXP_TIMEOUT           MalwareScanException = 4  // 执行超时
	MalwareScanException_MS_EXP_DOES_NOT_EXISTS   MalwareScanException = 5  // 任务不存在
	MalwareScanException_MS_EXP_TASK_IS_STOPPED   MalwareScanException = 6  // 任务被中断
	MalwareScanException_MS_EXP_SEND_TO_AGENT_ERR MalwareScanException = 99 // 任务下发失败
)

// Enum value maps for MalwareScanException.
var (
	MalwareScanException_name = map[int32]string{
		0:  "MS_EXP_SUCCESS",
		1:  "MS_EXP_INFO",
		2:  "MS_EXP_ALREADY_EXISTS",
		3:  "MS_EXP_TOO_MANY_TASKS",
		4:  "MS_EXP_TIMEOUT",
		5:  "MS_EXP_DOES_NOT_EXISTS",
		6:  "MS_EXP_TASK_IS_STOPPED",
		99: "MS_EXP_SEND_TO_AGENT_ERR",
	}
	MalwareScanException_value = map[string]int32{
		"MS_EXP_SUCCESS":           0,
		"MS_EXP_INFO":              1,
		"MS_EXP_ALREADY_EXISTS":    2,
		"MS_EXP_TOO_MANY_TASKS":    3,
		"MS_EXP_TIMEOUT":           4,
		"MS_EXP_DOES_NOT_EXISTS":   5,
		"MS_EXP_TASK_IS_STOPPED":   6,
		"MS_EXP_SEND_TO_AGENT_ERR": 99,
	}
)

func (x MalwareScanException) Enum() *MalwareScanException {
	p := new(MalwareScanException)
	*p = x
	return p
}

func (x MalwareScanException) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MalwareScanException) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[14].Descriptor()
}

func (MalwareScanException) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[14]
}

func (x MalwareScanException) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MalwareScanException) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MalwareScanException(num)
	return nil
}

// Deprecated: Use MalwareScanException.Descriptor instead.
func (MalwareScanException) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{14}
}

// 扫描模式enum
type MalwareScanType int32

const (
	MalwareScanType_MS_TYPE_FULL MalwareScanType = 0 //全盘扫描
	MalwareScanType_MS_TYPE_PART MalwareScanType = 1 //快速扫描
)

// Enum value maps for MalwareScanType.
var (
	MalwareScanType_name = map[int32]string{
		0: "MS_TYPE_FULL",
		1: "MS_TYPE_PART",
	}
	MalwareScanType_value = map[string]int32{
		"MS_TYPE_FULL": 0,
		"MS_TYPE_PART": 1,
	}
)

func (x MalwareScanType) Enum() *MalwareScanType {
	p := new(MalwareScanType)
	*p = x
	return p
}

func (x MalwareScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MalwareScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[15].Descriptor()
}

func (MalwareScanType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[15]
}

func (x MalwareScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MalwareScanType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MalwareScanType(num)
	return nil
}

// Deprecated: Use MalwareScanType.Descriptor instead.
func (MalwareScanType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{15}
}

// 监控模式enum
type MalwareMonitorType int32

const (
	MalwareMonitorType_MS_TYPE_STANDARD MalwareMonitorType = 0 //标准模式
	MalwareMonitorType_MS_TYPE_DEEP     MalwareMonitorType = 1 //深度模式
)

// Enum value maps for MalwareMonitorType.
var (
	MalwareMonitorType_name = map[int32]string{
		0: "MS_TYPE_STANDARD",
		1: "MS_TYPE_DEEP",
	}
	MalwareMonitorType_value = map[string]int32{
		"MS_TYPE_STANDARD": 0,
		"MS_TYPE_DEEP":     1,
	}
)

func (x MalwareMonitorType) Enum() *MalwareMonitorType {
	p := new(MalwareMonitorType)
	*p = x
	return p
}

func (x MalwareMonitorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MalwareMonitorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[16].Descriptor()
}

func (MalwareMonitorType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[16]
}

func (x MalwareMonitorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MalwareMonitorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MalwareMonitorType(num)
	return nil
}

// Deprecated: Use MalwareMonitorType.Descriptor instead.
func (MalwareMonitorType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{16}
}

type TcsMonitorMode int32

const (
	TcsMonitorMode_TcsMonitorSilent TcsMonitorMode = 1 // 静默模式
	TcsMonitorMode_TcsMonitorAlert  TcsMonitorMode = 2 // 告警模式
	TcsMonitorMode_TcsMonitorBlock  TcsMonitorMode = 3 // 拦截模式
)

// Enum value maps for TcsMonitorMode.
var (
	TcsMonitorMode_name = map[int32]string{
		1: "TcsMonitorSilent",
		2: "TcsMonitorAlert",
		3: "TcsMonitorBlock",
	}
	TcsMonitorMode_value = map[string]int32{
		"TcsMonitorSilent": 1,
		"TcsMonitorAlert":  2,
		"TcsMonitorBlock":  3,
	}
)

func (x TcsMonitorMode) Enum() *TcsMonitorMode {
	p := new(TcsMonitorMode)
	*p = x
	return p
}

func (x TcsMonitorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcsMonitorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[17].Descriptor()
}

func (TcsMonitorMode) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[17]
}

func (x TcsMonitorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TcsMonitorMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TcsMonitorMode(num)
	return nil
}

// Deprecated: Use TcsMonitorMode.Descriptor instead.
func (TcsMonitorMode) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{17}
}

type TcsAction int32

const (
	TcsAction_TcsAllow TcsAction = 1 // 放行
	TcsAction_TcsDeny  TcsAction = 2 // 拦截
	TcsAction_TcsAlert TcsAction = 3 // 告警
)

// Enum value maps for TcsAction.
var (
	TcsAction_name = map[int32]string{
		1: "TcsAllow",
		2: "TcsDeny",
		3: "TcsAlert",
	}
	TcsAction_value = map[string]int32{
		"TcsAllow": 1,
		"TcsDeny":  2,
		"TcsAlert": 3,
	}
)

func (x TcsAction) Enum() *TcsAction {
	p := new(TcsAction)
	*p = x
	return p
}

func (x TcsAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcsAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[18].Descriptor()
}

func (TcsAction) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[18]
}

func (x TcsAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TcsAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TcsAction(num)
	return nil
}

// Deprecated: Use TcsAction.Descriptor instead.
func (TcsAction) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{18}
}

type TcsAlertType int32

const (
	// 保留 1~100
	TcsAlertType_TcsAlertReserve TcsAlertType = 100
	// 镜像相关 101~200
	TcsAlertType_TcsAlertImageMIN  TcsAlertType = 101
	TcsAlertType_TcsAlertImageDeny TcsAlertType = 101 // 高危镜像拦截
	TcsAlertType_TcsAlertImageMAX  TcsAlertType = 200
	// 逃逸相关 201~300
	TcsAlertType_TcsAlertEscapeMIN           TcsAlertType = 201
	TcsAlertType_TcsAlertEscapeFileIsolate   TcsAlertType = 201 // 文件修改逃逸: 容器内进程修改容器外文件(未挂载进容器)
	TcsAlertType_TcsAlertEscapeSyscall       TcsAlertType = 202 // syscall逃逸: 容器内进程调用容器白名单以外的syscall
	TcsAlertType_TcsAlertEscapeMountNS       TcsAlertType = 203 // 容器内进程突破文件系统隔离
	TcsAlertType_TcsAlertEscapePrivPromote   TcsAlertType = 204 // 容器内进程提权
	TcsAlertType_TcsAlertEscapePrivContainer TcsAlertType = 205 // 特权容器(权限列表)
	TcsAlertType_TcsAlertEscapeMountRiskPath TcsAlertType = 206 // 挂载宿主机敏感目录|挂载docker.sock进容器
	TcsAlertType_TcsAlertEscapeMAX           TcsAlertType = 300
	// syscall监控 301~400
	TcsAlertType_TcsAlertSyscallMIN  TcsAlertType = 301
	TcsAlertType_TcsAlertRiskSyscall TcsAlertType = 301 // 高危syscall监控告警
	TcsAlertType_TcsAlertSyscallMAX  TcsAlertType = 400
	// 文件监控    401~500
	TcsAlertType_TcsAlertFilemonMIN      TcsAlertType = 401
	TcsAlertType_TcsAlertFileAccess      TcsAlertType = 401 // 文件访问控制告警
	TcsAlertType_TcsAlertBlockFileAccess TcsAlertType = 402 // 文件访问控制拦截
	TcsAlertType_TcsAlertFilemonMAX      TcsAlertType = 500
	// 进程黑白名单501~600
	TcsAlertType_TcsAlertProcmonMIN    TcsAlertType = 501
	TcsAlertType_TcsAlertRiskProc      TcsAlertType = 501 // 进程黑白名单告警
	TcsAlertType_TcsAlertBlockRiskProc TcsAlertType = 502 // 进程黑白名单拦截
	TcsAlertType_TcsAlertProcmonMAX    TcsAlertType = 600
)

// Enum value maps for TcsAlertType.
var (
	TcsAlertType_name = map[int32]string{
		100: "TcsAlertReserve",
		101: "TcsAlertImageMIN",
		// Duplicate value: 101: "TcsAlertImageDeny",
		200: "TcsAlertImageMAX",
		201: "TcsAlertEscapeMIN",
		// Duplicate value: 201: "TcsAlertEscapeFileIsolate",
		202: "TcsAlertEscapeSyscall",
		203: "TcsAlertEscapeMountNS",
		204: "TcsAlertEscapePrivPromote",
		205: "TcsAlertEscapePrivContainer",
		206: "TcsAlertEscapeMountRiskPath",
		300: "TcsAlertEscapeMAX",
		301: "TcsAlertSyscallMIN",
		// Duplicate value: 301: "TcsAlertRiskSyscall",
		400: "TcsAlertSyscallMAX",
		401: "TcsAlertFilemonMIN",
		// Duplicate value: 401: "TcsAlertFileAccess",
		402: "TcsAlertBlockFileAccess",
		500: "TcsAlertFilemonMAX",
		501: "TcsAlertProcmonMIN",
		// Duplicate value: 501: "TcsAlertRiskProc",
		502: "TcsAlertBlockRiskProc",
		600: "TcsAlertProcmonMAX",
	}
	TcsAlertType_value = map[string]int32{
		"TcsAlertReserve":             100,
		"TcsAlertImageMIN":            101,
		"TcsAlertImageDeny":           101,
		"TcsAlertImageMAX":            200,
		"TcsAlertEscapeMIN":           201,
		"TcsAlertEscapeFileIsolate":   201,
		"TcsAlertEscapeSyscall":       202,
		"TcsAlertEscapeMountNS":       203,
		"TcsAlertEscapePrivPromote":   204,
		"TcsAlertEscapePrivContainer": 205,
		"TcsAlertEscapeMountRiskPath": 206,
		"TcsAlertEscapeMAX":           300,
		"TcsAlertSyscallMIN":          301,
		"TcsAlertRiskSyscall":         301,
		"TcsAlertSyscallMAX":          400,
		"TcsAlertFilemonMIN":          401,
		"TcsAlertFileAccess":          401,
		"TcsAlertBlockFileAccess":     402,
		"TcsAlertFilemonMAX":          500,
		"TcsAlertProcmonMIN":          501,
		"TcsAlertRiskProc":            501,
		"TcsAlertBlockRiskProc":       502,
		"TcsAlertProcmonMAX":          600,
	}
)

func (x TcsAlertType) Enum() *TcsAlertType {
	p := new(TcsAlertType)
	*p = x
	return p
}

func (x TcsAlertType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcsAlertType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[19].Descriptor()
}

func (TcsAlertType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[19]
}

func (x TcsAlertType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TcsAlertType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TcsAlertType(num)
	return nil
}

// Deprecated: Use TcsAlertType.Descriptor instead.
func (TcsAlertType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{19}
}

type MsgCmd_TcpProtoDelimiter int32

const (
	MsgCmd_TCP_STX_C MsgCmd_TcpProtoDelimiter = 46
	MsgCmd_TCP_ETX_C MsgCmd_TcpProtoDelimiter = 54
)

// Enum value maps for MsgCmd_TcpProtoDelimiter.
var (
	MsgCmd_TcpProtoDelimiter_name = map[int32]string{
		46: "TCP_STX_C",
		54: "TCP_ETX_C",
	}
	MsgCmd_TcpProtoDelimiter_value = map[string]int32{
		"TCP_STX_C": 46,
		"TCP_ETX_C": 54,
	}
)

func (x MsgCmd_TcpProtoDelimiter) Enum() *MsgCmd_TcpProtoDelimiter {
	p := new(MsgCmd_TcpProtoDelimiter)
	*p = x
	return p
}

func (x MsgCmd_TcpProtoDelimiter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgCmd_TcpProtoDelimiter) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[20].Descriptor()
}

func (MsgCmd_TcpProtoDelimiter) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[20]
}

func (x MsgCmd_TcpProtoDelimiter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgCmd_TcpProtoDelimiter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgCmd_TcpProtoDelimiter(num)
	return nil
}

// Deprecated: Use MsgCmd_TcpProtoDelimiter.Descriptor instead.
func (MsgCmd_TcpProtoDelimiter) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0, 0}
}

type MsgCmd_HttpProtoDelimiter int32

const (
	MsgCmd_HTTP_STX_C MsgCmd_HttpProtoDelimiter = 40
	MsgCmd_HTTP_ETX_C MsgCmd_HttpProtoDelimiter = 41
)

// Enum value maps for MsgCmd_HttpProtoDelimiter.
var (
	MsgCmd_HttpProtoDelimiter_name = map[int32]string{
		40: "HTTP_STX_C",
		41: "HTTP_ETX_C",
	}
	MsgCmd_HttpProtoDelimiter_value = map[string]int32{
		"HTTP_STX_C": 40,
		"HTTP_ETX_C": 41,
	}
)

func (x MsgCmd_HttpProtoDelimiter) Enum() *MsgCmd_HttpProtoDelimiter {
	p := new(MsgCmd_HttpProtoDelimiter)
	*p = x
	return p
}

func (x MsgCmd_HttpProtoDelimiter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgCmd_HttpProtoDelimiter) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[21].Descriptor()
}

func (MsgCmd_HttpProtoDelimiter) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[21]
}

func (x MsgCmd_HttpProtoDelimiter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgCmd_HttpProtoDelimiter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgCmd_HttpProtoDelimiter(num)
	return nil
}

// Deprecated: Use MsgCmd_HttpProtoDelimiter.Descriptor instead.
func (MsgCmd_HttpProtoDelimiter) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0, 1}
}

type MsgCmdMaincmd int32

const (
	// 木马
	MsgCmd_cmd_webshell_file_scan   MsgCmdMaincmd = 3     //木马文件上报检测
	MsgCmd_cmd_webshell_md5_query   MsgCmdMaincmd = 4     //木马MD5上报云查系统账户
	MsgCmd_cmd_webshell_quara       MsgCmdMaincmd = 6     //隔离/恢复结果上报
	MsgCmd_cmd_file_check           MsgCmdMaincmd = 51    //验证文件是否存在
	MsgCmd_cmd_bruteforce_evt       MsgCmdMaincmd = 5     //暴力破解
	MsgCmd_cmd_fast_report          MsgCmdMaincmd = 7     //EDR数据采集
	MsgCmd_cmd_heart_beat           MsgCmdMaincmd = 16    //心跳
	MsgCmd_cmd_agent_initial        MsgCmdMaincmd = 17    //初始化
	MsgCmd_cmd_push_msg             MsgCmdMaincmd = 18    // push 命令
	MsgCmd_cmd_host_login           MsgCmdMaincmd = 19    //登录流水
	MsgCmd_cmd_json_event           MsgCmdMaincmd = 22    //漏洞基线
	MsgCmd_cmd_dns                  MsgCmdMaincmd = 23    //old, not valid
	MsgCmd_cmd_user_account         MsgCmdMaincmd = 24    //上报系统账户信息
	MsgCmd_cmd_open_port_report     MsgCmdMaincmd = 25    //上报开放端口信息
	MsgCmd_cmd_process_info         MsgCmdMaincmd = 32    //agent 上报进程信息
	MsgCmd_cmd_dns_answer           MsgCmdMaincmd = 33    //新增dns 协议，会逐步替代老的dns协议
	MsgCmd_cmd_dynamic_config       MsgCmdMaincmd = 34    //for user define config
	MsgCmd_cmd_dns_query            MsgCmdMaincmd = 35    //dns with process info
	MsgCmd_cmd_secure_monitor       MsgCmdMaincmd = 36    //注册表，文件监控等
	MsgCmd_cmd_agent_monitor        MsgCmdMaincmd = 37    //agent cpu, memory monitor
	MsgCmd_cmd_crash_report         MsgCmdMaincmd = 38    //crash上报
	MsgCmd_cmd_saic_sign_check      MsgCmdMaincmd = 39    //上汽签名验证
	MsgCmd_cmd_user_cmd_report      MsgCmdMaincmd = 40    //用户命令行上报
	MsgCmd_cmd_privilege_escalation MsgCmdMaincmd = 41    //本地提权
	MsgCmd_cmd_ymon                 MsgCmdMaincmd = 48    //registry monitor
	MsgCmd_cmd_filemodify           MsgCmdMaincmd = 49    //file modify
	MsgCmd_cmd_reverse_shell        MsgCmdMaincmd = 50    //反弹shell
	MsgCmd_cmd_to_yd_common         MsgCmdMaincmd = 39321 //server内部消息负载均衡转发使用
	MsgCmd_cmd_webserver_info       MsgCmdMaincmd = 64    //上报基于web server检测出的web root目录
	MsgCmd_cmd_crontab_report       MsgCmdMaincmd = 65    //上报机器crontab
	MsgCmd_cmd_tamper_protect       MsgCmdMaincmd = 80    //网页防篡改
	MsgCmd_cmd_vulner_detect        MsgCmdMaincmd = 96    //新版漏扫（青藤）
	MsgCmd_cmd_baseline_detect      MsgCmdMaincmd = 97    //新版基线
	MsgCmd_cmd_asset_scan           MsgCmdMaincmd = 98    //新版资产管理
	MsgCmd_cmd_remote_task_comm     MsgCmdMaincmd = 99    //自定义remote task(容器安全)
	MsgCmd_cmd_tcss_baseline_detect MsgCmdMaincmd = 100   //tcss baseline检测
	MsgCmd_cmd_hids_task_comm       MsgCmdMaincmd = 101   //自定义remote task(主机安全用)
	MsgCmd_cmd_malware              MsgCmdMaincmd = 112   //木马（恶意文件）
	MsgCmd_cmd_tcs_malware          MsgCmdMaincmd = 113   //木马（容器镜像扫描）
	MsgCmd_cmd_tcs_runtime          MsgCmdMaincmd = 114   // 容器策略中心
	MsgCmd_cmd_usrcfgV2             MsgCmdMaincmd = 115
	MsgCmd_cmd_http_event           MsgCmdMaincmd = 116 // http接入层消息
	MsgCmd_cmd_fimfilemon           MsgCmdMaincmd = 117
	MsgCmd_cmd_tcs_runtime_malware  MsgCmdMaincmd = 118
)

// Enum value maps for MsgCmdMaincmd.
var (
	MsgCmdMaincmd_name = map[int32]string{
		3:     "cmd_webshell_file_scan",
		4:     "cmd_webshell_md5_query",
		6:     "cmd_webshell_quara",
		51:    "cmd_file_check",
		5:     "cmd_bruteforce_evt",
		7:     "cmd_fast_report",
		16:    "cmd_heart_beat",
		17:    "cmd_agent_initial",
		18:    "cmd_push_msg",
		19:    "cmd_host_login",
		22:    "cmd_json_event",
		23:    "cmd_dns",
		24:    "cmd_user_account",
		25:    "cmd_open_port_report",
		32:    "cmd_process_info",
		33:    "cmd_dns_answer",
		34:    "cmd_dynamic_config",
		35:    "cmd_dns_query",
		36:    "cmd_secure_monitor",
		37:    "cmd_agent_monitor",
		38:    "cmd_crash_report",
		39:    "cmd_saic_sign_check",
		40:    "cmd_user_cmd_report",
		41:    "cmd_privilege_escalation",
		48:    "cmd_ymon",
		49:    "cmd_filemodify",
		50:    "cmd_reverse_shell",
		39321: "cmd_to_yd_common",
		64:    "cmd_webserver_info",
		65:    "cmd_crontab_report",
		80:    "cmd_tamper_protect",
		96:    "cmd_vulner_detect",
		97:    "cmd_baseline_detect",
		98:    "cmd_asset_scan",
		99:    "cmd_remote_task_comm",
		100:   "cmd_tcss_baseline_detect",
		101:   "cmd_hids_task_comm",
		112:   "cmd_malware",
		113:   "cmd_tcs_malware",
		114:   "cmd_tcs_runtime",
		115:   "cmd_usrcfgV2",
		116:   "cmd_http_event",
		117:   "cmd_fimfilemon",
		118:   "cmd_tcs_runtime_malware",
	}
	MsgCmdMaincmd_value = map[string]int32{
		"cmd_webshell_file_scan":   3,
		"cmd_webshell_md5_query":   4,
		"cmd_webshell_quara":       6,
		"cmd_file_check":           51,
		"cmd_bruteforce_evt":       5,
		"cmd_fast_report":          7,
		"cmd_heart_beat":           16,
		"cmd_agent_initial":        17,
		"cmd_push_msg":             18,
		"cmd_host_login":           19,
		"cmd_json_event":           22,
		"cmd_dns":                  23,
		"cmd_user_account":         24,
		"cmd_open_port_report":     25,
		"cmd_process_info":         32,
		"cmd_dns_answer":           33,
		"cmd_dynamic_config":       34,
		"cmd_dns_query":            35,
		"cmd_secure_monitor":       36,
		"cmd_agent_monitor":        37,
		"cmd_crash_report":         38,
		"cmd_saic_sign_check":      39,
		"cmd_user_cmd_report":      40,
		"cmd_privilege_escalation": 41,
		"cmd_ymon":                 48,
		"cmd_filemodify":           49,
		"cmd_reverse_shell":        50,
		"cmd_to_yd_common":         39321,
		"cmd_webserver_info":       64,
		"cmd_crontab_report":       65,
		"cmd_tamper_protect":       80,
		"cmd_vulner_detect":        96,
		"cmd_baseline_detect":      97,
		"cmd_asset_scan":           98,
		"cmd_remote_task_comm":     99,
		"cmd_tcss_baseline_detect": 100,
		"cmd_hids_task_comm":       101,
		"cmd_malware":              112,
		"cmd_tcs_malware":          113,
		"cmd_tcs_runtime":          114,
		"cmd_usrcfgV2":             115,
		"cmd_http_event":           116,
		"cmd_fimfilemon":           117,
		"cmd_tcs_runtime_malware":  118,
	}
)

func (x MsgCmdMaincmd) Enum() *MsgCmdMaincmd {
	p := new(MsgCmdMaincmd)
	*p = x
	return p
}

func (x MsgCmdMaincmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgCmdMaincmd) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[22].Descriptor()
}

func (MsgCmdMaincmd) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[22]
}

func (x MsgCmdMaincmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgCmdMaincmd) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgCmdMaincmd(num)
	return nil
}

// Deprecated: Use MsgCmdMaincmd.Descriptor instead.
func (MsgCmdMaincmd) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0, 2}
}

type MsgCmdSubcmd int32

const (
	MsgCmd_dns_report                MsgCmdSubcmd = 256
	MsgCmd_file_check_query          MsgCmdSubcmd = 256
	MsgCmd_init_login_rsp            MsgCmdSubcmd = 1
	MsgCmd_init_sync_login_info      MsgCmdSubcmd = 2
	MsgCmd_sub_cmd_bruteforce        MsgCmdSubcmd = 512
	MsgCmd_push_msg                  MsgCmdSubcmd = 768
	MsgCmd_push_resp                 MsgCmdSubcmd = 769
	MsgCmd_push_ack                  MsgCmdSubcmd = 770
	MsgCmd_all_user_account          MsgCmdSubcmd = 1 //全量上报系统账户信息
	MsgCmd_modified_user_account     MsgCmdSubcmd = 2 //增量上报系统账户信息
	MsgCmd_user_def_config_req       MsgCmdSubcmd = 0
	MsgCmd_user_def_config_rsp       MsgCmdSubcmd = 1
	MsgCmd_report_all_open_port_info MsgCmdSubcmd = 0
	MsgCmd_sub_cmd_ymon_reg          MsgCmdSubcmd = 256
	MsgCmd_sub_cmd_file_modify       MsgCmdSubcmd = 257
	// 木马
	MsgCmd_webshell_md5_query_report     MsgCmdSubcmd = 256 //木马MD5云查上报
	MsgCmd_webshell_file_content_get     MsgCmdSubcmd = 257 //下发提取木马文件
	MsgCmd_webshell_file_content_report  MsgCmdSubcmd = 258 //木马文件上报检测
	MsgCmd_webshell_quara_succ           MsgCmdSubcmd = 264 //隔离成功
	MsgCmd_webshell_quara_fail           MsgCmdSubcmd = 265 //隔离失败
	MsgCmd_webshell_quara_restore_succ   MsgCmdSubcmd = 272 //隔离后恢复成功
	MsgCmd_webshell_quara_restore_failed MsgCmdSubcmd = 273 //隔离后恢复失败
	MsgCmd_webshell_quara_notfound       MsgCmdSubcmd = 274 //隔离时文件已删除
	MsgCmd_file_check                    MsgCmdSubcmd = 1   //验证文件是否存在上报
	//网页防篡改
	MsgCmd_tamper_protect_config_request          MsgCmdSubcmd = 1
	MsgCmd_tamper_protect_config_response         MsgCmdSubcmd = 2
	MsgCmd_tamper_protect_start_request           MsgCmdSubcmd = 3
	MsgCmd_tamper_protect_start_response          MsgCmdSubcmd = 4
	MsgCmd_tamper_protect_backup_files_request    MsgCmdSubcmd = 5
	MsgCmd_tamper_protect_backup_files_response   MsgCmdSubcmd = 6
	MsgCmd_tamper_protect_up_file_request         MsgCmdSubcmd = 7
	MsgCmd_tamper_protect_up_file_response        MsgCmdSubcmd = 8
	MsgCmd_tamper_protect_report_files_request    MsgCmdSubcmd = 9
	MsgCmd_tamper_protect_report_files_response   MsgCmdSubcmd = 16
	MsgCmd_tamper_protect_down_file_request       MsgCmdSubcmd = 17
	MsgCmd_tamper_protect_down_file_response      MsgCmdSubcmd = 18
	MsgCmd_tamper_protect_recover_result_request  MsgCmdSubcmd = 19
	MsgCmd_tamper_protect_recover_result_response MsgCmdSubcmd = 20
	MsgCmd_tamper_protect_stop_request            MsgCmdSubcmd = 21
	MsgCmd_tamper_protect_stop_response           MsgCmdSubcmd = 22
	//新版漏扫（青藤）
	MsgCmd_vulner_detect_request       MsgCmdSubcmd = 1
	MsgCmd_vulner_detect_response      MsgCmdSubcmd = 2
	MsgCmd_vulner_detect_message       MsgCmdSubcmd = 3
	MsgCmd_vulner_detect_stop_request  MsgCmdSubcmd = 4 //下发终止扫描请求
	MsgCmd_vulner_detect_stop_response MsgCmdSubcmd = 5 //确认收到终止扫描请求
	//新版基线
	MsgCmd_baseline_detect_request  MsgCmdSubcmd = 1
	MsgCmd_baseline_detect_response MsgCmdSubcmd = 2
	MsgCmd_baseline_detect_message  MsgCmdSubcmd = 3
	//木马
	//木马扫描
	MsgCmd_malware_scan_request       MsgCmdSubcmd = 1 //下发扫描请求
	MsgCmd_malware_scan_ack           MsgCmdSubcmd = 2 //确认收到扫描请求
	MsgCmd_malware_scan_response      MsgCmdSubcmd = 3 //扫描结果响应
	MsgCmd_malware_scan_stop_request  MsgCmdSubcmd = 4 //下发终止扫描请求
	MsgCmd_malware_scan_stop_response MsgCmdSubcmd = 5 //确认收到终止扫描请求
	//木马监控
	MsgCmd_malware_monitor_push_request  MsgCmdSubcmd = 6 //通知客户端变更监控请求
	MsgCmd_malware_monitor_push_response MsgCmdSubcmd = 7 //通知客户端变更监控响应
	MsgCmd_malware_monitor_pull_request  MsgCmdSubcmd = 8 //客户端拉取监控配置请求
	MsgCmd_malware_monitor_pull_response MsgCmdSubcmd = 9 //客户端拉取监控配置响应
	// TCS容器镜像木马扫描，仅用于proxy和common转发，消费端在tcs后端处理
	MsgCmd_tcs_malware_scan_image        MsgCmdSubcmd = 1
	MsgCmd_tcs_malware_scan_image_ack    MsgCmdSubcmd = 2
	MsgCmd_tcs_malware_report_hash       MsgCmdSubcmd = 3
	MsgCmd_tcs_malware_report_hash_ack   MsgCmdSubcmd = 4
	MsgCmd_tcs_malware_report_file       MsgCmdSubcmd = 5
	MsgCmd_tcs_malware_report_file_ack   MsgCmdSubcmd = 6
	MsgCmd_tcs_malware_scan_image_cancel MsgCmdSubcmd = 7
	// 容器运行时策略中心
	MsgCmd_tcs_runtime_query_policy MsgCmdSubcmd = 1 // c->s
	MsgCmd_tcs_runtime_query_ack    MsgCmdSubcmd = 2 // s->c
	MsgCmd_tcs_runtime_notify       MsgCmdSubcmd = 3 // s->c 通知agent更新策略
	MsgCmd_tcs_runtime_notify_ack   MsgCmdSubcmd = 4 // c->s ack
	// 新版策略
	MsgCmd_usrcfgV2_notify     MsgCmdSubcmd = 1 // s->c
	MsgCmd_usrcfgV2_notify_ack MsgCmdSubcmd = 2 // c->s
	MsgCmd_usrcfgV2_query      MsgCmdSubcmd = 3 // c->s
	MsgCmd_usrcfgV2_query_ack  MsgCmdSubcmd = 4 // s->c
	// http event
	MsgCmd_http_detect_vmcore MsgCmdSubcmd = 1
	MsgCmd_http_detect_taint  MsgCmdSubcmd = 2
	// 核心文件篡改监控
	MsgCmd_fim_create_baseline        MsgCmdSubcmd = 1  // s->c
	MsgCmd_fim_baseline_ack           MsgCmdSubcmd = 2  // c->s
	MsgCmd_fim_baseline_stop          MsgCmdSubcmd = 3  // s->c
	MsgCmd_fim_baseline_stop_response MsgCmdSubcmd = 4  // c->s
	MsgCmd_fim_baseline_response      MsgCmdSubcmd = 5  // c->s
	MsgCmd_fim_integrity_check        MsgCmdSubcmd = 6  // s->c
	MsgCmd_fim_check_ack              MsgCmdSubcmd = 7  // c->s
	MsgCmd_fim_report_result          MsgCmdSubcmd = 8  // c->s
	MsgCmd_fim_check_stop             MsgCmdSubcmd = 9  // s->c
	MsgCmd_fim_check_stop_response    MsgCmdSubcmd = 16 // c->s
	// 容器木马扫描
	MsgCmd_tcs_malware_scan_container            MsgCmdSubcmd = 0
	MsgCmd_tcs_malware_scan_container_ack        MsgCmdSubcmd = 1
	MsgCmd_tcs_malware_scan_container_cancel     MsgCmdSubcmd = 2
	MsgCmd_tcs_malware_report_container_hash     MsgCmdSubcmd = 3
	MsgCmd_tcs_malware_report_container_hash_ack MsgCmdSubcmd = 4
	MsgCmd_tcs_malware_report_container_file     MsgCmdSubcmd = 5
	MsgCmd_tcs_malware_report_container_file_ack MsgCmdSubcmd = 6
)

// Enum value maps for MsgCmdSubcmd.
var (
	MsgCmdSubcmd_name = map[int32]string{
		256: "dns_report",
		// Duplicate value: 256: "file_check_query",
		1:   "init_login_rsp",
		2:   "init_sync_login_info",
		512: "sub_cmd_bruteforce",
		768: "push_msg",
		769: "push_resp",
		770: "push_ack",
		// Duplicate value: 1: "all_user_account",
		// Duplicate value: 2: "modified_user_account",
		0: "user_def_config_req",
		// Duplicate value: 1: "user_def_config_rsp",
		// Duplicate value: 0: "report_all_open_port_info",
		// Duplicate value: 256: "sub_cmd_ymon_reg",
		257: "sub_cmd_file_modify",
		// Duplicate value: 256: "webshell_md5_query_report",
		// Duplicate value: 257: "webshell_file_content_get",
		258: "webshell_file_content_report",
		264: "webshell_quara_succ",
		265: "webshell_quara_fail",
		272: "webshell_quara_restore_succ",
		273: "webshell_quara_restore_failed",
		274: "webshell_quara_notfound",
		// Duplicate value: 1: "file_check",
		// Duplicate value: 1: "tamper_protect_config_request",
		// Duplicate value: 2: "tamper_protect_config_response",
		3:  "tamper_protect_start_request",
		4:  "tamper_protect_start_response",
		5:  "tamper_protect_backup_files_request",
		6:  "tamper_protect_backup_files_response",
		7:  "tamper_protect_up_file_request",
		8:  "tamper_protect_up_file_response",
		9:  "tamper_protect_report_files_request",
		16: "tamper_protect_report_files_response",
		17: "tamper_protect_down_file_request",
		18: "tamper_protect_down_file_response",
		19: "tamper_protect_recover_result_request",
		20: "tamper_protect_recover_result_response",
		21: "tamper_protect_stop_request",
		22: "tamper_protect_stop_response",
		// Duplicate value: 1: "vulner_detect_request",
		// Duplicate value: 2: "vulner_detect_response",
		// Duplicate value: 3: "vulner_detect_message",
		// Duplicate value: 4: "vulner_detect_stop_request",
		// Duplicate value: 5: "vulner_detect_stop_response",
		// Duplicate value: 1: "baseline_detect_request",
		// Duplicate value: 2: "baseline_detect_response",
		// Duplicate value: 3: "baseline_detect_message",
		// Duplicate value: 1: "malware_scan_request",
		// Duplicate value: 2: "malware_scan_ack",
		// Duplicate value: 3: "malware_scan_response",
		// Duplicate value: 4: "malware_scan_stop_request",
		// Duplicate value: 5: "malware_scan_stop_response",
		// Duplicate value: 6: "malware_monitor_push_request",
		// Duplicate value: 7: "malware_monitor_push_response",
		// Duplicate value: 8: "malware_monitor_pull_request",
		// Duplicate value: 9: "malware_monitor_pull_response",
		// Duplicate value: 1: "tcs_malware_scan_image",
		// Duplicate value: 2: "tcs_malware_scan_image_ack",
		// Duplicate value: 3: "tcs_malware_report_hash",
		// Duplicate value: 4: "tcs_malware_report_hash_ack",
		// Duplicate value: 5: "tcs_malware_report_file",
		// Duplicate value: 6: "tcs_malware_report_file_ack",
		// Duplicate value: 7: "tcs_malware_scan_image_cancel",
		// Duplicate value: 1: "tcs_runtime_query_policy",
		// Duplicate value: 2: "tcs_runtime_query_ack",
		// Duplicate value: 3: "tcs_runtime_notify",
		// Duplicate value: 4: "tcs_runtime_notify_ack",
		// Duplicate value: 1: "usrcfgV2_notify",
		// Duplicate value: 2: "usrcfgV2_notify_ack",
		// Duplicate value: 3: "usrcfgV2_query",
		// Duplicate value: 4: "usrcfgV2_query_ack",
		// Duplicate value: 1: "http_detect_vmcore",
		// Duplicate value: 2: "http_detect_taint",
		// Duplicate value: 1: "fim_create_baseline",
		// Duplicate value: 2: "fim_baseline_ack",
		// Duplicate value: 3: "fim_baseline_stop",
		// Duplicate value: 4: "fim_baseline_stop_response",
		// Duplicate value: 5: "fim_baseline_response",
		// Duplicate value: 6: "fim_integrity_check",
		// Duplicate value: 7: "fim_check_ack",
		// Duplicate value: 8: "fim_report_result",
		// Duplicate value: 9: "fim_check_stop",
		// Duplicate value: 16: "fim_check_stop_response",
		// Duplicate value: 0: "tcs_malware_scan_container",
		// Duplicate value: 1: "tcs_malware_scan_container_ack",
		// Duplicate value: 2: "tcs_malware_scan_container_cancel",
		// Duplicate value: 3: "tcs_malware_report_container_hash",
		// Duplicate value: 4: "tcs_malware_report_container_hash_ack",
		// Duplicate value: 5: "tcs_malware_report_container_file",
		// Duplicate value: 6: "tcs_malware_report_container_file_ack",
	}
	MsgCmdSubcmd_value = map[string]int32{
		"dns_report":                             256,
		"file_check_query":                       256,
		"init_login_rsp":                         1,
		"init_sync_login_info":                   2,
		"sub_cmd_bruteforce":                     512,
		"push_msg":                               768,
		"push_resp":                              769,
		"push_ack":                               770,
		"all_user_account":                       1,
		"modified_user_account":                  2,
		"user_def_config_req":                    0,
		"user_def_config_rsp":                    1,
		"report_all_open_port_info":              0,
		"sub_cmd_ymon_reg":                       256,
		"sub_cmd_file_modify":                    257,
		"webshell_md5_query_report":              256,
		"webshell_file_content_get":              257,
		"webshell_file_content_report":           258,
		"webshell_quara_succ":                    264,
		"webshell_quara_fail":                    265,
		"webshell_quara_restore_succ":            272,
		"webshell_quara_restore_failed":          273,
		"webshell_quara_notfound":                274,
		"file_check":                             1,
		"tamper_protect_config_request":          1,
		"tamper_protect_config_response":         2,
		"tamper_protect_start_request":           3,
		"tamper_protect_start_response":          4,
		"tamper_protect_backup_files_request":    5,
		"tamper_protect_backup_files_response":   6,
		"tamper_protect_up_file_request":         7,
		"tamper_protect_up_file_response":        8,
		"tamper_protect_report_files_request":    9,
		"tamper_protect_report_files_response":   16,
		"tamper_protect_down_file_request":       17,
		"tamper_protect_down_file_response":      18,
		"tamper_protect_recover_result_request":  19,
		"tamper_protect_recover_result_response": 20,
		"tamper_protect_stop_request":            21,
		"tamper_protect_stop_response":           22,
		"vulner_detect_request":                  1,
		"vulner_detect_response":                 2,
		"vulner_detect_message":                  3,
		"vulner_detect_stop_request":             4,
		"vulner_detect_stop_response":            5,
		"baseline_detect_request":                1,
		"baseline_detect_response":               2,
		"baseline_detect_message":                3,
		"malware_scan_request":                   1,
		"malware_scan_ack":                       2,
		"malware_scan_response":                  3,
		"malware_scan_stop_request":              4,
		"malware_scan_stop_response":             5,
		"malware_monitor_push_request":           6,
		"malware_monitor_push_response":          7,
		"malware_monitor_pull_request":           8,
		"malware_monitor_pull_response":          9,
		"tcs_malware_scan_image":                 1,
		"tcs_malware_scan_image_ack":             2,
		"tcs_malware_report_hash":                3,
		"tcs_malware_report_hash_ack":            4,
		"tcs_malware_report_file":                5,
		"tcs_malware_report_file_ack":            6,
		"tcs_malware_scan_image_cancel":          7,
		"tcs_runtime_query_policy":               1,
		"tcs_runtime_query_ack":                  2,
		"tcs_runtime_notify":                     3,
		"tcs_runtime_notify_ack":                 4,
		"usrcfgV2_notify":                        1,
		"usrcfgV2_notify_ack":                    2,
		"usrcfgV2_query":                         3,
		"usrcfgV2_query_ack":                     4,
		"http_detect_vmcore":                     1,
		"http_detect_taint":                      2,
		"fim_create_baseline":                    1,
		"fim_baseline_ack":                       2,
		"fim_baseline_stop":                      3,
		"fim_baseline_stop_response":             4,
		"fim_baseline_response":                  5,
		"fim_integrity_check":                    6,
		"fim_check_ack":                          7,
		"fim_report_result":                      8,
		"fim_check_stop":                         9,
		"fim_check_stop_response":                16,
		"tcs_malware_scan_container":             0,
		"tcs_malware_scan_container_ack":         1,
		"tcs_malware_scan_container_cancel":      2,
		"tcs_malware_report_container_hash":      3,
		"tcs_malware_report_container_hash_ack":  4,
		"tcs_malware_report_container_file":      5,
		"tcs_malware_report_container_file_ack":  6,
	}
)

func (x MsgCmdSubcmd) Enum() *MsgCmdSubcmd {
	p := new(MsgCmdSubcmd)
	*p = x
	return p
}

func (x MsgCmdSubcmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgCmdSubcmd) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[23].Descriptor()
}

func (MsgCmdSubcmd) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[23]
}

func (x MsgCmdSubcmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgCmdSubcmd) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgCmdSubcmd(num)
	return nil
}

// Deprecated: Use MsgCmdSubcmd.Descriptor instead.
func (MsgCmdSubcmd) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0, 3}
}

//  optional int64 int64_pid = 19;              //运行进程pid  (废弃，改用进程树)
//  optional bytes exe = 20;                    //相关进程  (废弃，改用进程树)
//  optional bytes cmdline = 21;                //命令行参数  (废弃，改用进程树)
type WebShell_DetectBy int32

const (
	WebShell_FileMon        WebShell_DetectBy = 0 // 文件实时监控检出
	WebShell_FileScan       WebShell_DetectBy = 1 // 文件扫描检出
	WebShell_ProcScanExe    WebShell_DetectBy = 2 // 进程扫描EXE检出
	WebShell_ProcScanDll    WebShell_DetectBy = 3 // 进程扫描DLL检测
	WebShell_ProcScanScript WebShell_DetectBy = 4 // 进程扫描脚本参数检出
	WebShell_DriverScan     WebShell_DetectBy = 5 // 驱动扫描检出
	WebShell_DriverMon      WebShell_DetectBy = 6 // 驱动加载监控检出
	WebShell_ProcMonExe     WebShell_DetectBy = 7 // 进程启动监控exe检出
	WebShell_ProcMonDll     WebShell_DetectBy = 8 // 进程启动监控dll检出
	WebShell_ProcMonScript  WebShell_DetectBy = 9 // 进程启动脚本参数检出
)

// Enum value maps for WebShell_DetectBy.
var (
	WebShell_DetectBy_name = map[int32]string{
		0: "FileMon",
		1: "FileScan",
		2: "ProcScanExe",
		3: "ProcScanDll",
		4: "ProcScanScript",
		5: "DriverScan",
		6: "DriverMon",
		7: "ProcMonExe",
		8: "ProcMonDll",
		9: "ProcMonScript",
	}
	WebShell_DetectBy_value = map[string]int32{
		"FileMon":        0,
		"FileScan":       1,
		"ProcScanExe":    2,
		"ProcScanDll":    3,
		"ProcScanScript": 4,
		"DriverScan":     5,
		"DriverMon":      6,
		"ProcMonExe":     7,
		"ProcMonDll":     8,
		"ProcMonScript":  9,
	}
)

func (x WebShell_DetectBy) Enum() *WebShell_DetectBy {
	p := new(WebShell_DetectBy)
	*p = x
	return p
}

func (x WebShell_DetectBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebShell_DetectBy) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[24].Descriptor()
}

func (WebShell_DetectBy) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[24]
}

func (x WebShell_DetectBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebShell_DetectBy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebShell_DetectBy(num)
	return nil
}

// Deprecated: Use WebShell_DetectBy.Descriptor instead.
func (WebShell_DetectBy) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{7, 0}
}

type BruteForce_BruteForceType int32

const (
	BruteForce_EVT_LOGINOK      BruteForce_BruteForceType = 100 //登录成功,登录流水使用
	BruteForce_EVT_HACKING      BruteForce_BruteForceType = 200 //暴力破解失败
	BruteForce_EVT_HACKOK       BruteForce_BruteForceType = 300 //暴力破解成功, 登录成功前一分钟内如果有登录失败记录则认为是暴破成功
	BruteForce_EVT_INVALIDLOGIN BruteForce_BruteForceType = 400 //暴力破解无效账号
)

// Enum value maps for BruteForce_BruteForceType.
var (
	BruteForce_BruteForceType_name = map[int32]string{
		100: "EVT_LOGINOK",
		200: "EVT_HACKING",
		300: "EVT_HACKOK",
		400: "EVT_INVALIDLOGIN",
	}
	BruteForce_BruteForceType_value = map[string]int32{
		"EVT_LOGINOK":      100,
		"EVT_HACKING":      200,
		"EVT_HACKOK":       300,
		"EVT_INVALIDLOGIN": 400,
	}
)

func (x BruteForce_BruteForceType) Enum() *BruteForce_BruteForceType {
	p := new(BruteForce_BruteForceType)
	*p = x
	return p
}

func (x BruteForce_BruteForceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BruteForce_BruteForceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[25].Descriptor()
}

func (BruteForce_BruteForceType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[25]
}

func (x BruteForce_BruteForceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BruteForce_BruteForceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BruteForce_BruteForceType(num)
	return nil
}

// Deprecated: Use BruteForce_BruteForceType.Descriptor instead.
func (BruteForce_BruteForceType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{9, 0}
}

type BruteForce_LoginType int32

const (
	BruteForce_INVALID_SSH_USER BruteForce_LoginType = 0 // invalid user
	BruteForce_SSH_FAILED_PWD   BruteForce_LoginType = 1 // Failed password for
	BruteForce_SSH_LOGIN_PWD    BruteForce_LoginType = 2 // Accepted password for
	BruteForce_PUBLIC_KEY_LOGIN BruteForce_LoginType = 3 // Accepted publickey for
	BruteForce_UNIX_SSH_LOGIN   BruteForce_LoginType = 4 // pam_unix.*sshd:auth.*authentication failure
	BruteForce_UNIX_SSH_FAIL    BruteForce_LoginType = 5 // pam_unix.*sshd:auth.*authentication failure.*tty
	BruteForce_INTER_SSH_LOGIN  BruteForce_LoginType = 6 // Accepted keyboard-interactive/pam for
	BruteForce_INTER_SSH_FAIL   BruteForce_LoginType = 7 // Failed keyboard-interactive/pam
	BruteForce_MNET_SSH_FAIL    BruteForce_LoginType = 8 // error: PAM: Authentication failure for
)

// Enum value maps for BruteForce_LoginType.
var (
	BruteForce_LoginType_name = map[int32]string{
		0: "INVALID_SSH_USER",
		1: "SSH_FAILED_PWD",
		2: "SSH_LOGIN_PWD",
		3: "PUBLIC_KEY_LOGIN",
		4: "UNIX_SSH_LOGIN",
		5: "UNIX_SSH_FAIL",
		6: "INTER_SSH_LOGIN",
		7: "INTER_SSH_FAIL",
		8: "MNET_SSH_FAIL",
	}
	BruteForce_LoginType_value = map[string]int32{
		"INVALID_SSH_USER": 0,
		"SSH_FAILED_PWD":   1,
		"SSH_LOGIN_PWD":    2,
		"PUBLIC_KEY_LOGIN": 3,
		"UNIX_SSH_LOGIN":   4,
		"UNIX_SSH_FAIL":    5,
		"INTER_SSH_LOGIN":  6,
		"INTER_SSH_FAIL":   7,
		"MNET_SSH_FAIL":    8,
	}
)

func (x BruteForce_LoginType) Enum() *BruteForce_LoginType {
	p := new(BruteForce_LoginType)
	*p = x
	return p
}

func (x BruteForce_LoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BruteForce_LoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[26].Descriptor()
}

func (BruteForce_LoginType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[26]
}

func (x BruteForce_LoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BruteForce_LoginType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BruteForce_LoginType(num)
	return nil
}

// Deprecated: Use BruteForce_LoginType.Descriptor instead.
func (BruteForce_LoginType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{9, 1}
}

type UserAccountInfo_AccountPrivilege int32

const (
	UserAccountInfo_SUPER_USER  UserAccountInfo_AccountPrivilege = 0
	UserAccountInfo_NORMAL_USER UserAccountInfo_AccountPrivilege = 1
)

// Enum value maps for UserAccountInfo_AccountPrivilege.
var (
	UserAccountInfo_AccountPrivilege_name = map[int32]string{
		0: "SUPER_USER",
		1: "NORMAL_USER",
	}
	UserAccountInfo_AccountPrivilege_value = map[string]int32{
		"SUPER_USER":  0,
		"NORMAL_USER": 1,
	}
)

func (x UserAccountInfo_AccountPrivilege) Enum() *UserAccountInfo_AccountPrivilege {
	p := new(UserAccountInfo_AccountPrivilege)
	*p = x
	return p
}

func (x UserAccountInfo_AccountPrivilege) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserAccountInfo_AccountPrivilege) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[27].Descriptor()
}

func (UserAccountInfo_AccountPrivilege) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[27]
}

func (x UserAccountInfo_AccountPrivilege) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserAccountInfo_AccountPrivilege) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserAccountInfo_AccountPrivilege(num)
	return nil
}

// Deprecated: Use UserAccountInfo_AccountPrivilege.Descriptor instead.
func (UserAccountInfo_AccountPrivilege) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{20, 0}
}

type UserAccountInfo_ModifiedType int32

const (
	UserAccountInfo_NOT_SET                 UserAccountInfo_ModifiedType = 0
	UserAccountInfo_NEW_CREATED             UserAccountInfo_ModifiedType = 1 //上报新创建的账户
	UserAccountInfo_MODIFIED                UserAccountInfo_ModifiedType = 2 //上报信息变化的账户
	UserAccountInfo_DELETED                 UserAccountInfo_ModifiedType = 3 //上报删除的账户
	UserAccountInfo_LAST_LOGIN_TIME_CHANGED UserAccountInfo_ModifiedType = 4 //最后登录时间变化时上报
)

// Enum value maps for UserAccountInfo_ModifiedType.
var (
	UserAccountInfo_ModifiedType_name = map[int32]string{
		0: "NOT_SET",
		1: "NEW_CREATED",
		2: "MODIFIED",
		3: "DELETED",
		4: "LAST_LOGIN_TIME_CHANGED",
	}
	UserAccountInfo_ModifiedType_value = map[string]int32{
		"NOT_SET":                 0,
		"NEW_CREATED":             1,
		"MODIFIED":                2,
		"DELETED":                 3,
		"LAST_LOGIN_TIME_CHANGED": 4,
	}
)

func (x UserAccountInfo_ModifiedType) Enum() *UserAccountInfo_ModifiedType {
	p := new(UserAccountInfo_ModifiedType)
	*p = x
	return p
}

func (x UserAccountInfo_ModifiedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserAccountInfo_ModifiedType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[28].Descriptor()
}

func (UserAccountInfo_ModifiedType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[28]
}

func (x UserAccountInfo_ModifiedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserAccountInfo_ModifiedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserAccountInfo_ModifiedType(num)
	return nil
}

// Deprecated: Use UserAccountInfo_ModifiedType.Descriptor instead.
func (UserAccountInfo_ModifiedType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{20, 1}
}

type AgentDumpDefine_DumpReason int32

const (
	AgentDumpDefine_CRASH_DUMP AgentDumpDefine_DumpReason = 1
	AgentDumpDefine_CPU_DUMP   AgentDumpDefine_DumpReason = 2
	AgentDumpDefine_MEM_DUMP   AgentDumpDefine_DumpReason = 3
)

// Enum value maps for AgentDumpDefine_DumpReason.
var (
	AgentDumpDefine_DumpReason_name = map[int32]string{
		1: "CRASH_DUMP",
		2: "CPU_DUMP",
		3: "MEM_DUMP",
	}
	AgentDumpDefine_DumpReason_value = map[string]int32{
		"CRASH_DUMP": 1,
		"CPU_DUMP":   2,
		"MEM_DUMP":   3,
	}
)

func (x AgentDumpDefine_DumpReason) Enum() *AgentDumpDefine_DumpReason {
	p := new(AgentDumpDefine_DumpReason)
	*p = x
	return p
}

func (x AgentDumpDefine_DumpReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentDumpDefine_DumpReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[29].Descriptor()
}

func (AgentDumpDefine_DumpReason) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[29]
}

func (x AgentDumpDefine_DumpReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentDumpDefine_DumpReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentDumpDefine_DumpReason(num)
	return nil
}

// Deprecated: Use AgentDumpDefine_DumpReason.Descriptor instead.
func (AgentDumpDefine_DumpReason) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{21, 0}
}

type AgentDumpDefine_Platform int32

const (
	AgentDumpDefine_PLATFORM_WIN   AgentDumpDefine_Platform = 1
	AgentDumpDefine_PLATFORM_LINUX AgentDumpDefine_Platform = 2
)

// Enum value maps for AgentDumpDefine_Platform.
var (
	AgentDumpDefine_Platform_name = map[int32]string{
		1: "PLATFORM_WIN",
		2: "PLATFORM_LINUX",
	}
	AgentDumpDefine_Platform_value = map[string]int32{
		"PLATFORM_WIN":   1,
		"PLATFORM_LINUX": 2,
	}
)

func (x AgentDumpDefine_Platform) Enum() *AgentDumpDefine_Platform {
	p := new(AgentDumpDefine_Platform)
	*p = x
	return p
}

func (x AgentDumpDefine_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentDumpDefine_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[30].Descriptor()
}

func (AgentDumpDefine_Platform) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[30]
}

func (x AgentDumpDefine_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentDumpDefine_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentDumpDefine_Platform(num)
	return nil
}

// Deprecated: Use AgentDumpDefine_Platform.Descriptor instead.
func (AgentDumpDefine_Platform) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{21, 1}
}

type OpenPortMsg_ReportType int32

const (
	OpenPortMsg_REPORT_ALL OpenPortMsg_ReportType = 0 //全量上报
)

// Enum value maps for OpenPortMsg_ReportType.
var (
	OpenPortMsg_ReportType_name = map[int32]string{
		0: "REPORT_ALL",
	}
	OpenPortMsg_ReportType_value = map[string]int32{
		"REPORT_ALL": 0,
	}
)

func (x OpenPortMsg_ReportType) Enum() *OpenPortMsg_ReportType {
	p := new(OpenPortMsg_ReportType)
	*p = x
	return p
}

func (x OpenPortMsg_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenPortMsg_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[31].Descriptor()
}

func (OpenPortMsg_ReportType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[31]
}

func (x OpenPortMsg_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenPortMsg_ReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenPortMsg_ReportType(num)
	return nil
}

// Deprecated: Use OpenPortMsg_ReportType.Descriptor instead.
func (OpenPortMsg_ReportType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{22, 0}
}

type ProcessInfoMsg_ReportType int32

const (
	ProcessInfoMsg_REPORT_ALL      ProcessInfoMsg_ReportType = 0 //全量上报
	ProcessInfoMsg_REPORT_MODIFIED ProcessInfoMsg_ReportType = 1
)

// Enum value maps for ProcessInfoMsg_ReportType.
var (
	ProcessInfoMsg_ReportType_name = map[int32]string{
		0: "REPORT_ALL",
		1: "REPORT_MODIFIED",
	}
	ProcessInfoMsg_ReportType_value = map[string]int32{
		"REPORT_ALL":      0,
		"REPORT_MODIFIED": 1,
	}
)

func (x ProcessInfoMsg_ReportType) Enum() *ProcessInfoMsg_ReportType {
	p := new(ProcessInfoMsg_ReportType)
	*p = x
	return p
}

func (x ProcessInfoMsg_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessInfoMsg_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[32].Descriptor()
}

func (ProcessInfoMsg_ReportType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[32]
}

func (x ProcessInfoMsg_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcessInfoMsg_ReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcessInfoMsg_ReportType(num)
	return nil
}

// Deprecated: Use ProcessInfoMsg_ReportType.Descriptor instead.
func (ProcessInfoMsg_ReportType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{23, 0}
}

type ProcessInfoMsg_ModifiedType int32

const (
	ProcessInfoMsg_NOT_SET         ProcessInfoMsg_ModifiedType = 0
	ProcessInfoMsg_NEW_PROCESS     ProcessInfoMsg_ModifiedType = 1
	ProcessInfoMsg_DELETED_PROCESS ProcessInfoMsg_ModifiedType = 2
)

// Enum value maps for ProcessInfoMsg_ModifiedType.
var (
	ProcessInfoMsg_ModifiedType_name = map[int32]string{
		0: "NOT_SET",
		1: "NEW_PROCESS",
		2: "DELETED_PROCESS",
	}
	ProcessInfoMsg_ModifiedType_value = map[string]int32{
		"NOT_SET":         0,
		"NEW_PROCESS":     1,
		"DELETED_PROCESS": 2,
	}
)

func (x ProcessInfoMsg_ModifiedType) Enum() *ProcessInfoMsg_ModifiedType {
	p := new(ProcessInfoMsg_ModifiedType)
	*p = x
	return p
}

func (x ProcessInfoMsg_ModifiedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessInfoMsg_ModifiedType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[33].Descriptor()
}

func (ProcessInfoMsg_ModifiedType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[33]
}

func (x ProcessInfoMsg_ModifiedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcessInfoMsg_ModifiedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcessInfoMsg_ModifiedType(num)
	return nil
}

// Deprecated: Use ProcessInfoMsg_ModifiedType.Descriptor instead.
func (ProcessInfoMsg_ModifiedType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{23, 1}
}

type AgentMonitorReport_MonitorId int32

const (
	AgentMonitorReport_CPU         AgentMonitorReport_MonitorId = 1
	AgentMonitorReport_Memory      AgentMonitorReport_MonitorId = 2
	AgentMonitorReport_SelfProcNum AgentMonitorReport_MonitorId = 3
	AgentMonitorReport_YDSpaceUsed AgentMonitorReport_MonitorId = 4
)

// Enum value maps for AgentMonitorReport_MonitorId.
var (
	AgentMonitorReport_MonitorId_name = map[int32]string{
		1: "CPU",
		2: "Memory",
		3: "SelfProcNum",
		4: "YDSpaceUsed",
	}
	AgentMonitorReport_MonitorId_value = map[string]int32{
		"CPU":         1,
		"Memory":      2,
		"SelfProcNum": 3,
		"YDSpaceUsed": 4,
	}
)

func (x AgentMonitorReport_MonitorId) Enum() *AgentMonitorReport_MonitorId {
	p := new(AgentMonitorReport_MonitorId)
	*p = x
	return p
}

func (x AgentMonitorReport_MonitorId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentMonitorReport_MonitorId) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[34].Descriptor()
}

func (AgentMonitorReport_MonitorId) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[34]
}

func (x AgentMonitorReport_MonitorId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentMonitorReport_MonitorId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentMonitorReport_MonitorId(num)
	return nil
}

// Deprecated: Use AgentMonitorReport_MonitorId.Descriptor instead.
func (AgentMonitorReport_MonitorId) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{25, 0}
}

type AgentMonitorReport_MonitorProcess int32

const (
	AgentMonitorReport_YDLive    AgentMonitorReport_MonitorProcess = 1
	AgentMonitorReport_YDService AgentMonitorReport_MonitorProcess = 2
)

// Enum value maps for AgentMonitorReport_MonitorProcess.
var (
	AgentMonitorReport_MonitorProcess_name = map[int32]string{
		1: "YDLive",
		2: "YDService",
	}
	AgentMonitorReport_MonitorProcess_value = map[string]int32{
		"YDLive":    1,
		"YDService": 2,
	}
)

func (x AgentMonitorReport_MonitorProcess) Enum() *AgentMonitorReport_MonitorProcess {
	p := new(AgentMonitorReport_MonitorProcess)
	*p = x
	return p
}

func (x AgentMonitorReport_MonitorProcess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentMonitorReport_MonitorProcess) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[35].Descriptor()
}

func (AgentMonitorReport_MonitorProcess) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[35]
}

func (x AgentMonitorReport_MonitorProcess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentMonitorReport_MonitorProcess) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentMonitorReport_MonitorProcess(num)
	return nil
}

// Deprecated: Use AgentMonitorReport_MonitorProcess.Descriptor instead.
func (AgentMonitorReport_MonitorProcess) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{25, 1}
}

type AgentCrashReport_CrashType int32

const (
	AgentCrashReport_CPU_High    AgentCrashReport_CrashType = 1
	AgentCrashReport_Memory_High AgentCrashReport_CrashType = 2
	AgentCrashReport_Mem_Crash   AgentCrashReport_CrashType = 3
)

// Enum value maps for AgentCrashReport_CrashType.
var (
	AgentCrashReport_CrashType_name = map[int32]string{
		1: "CPU_High",
		2: "Memory_High",
		3: "Mem_Crash",
	}
	AgentCrashReport_CrashType_value = map[string]int32{
		"CPU_High":    1,
		"Memory_High": 2,
		"Mem_Crash":   3,
	}
)

func (x AgentCrashReport_CrashType) Enum() *AgentCrashReport_CrashType {
	p := new(AgentCrashReport_CrashType)
	*p = x
	return p
}

func (x AgentCrashReport_CrashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCrashReport_CrashType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[36].Descriptor()
}

func (AgentCrashReport_CrashType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[36]
}

func (x AgentCrashReport_CrashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentCrashReport_CrashType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentCrashReport_CrashType(num)
	return nil
}

// Deprecated: Use AgentCrashReport_CrashType.Descriptor instead.
func (AgentCrashReport_CrashType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{35, 0}
}

type AgentCrashReport_CrashProcess int32

const (
	AgentCrashReport_YDLive    AgentCrashReport_CrashProcess = 1
	AgentCrashReport_YDService AgentCrashReport_CrashProcess = 2
)

// Enum value maps for AgentCrashReport_CrashProcess.
var (
	AgentCrashReport_CrashProcess_name = map[int32]string{
		1: "YDLive",
		2: "YDService",
	}
	AgentCrashReport_CrashProcess_value = map[string]int32{
		"YDLive":    1,
		"YDService": 2,
	}
)

func (x AgentCrashReport_CrashProcess) Enum() *AgentCrashReport_CrashProcess {
	p := new(AgentCrashReport_CrashProcess)
	*p = x
	return p
}

func (x AgentCrashReport_CrashProcess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCrashReport_CrashProcess) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[37].Descriptor()
}

func (AgentCrashReport_CrashProcess) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[37]
}

func (x AgentCrashReport_CrashProcess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentCrashReport_CrashProcess) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentCrashReport_CrashProcess(num)
	return nil
}

// Deprecated: Use AgentCrashReport_CrashProcess.Descriptor instead.
func (AgentCrashReport_CrashProcess) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{35, 1}
}

type WebServerInfo_ServerType int32

const (
	WebServerInfo_undef  WebServerInfo_ServerType = 0
	WebServerInfo_nginx  WebServerInfo_ServerType = 1
	WebServerInfo_apache WebServerInfo_ServerType = 2
	WebServerInfo_tomcat WebServerInfo_ServerType = 3
)

// Enum value maps for WebServerInfo_ServerType.
var (
	WebServerInfo_ServerType_name = map[int32]string{
		0: "undef",
		1: "nginx",
		2: "apache",
		3: "tomcat",
	}
	WebServerInfo_ServerType_value = map[string]int32{
		"undef":  0,
		"nginx":  1,
		"apache": 2,
		"tomcat": 3,
	}
)

func (x WebServerInfo_ServerType) Enum() *WebServerInfo_ServerType {
	p := new(WebServerInfo_ServerType)
	*p = x
	return p
}

func (x WebServerInfo_ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebServerInfo_ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[38].Descriptor()
}

func (WebServerInfo_ServerType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[38]
}

func (x WebServerInfo_ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebServerInfo_ServerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebServerInfo_ServerType(num)
	return nil
}

// Deprecated: Use WebServerInfo_ServerType.Descriptor instead.
func (WebServerInfo_ServerType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{39, 0}
}

// 文件上报类型
type TamperProtectReportFilesRequest_TamperProtectFileReportType int32

const (
	TamperProtectReportFilesRequest_TP_REPORT_TYPE_FULL    TamperProtectReportFilesRequest_TamperProtectFileReportType = 0 //全量上报
	TamperProtectReportFilesRequest_TP_REPORT_TYPE_MONITOR TamperProtectReportFilesRequest_TamperProtectFileReportType = 1 //实时监控，仅上报变更的
)

// Enum value maps for TamperProtectReportFilesRequest_TamperProtectFileReportType.
var (
	TamperProtectReportFilesRequest_TamperProtectFileReportType_name = map[int32]string{
		0: "TP_REPORT_TYPE_FULL",
		1: "TP_REPORT_TYPE_MONITOR",
	}
	TamperProtectReportFilesRequest_TamperProtectFileReportType_value = map[string]int32{
		"TP_REPORT_TYPE_FULL":    0,
		"TP_REPORT_TYPE_MONITOR": 1,
	}
)

func (x TamperProtectReportFilesRequest_TamperProtectFileReportType) Enum() *TamperProtectReportFilesRequest_TamperProtectFileReportType {
	p := new(TamperProtectReportFilesRequest_TamperProtectFileReportType)
	*p = x
	return p
}

func (x TamperProtectReportFilesRequest_TamperProtectFileReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectReportFilesRequest_TamperProtectFileReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[39].Descriptor()
}

func (TamperProtectReportFilesRequest_TamperProtectFileReportType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[39]
}

func (x TamperProtectReportFilesRequest_TamperProtectFileReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectReportFilesRequest_TamperProtectFileReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectReportFilesRequest_TamperProtectFileReportType(num)
	return nil
}

// Deprecated: Use TamperProtectReportFilesRequest_TamperProtectFileReportType.Descriptor instead.
func (TamperProtectReportFilesRequest_TamperProtectFileReportType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{50, 0}
}

// 文件被修改类型
type TamperProtectReportFilesRequest_TamperProtectFileChangeType int32

const (
	TamperProtectReportFilesRequest_TP_CHANGE_MODIFY TamperProtectReportFilesRequest_TamperProtectFileChangeType = 0 //被修改（内容/权限/归属）
	TamperProtectReportFilesRequest_TP_CHANGE_DELETE TamperProtectReportFilesRequest_TamperProtectFileChangeType = 1 //被删除
	TamperProtectReportFilesRequest_TP_CHANGE_NEW    TamperProtectReportFilesRequest_TamperProtectFileChangeType = 2 //新增文件
)

// Enum value maps for TamperProtectReportFilesRequest_TamperProtectFileChangeType.
var (
	TamperProtectReportFilesRequest_TamperProtectFileChangeType_name = map[int32]string{
		0: "TP_CHANGE_MODIFY",
		1: "TP_CHANGE_DELETE",
		2: "TP_CHANGE_NEW",
	}
	TamperProtectReportFilesRequest_TamperProtectFileChangeType_value = map[string]int32{
		"TP_CHANGE_MODIFY": 0,
		"TP_CHANGE_DELETE": 1,
		"TP_CHANGE_NEW":    2,
	}
)

func (x TamperProtectReportFilesRequest_TamperProtectFileChangeType) Enum() *TamperProtectReportFilesRequest_TamperProtectFileChangeType {
	p := new(TamperProtectReportFilesRequest_TamperProtectFileChangeType)
	*p = x
	return p
}

func (x TamperProtectReportFilesRequest_TamperProtectFileChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamperProtectReportFilesRequest_TamperProtectFileChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[40].Descriptor()
}

func (TamperProtectReportFilesRequest_TamperProtectFileChangeType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[40]
}

func (x TamperProtectReportFilesRequest_TamperProtectFileChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TamperProtectReportFilesRequest_TamperProtectFileChangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TamperProtectReportFilesRequest_TamperProtectFileChangeType(num)
	return nil
}

// Deprecated: Use TamperProtectReportFilesRequest_TamperProtectFileChangeType.Descriptor instead.
func (TamperProtectReportFilesRequest_TamperProtectFileChangeType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{50, 1}
}

type FastMsg_MsgType int32

const (
	FastMsg_NOT_SET FastMsg_MsgType = 0
	FastMsg_JSON    FastMsg_MsgType = 1
	FastMsg_TEXT    FastMsg_MsgType = 2
	FastMsg_GZIP    FastMsg_MsgType = 3
)

// Enum value maps for FastMsg_MsgType.
var (
	FastMsg_MsgType_name = map[int32]string{
		0: "NOT_SET",
		1: "JSON",
		2: "TEXT",
		3: "GZIP",
	}
	FastMsg_MsgType_value = map[string]int32{
		"NOT_SET": 0,
		"JSON":    1,
		"TEXT":    2,
		"GZIP":    3,
	}
)

func (x FastMsg_MsgType) Enum() *FastMsg_MsgType {
	p := new(FastMsg_MsgType)
	*p = x
	return p
}

func (x FastMsg_MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastMsg_MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[41].Descriptor()
}

func (FastMsg_MsgType) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[41]
}

func (x FastMsg_MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FastMsg_MsgType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FastMsg_MsgType(num)
	return nil
}

// Deprecated: Use FastMsg_MsgType.Descriptor instead.
func (FastMsg_MsgType) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{58, 0}
}

type TcsScanImageAck_TcsStatus int32

const (
	TcsScanImageAck_NotFound        TcsScanImageAck_TcsStatus = 1 // 不存在
	TcsScanImageAck_Scanning        TcsScanImageAck_TcsStatus = 2 // 扫描中
	TcsScanImageAck_Finish          TcsScanImageAck_TcsStatus = 3 // 扫描完成
	TcsScanImageAck_Timeout         TcsScanImageAck_TcsStatus = 4 // 任务超时
	TcsScanImageAck_TooManyScanTask TcsScanImageAck_TcsStatus = 5 // 任务过多
	TcsScanImageAck_Failed          TcsScanImageAck_TcsStatus = 6 // 扫描失败
	TcsScanImageAck_Canceled        TcsScanImageAck_TcsStatus = 7 // 取消
)

// Enum value maps for TcsScanImageAck_TcsStatus.
var (
	TcsScanImageAck_TcsStatus_name = map[int32]string{
		1: "NotFound",
		2: "Scanning",
		3: "Finish",
		4: "Timeout",
		5: "TooManyScanTask",
		6: "Failed",
		7: "Canceled",
	}
	TcsScanImageAck_TcsStatus_value = map[string]int32{
		"NotFound":        1,
		"Scanning":        2,
		"Finish":          3,
		"Timeout":         4,
		"TooManyScanTask": 5,
		"Failed":          6,
		"Canceled":        7,
	}
)

func (x TcsScanImageAck_TcsStatus) Enum() *TcsScanImageAck_TcsStatus {
	p := new(TcsScanImageAck_TcsStatus)
	*p = x
	return p
}

func (x TcsScanImageAck_TcsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcsScanImageAck_TcsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[42].Descriptor()
}

func (TcsScanImageAck_TcsStatus) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[42]
}

func (x TcsScanImageAck_TcsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TcsScanImageAck_TcsStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TcsScanImageAck_TcsStatus(num)
	return nil
}

// Deprecated: Use TcsScanImageAck_TcsStatus.Descriptor instead.
func (TcsScanImageAck_TcsStatus) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{80, 0}
}

type TcsScanContainerAck_TcsStatus int32

const (
	TcsScanContainerAck_NotFound        TcsScanContainerAck_TcsStatus = 1  // 不存在
	TcsScanContainerAck_Scanning        TcsScanContainerAck_TcsStatus = 2  // 扫描中
	TcsScanContainerAck_Finish          TcsScanContainerAck_TcsStatus = 3  // 扫描完成
	TcsScanContainerAck_Timeout         TcsScanContainerAck_TcsStatus = 4  // 任务超时
	TcsScanContainerAck_TooManyScanTask TcsScanContainerAck_TcsStatus = 5  // 任务过多
	TcsScanContainerAck_Failed          TcsScanContainerAck_TcsStatus = 6  // 扫描失败
	TcsScanContainerAck_Canceled        TcsScanContainerAck_TcsStatus = 7  // 取消
	TcsScanContainerAck_WaitACKTimeout  TcsScanContainerAck_TcsStatus = 8  // 等待ack超时
	TcsScanContainerAck_Ready           TcsScanContainerAck_TcsStatus = 9  // 排队等待扫描
	TcsScanContainerAck_CancelFailed    TcsScanContainerAck_TcsStatus = 10 // 取消过程中未发现指定task或containerid
)

// Enum value maps for TcsScanContainerAck_TcsStatus.
var (
	TcsScanContainerAck_TcsStatus_name = map[int32]string{
		1:  "NotFound",
		2:  "Scanning",
		3:  "Finish",
		4:  "Timeout",
		5:  "TooManyScanTask",
		6:  "Failed",
		7:  "Canceled",
		8:  "WaitACKTimeout",
		9:  "Ready",
		10: "CancelFailed",
	}
	TcsScanContainerAck_TcsStatus_value = map[string]int32{
		"NotFound":        1,
		"Scanning":        2,
		"Finish":          3,
		"Timeout":         4,
		"TooManyScanTask": 5,
		"Failed":          6,
		"Canceled":        7,
		"WaitACKTimeout":  8,
		"Ready":           9,
		"CancelFailed":    10,
	}
)

func (x TcsScanContainerAck_TcsStatus) Enum() *TcsScanContainerAck_TcsStatus {
	p := new(TcsScanContainerAck_TcsStatus)
	*p = x
	return p
}

func (x TcsScanContainerAck_TcsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcsScanContainerAck_TcsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ydeyes_proto_enumTypes[43].Descriptor()
}

func (TcsScanContainerAck_TcsStatus) Type() protoreflect.EnumType {
	return &file_ydeyes_proto_enumTypes[43]
}

func (x TcsScanContainerAck_TcsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TcsScanContainerAck_TcsStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TcsScanContainerAck_TcsStatus(num)
	return nil
}

// Deprecated: Use TcsScanContainerAck_TcsStatus.Descriptor instead.
func (TcsScanContainerAck_TcsStatus) EnumDescriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{94, 0}
}

type MsgCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgCmd) Reset() {
	*x = MsgCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCmd) ProtoMessage() {}

func (x *MsgCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCmd.ProtoReflect.Descriptor instead.
func (*MsgCmd) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{0}
}

type YdMalwareAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Virusname []byte `protobuf:"bytes,1,opt,name=virusname" json:"virusname,omitempty"`
	Bwtype    *int32 `protobuf:"varint,2,opt,name=bwtype" json:"bwtype,omitempty"`
	Bintype   *int32 `protobuf:"varint,3,opt,name=bintype" json:"bintype,omitempty"`
}

func (x *YdMalwareAttr) Reset() {
	*x = YdMalwareAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YdMalwareAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YdMalwareAttr) ProtoMessage() {}

func (x *YdMalwareAttr) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YdMalwareAttr.ProtoReflect.Descriptor instead.
func (*YdMalwareAttr) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{1}
}

func (x *YdMalwareAttr) GetVirusname() []byte {
	if x != nil {
		return x.Virusname
	}
	return nil
}

func (x *YdMalwareAttr) GetBwtype() int32 {
	if x != nil && x.Bwtype != nil {
		return *x.Bwtype
	}
	return 0
}

func (x *YdMalwareAttr) GetBintype() int32 {
	if x != nil && x.Bintype != nil {
		return *x.Bintype
	}
	return 0
}

//--------------------------------------------------------------------------------------------
//后台使用
type AppendInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid              *uint64        `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"` //the user's appid
	Uuid               []byte         `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	RecvTime           *uint64        `protobuf:"varint,3,opt,name=recv_time,json=recvTime" json:"recv_time,omitempty"`                     //the timestamp that yd_proxy received this msg
	EventMalwareId     *int64         `protobuf:"varint,4,opt,name=event_malware_id,json=eventMalwareId" json:"event_malware_id,omitempty"` //if evt insert into events_malware table, update this field
	MalwareAttr        *YdMalwareAttr `protobuf:"bytes,5,opt,name=malware_attr,json=malwareAttr" json:"malware_attr,omitempty"`             //check result
	IsProVersion       *bool          `protobuf:"varint,6,opt,name=is_pro_version,json=isProVersion" json:"is_pro_version,omitempty"`       //专业版的机器，会设置该字段，并设置为true， 非专业版机器该字段不添加
	Quuid              []byte         `protobuf:"bytes,7,opt,name=quuid" json:"quuid,omitempty"`                                            //针对黑石的机器agent 获取的quuid 是不对的，需要在头部设置正确的quuid 供后续逻辑使用, 该字段只会针对黑石机器设置，其它机器不设置
	AgentFlowId        *uint64        `protobuf:"varint,8,opt,name=agent_flow_id,json=agentFlowId" json:"agent_flow_id,omitempty"`
	ProxyIp            []byte         `protobuf:"bytes,9,opt,name=proxy_ip,json=proxyIp" json:"proxy_ip,omitempty"`
	MalwareCheckResult []byte         `protobuf:"bytes,10,opt,name=malware_check_result,json=malwareCheckResult" json:"malware_check_result,omitempty"`
}

func (x *AppendInternal) Reset() {
	*x = AppendInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendInternal) ProtoMessage() {}

func (x *AppendInternal) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendInternal.ProtoReflect.Descriptor instead.
func (*AppendInternal) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{2}
}

func (x *AppendInternal) GetAppid() uint64 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *AppendInternal) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *AppendInternal) GetRecvTime() uint64 {
	if x != nil && x.RecvTime != nil {
		return *x.RecvTime
	}
	return 0
}

func (x *AppendInternal) GetEventMalwareId() int64 {
	if x != nil && x.EventMalwareId != nil {
		return *x.EventMalwareId
	}
	return 0
}

func (x *AppendInternal) GetMalwareAttr() *YdMalwareAttr {
	if x != nil {
		return x.MalwareAttr
	}
	return nil
}

func (x *AppendInternal) GetIsProVersion() bool {
	if x != nil && x.IsProVersion != nil {
		return *x.IsProVersion
	}
	return false
}

func (x *AppendInternal) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *AppendInternal) GetAgentFlowId() uint64 {
	if x != nil && x.AgentFlowId != nil {
		return *x.AgentFlowId
	}
	return 0
}

func (x *AppendInternal) GetProxyIp() []byte {
	if x != nil {
		return x.ProxyIp
	}
	return nil
}

func (x *AppendInternal) GetMalwareCheckResult() []byte {
	if x != nil {
		return x.MalwareCheckResult
	}
	return nil
}

type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32Command  *uint32         `protobuf:"varint,1,opt,name=uint32_command,json=uint32Command" json:"uint32_command,omitempty"`      //主命令号
	Uint32Subcmd   *uint32         `protobuf:"varint,2,opt,name=uint32_subcmd,json=uint32Subcmd" json:"uint32_subcmd,omitempty"`         //子命令号
	Uint32Seq      *uint32         `protobuf:"varint,3,opt,name=uint32_seq,json=uint32Seq" json:"uint32_seq,omitempty"`                  //序列�? 用于给请求方区分不同的请求回
	Uint32Appid    *uint32         `protobuf:"varint,4,opt,name=uint32_appid,json=uint32Appid" json:"uint32_appid,omitempty"`            //not used by server
	Uint32StoreTag *uint32         `protobuf:"varint,5,opt,name=uint32_store_tag,json=uint32StoreTag" json:"uint32_store_tag,omitempty"` //是否保存本地CDB: 1 - 入TDW; 2 - 入CDB; 3 - 入TDW&CDB
	Uint32Localip  *uint32         `protobuf:"varint,6,opt,name=uint32_localip,json=uint32Localip" json:"uint32_localip,omitempty"`      //本机局域网ip(bind socket�?ip)
	Uint32Version  *uint32         `protobuf:"varint,7,opt,name=uint32_version,json=uint32Version" json:"uint32_version,omitempty"`      //客户端版本号
	Uint32Result   *uint32         `protobuf:"varint,8,opt,name=uint32_result,json=uint32Result" json:"uint32_result,omitempty"`         //返回�? 0--处理正确,  1-1999--自定义返回码
	AppendInternal *AppendInternal `protobuf:"bytes,9,opt,name=appendInternal" json:"appendInternal,omitempty"`                          //for service internal use
	EncryptUuid    []byte          `protobuf:"bytes,10,opt,name=encrypt_uuid,json=encryptUuid" json:"encrypt_uuid,omitempty"`            //agent上报的加密uuid，proxy解密后写入 AppendInternal,server端从AppendInternal中读取解密后的uuid, 2018/01 之后的agent 版本支持该字段
	Uint32Crc      *uint32         `protobuf:"varint,11,opt,name=uint32_crc,json=uint32Crc" json:"uint32_crc,omitempty"`                 //body crc
	TraceId        []byte          `protobuf:"bytes,13,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Hostip         []byte          `protobuf:"bytes,14,opt,name=hostip" json:"hostip,omitempty"`
	BodyGzip       *bool           `protobuf:"varint,15,opt,name=body_gzip,json=bodyGzip" json:"body_gzip,omitempty"` // body是否使用gzip压缩
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{3}
}

func (x *Head) GetUint32Command() uint32 {
	if x != nil && x.Uint32Command != nil {
		return *x.Uint32Command
	}
	return 0
}

func (x *Head) GetUint32Subcmd() uint32 {
	if x != nil && x.Uint32Subcmd != nil {
		return *x.Uint32Subcmd
	}
	return 0
}

func (x *Head) GetUint32Seq() uint32 {
	if x != nil && x.Uint32Seq != nil {
		return *x.Uint32Seq
	}
	return 0
}

func (x *Head) GetUint32Appid() uint32 {
	if x != nil && x.Uint32Appid != nil {
		return *x.Uint32Appid
	}
	return 0
}

func (x *Head) GetUint32StoreTag() uint32 {
	if x != nil && x.Uint32StoreTag != nil {
		return *x.Uint32StoreTag
	}
	return 0
}

func (x *Head) GetUint32Localip() uint32 {
	if x != nil && x.Uint32Localip != nil {
		return *x.Uint32Localip
	}
	return 0
}

func (x *Head) GetUint32Version() uint32 {
	if x != nil && x.Uint32Version != nil {
		return *x.Uint32Version
	}
	return 0
}

func (x *Head) GetUint32Result() uint32 {
	if x != nil && x.Uint32Result != nil {
		return *x.Uint32Result
	}
	return 0
}

func (x *Head) GetAppendInternal() *AppendInternal {
	if x != nil {
		return x.AppendInternal
	}
	return nil
}

func (x *Head) GetEncryptUuid() []byte {
	if x != nil {
		return x.EncryptUuid
	}
	return nil
}

func (x *Head) GetUint32Crc() uint32 {
	if x != nil && x.Uint32Crc != nil {
		return *x.Uint32Crc
	}
	return 0
}

func (x *Head) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Head) GetHostip() []byte {
	if x != nil {
		return x.Hostip
	}
	return nil
}

func (x *Head) GetBodyGzip() bool {
	if x != nil && x.BodyGzip != nil {
		return *x.BodyGzip
	}
	return false
}

//--------------------------------------------------------------------------------------------
type IdValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32RptId   *uint32 `protobuf:"varint,1,opt,name=uint32_rpt_id,json=uint32RptId" json:"uint32_rpt_id,omitempty"`      // 对不同业务分配不同ID�?
	BytesCdbTable []byte  `protobuf:"bytes,2,opt,name=bytes_cdb_table,json=bytesCdbTable" json:"bytes_cdb_table,omitempty"` // 上报到CDB时候的表名�?
	BytesRptData  []byte  `protobuf:"bytes,3,opt,name=bytes_rpt_data,json=bytesRptData" json:"bytes_rpt_data,omitempty"`    // 上报数据，以","分隔的字符串形式�?
}

func (x *IdValue) Reset() {
	*x = IdValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdValue) ProtoMessage() {}

func (x *IdValue) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdValue.ProtoReflect.Descriptor instead.
func (*IdValue) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{4}
}

func (x *IdValue) GetUint32RptId() uint32 {
	if x != nil && x.Uint32RptId != nil {
		return *x.Uint32RptId
	}
	return 0
}

func (x *IdValue) GetBytesCdbTable() []byte {
	if x != nil {
		return x.BytesCdbTable
	}
	return nil
}

func (x *IdValue) GetBytesRptData() []byte {
	if x != nil {
		return x.BytesRptData
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//业务�?
type ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//自定义扩�?
	IdValueReportdata []*IdValue `protobuf:"bytes,1,rep,name=IdValue_reportdata,json=IdValueReportdata" json:"IdValue_reportdata,omitempty"` //上报数据
}

func (x *ReqBody) Reset() {
	*x = ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBody) ProtoMessage() {}

func (x *ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBody.ProtoReflect.Descriptor instead.
func (*ReqBody) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{5}
}

func (x *ReqBody) GetIdValueReportdata() []*IdValue {
	if x != nil {
		return x.IdValueReportdata
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//回包信息，需要时扩展
type RspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringErrmsg *string `protobuf:"bytes,1,opt,name=string_errmsg,json=stringErrmsg" json:"string_errmsg,omitempty"` // 错误消息提示
}

func (x *RspBody) Reset() {
	*x = RspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBody) ProtoMessage() {}

func (x *RspBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBody.ProtoReflect.Descriptor instead.
func (*RspBody) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{6}
}

func (x *RspBody) GetStringErrmsg() string {
	if x != nil && x.StringErrmsg != nil {
		return *x.StringErrmsg
	}
	return ""
}

//--------------------------------------------------------------------------------------------
//恶意文件事件上报和返回都用这个
type WebShell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid             []byte             `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                                        //GUID
	BytesUuid             []byte             `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                                        //UUID
	BytesFilePath         []byte             `protobuf:"bytes,3,req,name=bytes_file_path,json=bytesFilePath" json:"bytes_file_path,omitempty"`                          //文件全路径
	BytesFileMd5          []byte             `protobuf:"bytes,4,req,name=bytes_file_md5,json=bytesFileMd5" json:"bytes_file_md5,omitempty"`                             //文件md5
	BytesResult           []byte             `protobuf:"bytes,5,opt,name=bytes_result,json=bytesResult" json:"bytes_result,omitempty"`                                  //本地检测的结果
	Uint64Reason          *uint64            `protobuf:"varint,6,opt,name=uint64_reason,json=uint64Reason" json:"uint64_reason,omitempty"`                              //ntfs监控时的reason，位标识了create、write、overwrite等状态
	Int64FileSize         *int64             `protobuf:"varint,7,opt,name=int64_file_size,json=int64FileSize" json:"int64_file_size,omitempty"`                         //文件大小
	Int64FileCreatetime   *int64             `protobuf:"varint,8,opt,name=int64_file_createtime,json=int64FileCreatetime" json:"int64_file_createtime,omitempty"`       //文件创建时间
	Int64FileModifiertime *int64             `protobuf:"varint,9,opt,name=int64_file_modifiertime,json=int64FileModifiertime" json:"int64_file_modifiertime,omitempty"` //文件修改时间
	Int64FileAccesstime   *int64             `protobuf:"varint,10,opt,name=int64_file_accesstime,json=int64FileAccesstime" json:"int64_file_accesstime,omitempty"`      //文件访问时间
	BytesFileContent      []byte             `protobuf:"bytes,11,opt,name=bytes_file_content,json=bytesFileContent" json:"bytes_file_content,omitempty"`                //文件内容
	Int32FileBwtype       *int32             `protobuf:"varint,12,opt,name=int32_file_bwtype,json=int32FileBwtype" json:"int32_file_bwtype,omitempty"`                  //文件黑白类型
	BytesFileOwner        []byte             `protobuf:"bytes,13,opt,name=bytes_file_owner,json=bytesFileOwner" json:"bytes_file_owner,omitempty"`                      //文件创建者
	BytesFilePathmd5      []byte             `protobuf:"bytes,14,opt,name=bytes_file_pathmd5,json=bytesFilePathmd5" json:"bytes_file_pathmd5,omitempty"`                //文件路径的md5
	Int32Opret            *int32             `protobuf:"varint,15,opt,name=int32_opret,json=int32Opret" json:"int32_opret,omitempty"`                                   //文件操作返回码
	Int32ChunkSize        *int32             `protobuf:"varint,16,opt,name=int32_chunk_size,json=int32ChunkSize" json:"int32_chunk_size,omitempty"`                     //分片大小
	Int32ChunkTotal       *int32             `protobuf:"varint,17,opt,name=int32_chunk_total,json=int32ChunkTotal" json:"int32_chunk_total,omitempty"`                  //片总数
	Int32ChunkIndex       *int32             `protobuf:"varint,18,opt,name=int32_chunk_index,json=int32ChunkIndex" json:"int32_chunk_index,omitempty"`                  //当前第几片
	DetectBy              *WebShell_DetectBy `protobuf:"varint,22,opt,name=detect_by,json=detectBy,enum=ydeyes.WebShell_DetectBy" json:"detect_by,omitempty"`
	Pstree                []*PsParent        `protobuf:"bytes,23,rep,name=pstree" json:"pstree,omitempty"` // 进程树详情，json格式
}

func (x *WebShell) Reset() {
	*x = WebShell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShell) ProtoMessage() {}

func (x *WebShell) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShell.ProtoReflect.Descriptor instead.
func (*WebShell) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{7}
}

func (x *WebShell) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *WebShell) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *WebShell) GetBytesFilePath() []byte {
	if x != nil {
		return x.BytesFilePath
	}
	return nil
}

func (x *WebShell) GetBytesFileMd5() []byte {
	if x != nil {
		return x.BytesFileMd5
	}
	return nil
}

func (x *WebShell) GetBytesResult() []byte {
	if x != nil {
		return x.BytesResult
	}
	return nil
}

func (x *WebShell) GetUint64Reason() uint64 {
	if x != nil && x.Uint64Reason != nil {
		return *x.Uint64Reason
	}
	return 0
}

func (x *WebShell) GetInt64FileSize() int64 {
	if x != nil && x.Int64FileSize != nil {
		return *x.Int64FileSize
	}
	return 0
}

func (x *WebShell) GetInt64FileCreatetime() int64 {
	if x != nil && x.Int64FileCreatetime != nil {
		return *x.Int64FileCreatetime
	}
	return 0
}

func (x *WebShell) GetInt64FileModifiertime() int64 {
	if x != nil && x.Int64FileModifiertime != nil {
		return *x.Int64FileModifiertime
	}
	return 0
}

func (x *WebShell) GetInt64FileAccesstime() int64 {
	if x != nil && x.Int64FileAccesstime != nil {
		return *x.Int64FileAccesstime
	}
	return 0
}

func (x *WebShell) GetBytesFileContent() []byte {
	if x != nil {
		return x.BytesFileContent
	}
	return nil
}

func (x *WebShell) GetInt32FileBwtype() int32 {
	if x != nil && x.Int32FileBwtype != nil {
		return *x.Int32FileBwtype
	}
	return 0
}

func (x *WebShell) GetBytesFileOwner() []byte {
	if x != nil {
		return x.BytesFileOwner
	}
	return nil
}

func (x *WebShell) GetBytesFilePathmd5() []byte {
	if x != nil {
		return x.BytesFilePathmd5
	}
	return nil
}

func (x *WebShell) GetInt32Opret() int32 {
	if x != nil && x.Int32Opret != nil {
		return *x.Int32Opret
	}
	return 0
}

func (x *WebShell) GetInt32ChunkSize() int32 {
	if x != nil && x.Int32ChunkSize != nil {
		return *x.Int32ChunkSize
	}
	return 0
}

func (x *WebShell) GetInt32ChunkTotal() int32 {
	if x != nil && x.Int32ChunkTotal != nil {
		return *x.Int32ChunkTotal
	}
	return 0
}

func (x *WebShell) GetInt32ChunkIndex() int32 {
	if x != nil && x.Int32ChunkIndex != nil {
		return *x.Int32ChunkIndex
	}
	return 0
}

func (x *WebShell) GetDetectBy() WebShell_DetectBy {
	if x != nil && x.DetectBy != nil {
		return *x.DetectBy
	}
	return WebShell_FileMon
}

func (x *WebShell) GetPstree() []*PsParent {
	if x != nil {
		return x.Pstree
	}
	return nil
}

type PsParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       *uint32 `protobuf:"varint,1,req,name=pid" json:"pid,omitempty"`                              // 进程pid
	Exe       []byte  `protobuf:"bytes,2,req,name=exe" json:"exe,omitempty"`                               // 进程exe
	Cmdline   []byte  `protobuf:"bytes,3,req,name=cmdline" json:"cmdline,omitempty"`                       // 进程命令行
	Account   []byte  `protobuf:"bytes,4,req,name=account" json:"account,omitempty"`                       // 进程账号 user:group
	StartTime *uint32 `protobuf:"varint,5,req,name=start_time,json=startTime" json:"start_time,omitempty"` // 启动时间
	ExePerm   []byte  `protobuf:"bytes,6,req,name=exe_perm,json=exePerm" json:"exe_perm,omitempty"`        // 文件权限
	ExeMtime  *uint32 `protobuf:"varint,7,req,name=exe_mtime,json=exeMtime" json:"exe_mtime,omitempty"`    // 文件修改时间
	Sessionid *uint32 `protobuf:"varint,8,req,name=sessionid" json:"sessionid,omitempty"`                  // sessionid
	SshSource []byte  `protobuf:"bytes,9,req,name=ssh_source,json=sshSource" json:"ssh_source,omitempty"`  // ssh登录源: src_ip src_port local_ssh_ip local_ssh_port 例如:113.108.77.53 5770 10.0.0.5 22
}

func (x *PsParent) Reset() {
	*x = PsParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PsParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsParent) ProtoMessage() {}

func (x *PsParent) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsParent.ProtoReflect.Descriptor instead.
func (*PsParent) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{8}
}

func (x *PsParent) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *PsParent) GetExe() []byte {
	if x != nil {
		return x.Exe
	}
	return nil
}

func (x *PsParent) GetCmdline() []byte {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *PsParent) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *PsParent) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *PsParent) GetExePerm() []byte {
	if x != nil {
		return x.ExePerm
	}
	return nil
}

func (x *PsParent) GetExeMtime() uint32 {
	if x != nil && x.ExeMtime != nil {
		return *x.ExeMtime
	}
	return 0
}

func (x *PsParent) GetSessionid() uint32 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *PsParent) GetSshSource() []byte {
	if x != nil {
		return x.SshSource
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//登录和暴力破解事件
type BruteForce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid       []byte                `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                     //GUID
	BytesUuid       []byte                `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                     //UUID
	Int32EventType  *int32                `protobuf:"varint,3,req,name=int32_event_type,json=int32EventType" json:"int32_event_type,omitempty"`   //事件类型
	Int32StatCount  *int32                `protobuf:"varint,4,opt,name=int32_stat_count,json=int32StatCount" json:"int32_stat_count,omitempty"`   //当前统计次数
	BytesUserName   []byte                `protobuf:"bytes,5,opt,name=bytes_user_name,json=bytesUserName" json:"bytes_user_name,omitempty"`       //暴力破解的用户名
	BytesSrcIp      []byte                `protobuf:"bytes,6,opt,name=bytes_src_ip,json=bytesSrcIp" json:"bytes_src_ip,omitempty"`                //暴力破解源ip地址
	Int32DstPort    *int32                `protobuf:"varint,7,opt,name=int32_dst_port,json=int32DstPort" json:"int32_dst_port,omitempty"`         //暴力破解目标port地址
	BytesSrcMachine []byte                `protobuf:"bytes,8,opt,name=bytes_src_machine,json=bytesSrcMachine" json:"bytes_src_machine,omitempty"` //暴力破解源主机名字（允许为空�?
	Int64Logintime  *int64                `protobuf:"varint,9,opt,name=int64_logintime,json=int64Logintime" json:"int64_logintime,omitempty"`     //客户端登录时�
	BytesQuuid      []byte                `protobuf:"bytes,10,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`                 // added 2018-08
	LoginType       *BruteForce_LoginType `protobuf:"varint,11,opt,name=login_type,json=loginType,enum=ydeyes.BruteForce_LoginType" json:"login_type,omitempty"`
	BytesLogTime    []byte                `protobuf:"bytes,12,opt,name=bytes_log_time,json=bytesLogTime" json:"bytes_log_time,omitempty"` //日志中的时间 Sep 17 19:34:03
}

func (x *BruteForce) Reset() {
	*x = BruteForce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BruteForce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BruteForce) ProtoMessage() {}

func (x *BruteForce) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BruteForce.ProtoReflect.Descriptor instead.
func (*BruteForce) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{9}
}

func (x *BruteForce) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *BruteForce) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *BruteForce) GetInt32EventType() int32 {
	if x != nil && x.Int32EventType != nil {
		return *x.Int32EventType
	}
	return 0
}

func (x *BruteForce) GetInt32StatCount() int32 {
	if x != nil && x.Int32StatCount != nil {
		return *x.Int32StatCount
	}
	return 0
}

func (x *BruteForce) GetBytesUserName() []byte {
	if x != nil {
		return x.BytesUserName
	}
	return nil
}

func (x *BruteForce) GetBytesSrcIp() []byte {
	if x != nil {
		return x.BytesSrcIp
	}
	return nil
}

func (x *BruteForce) GetInt32DstPort() int32 {
	if x != nil && x.Int32DstPort != nil {
		return *x.Int32DstPort
	}
	return 0
}

func (x *BruteForce) GetBytesSrcMachine() []byte {
	if x != nil {
		return x.BytesSrcMachine
	}
	return nil
}

func (x *BruteForce) GetInt64Logintime() int64 {
	if x != nil && x.Int64Logintime != nil {
		return *x.Int64Logintime
	}
	return 0
}

func (x *BruteForce) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *BruteForce) GetLoginType() BruteForce_LoginType {
	if x != nil && x.LoginType != nil {
		return *x.LoginType
	}
	return BruteForce_INVALID_SSH_USER
}

func (x *BruteForce) GetBytesLogTime() []byte {
	if x != nil {
		return x.BytesLogTime
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//心跳，客户端服务端相关
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid       []byte  `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                    //GUID
	BytesUuid       []byte  `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                    //UUID
	Uint32Nextdelta *uint32 `protobuf:"varint,3,opt,name=uint32_nextdelta,json=uint32Nextdelta" json:"uint32_nextdelta,omitempty"` //下次心跳间隔
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{10}
}

func (x *HeartBeat) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *HeartBeat) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *HeartBeat) GetUint32Nextdelta() uint32 {
	if x != nil && x.Uint32Nextdelta != nil {
		return *x.Uint32Nextdelta
	}
	return 0
}

//--------------------------------------------------------------------------------------------
//登录初始信息
type ReqMachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid            []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                                     //GUID
	BytesUuid            []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                                     //UUID
	BytesMachineName     []byte `protobuf:"bytes,3,req,name=bytes_machine_name,json=bytesMachineName" json:"bytes_machine_name,omitempty"`              //主机名字
	Int32BindPort        *int32 `protobuf:"varint,4,opt,name=int32_bind_port,json=int32BindPort" json:"int32_bind_port,omitempty"`                      //主机绑定的端�?
	BytesIplist          []byte `protobuf:"bytes,5,opt,name=bytes_iplist,json=bytesIplist" json:"bytes_iplist,omitempty"`                               //主机枚举的所有ip列表
	BytesCpuid           []byte `protobuf:"bytes,6,opt,name=bytes_cpuid,json=bytesCpuid" json:"bytes_cpuid,omitempty"`                                  //cpuid
	BytesMacs            []byte `protobuf:"bytes,7,opt,name=bytes_macs,json=bytesMacs" json:"bytes_macs,omitempty"`                                     //所有mac列表
	BytesHdName          []byte `protobuf:"bytes,8,opt,name=bytes_hd_name,json=bytesHdName" json:"bytes_hd_name,omitempty"`                             //c盘所在硬盘名�?
	BytesMemName         []byte `protobuf:"bytes,9,opt,name=bytes_mem_name,json=bytesMemName" json:"bytes_mem_name,omitempty"`                          //内存名字
	BytesMbName          []byte `protobuf:"bytes,10,opt,name=bytes_mb_name,json=bytesMbName" json:"bytes_mb_name,omitempty"`                            //主板名字
	BytesBiosInfo        []byte `protobuf:"bytes,12,opt,name=bytes_bios_info,json=bytesBiosInfo" json:"bytes_bios_info,omitempty"`                      //bios信息
	BytesOsInfo          []byte `protobuf:"bytes,13,opt,name=bytes_os_info,json=bytesOsInfo" json:"bytes_os_info,omitempty"`                            //如windows server 2012
	BytesPlatform        []byte `protobuf:"bytes,14,opt,name=bytes_platform,json=bytesPlatform" json:"bytes_platform,omitempty"`                        //win32 win64 linux32 or linux64
	Int32Pid             *int32 `protobuf:"varint,15,opt,name=int32_pid,json=int32Pid" json:"int32_pid,omitempty"`                                      //进程pid
	BytesAppName         []byte `protobuf:"bytes,16,opt,name=bytes_app_name,json=bytesAppName" json:"bytes_app_name,omitempty"`                         //发起连接的进程名�?
	Int64AppStartTime    *int64 `protobuf:"varint,17,opt,name=int64_app_start_time,json=int64AppStartTime" json:"int64_app_start_time,omitempty"`       //进程启动时间
	Int64AppInstTime     *int64 `protobuf:"varint,18,opt,name=int64_app_inst_time,json=int64AppInstTime" json:"int64_app_inst_time,omitempty"`          //程序安装到客户端的时�?从注册表�?
	Int64OsStartTime     *int64 `protobuf:"varint,19,opt,name=int64_os_start_time,json=int64OsStartTime" json:"int64_os_start_time,omitempty"`          //操作系统开机时�?
	BytesRegion          []byte `protobuf:"bytes,20,opt,name=bytes_region,json=bytesRegion" json:"bytes_region,omitempty"`                              //客户端所在的网络区域(qcloud),先固定（由安装程序安装时候固定到注册表）
	BytesUpdateVer       []byte `protobuf:"bytes,21,opt,name=bytes_update_ver,json=bytesUpdateVer" json:"bytes_update_ver,omitempty"`                   //更新程序的版�?
	BytesRtpVer          []byte `protobuf:"bytes,22,opt,name=bytes_rtp_ver,json=bytesRtpVer" json:"bytes_rtp_ver,omitempty"`                            //rtp进程的版�?
	BytesCookie          []byte `protobuf:"bytes,23,opt,name=bytes_cookie,json=bytesCookie" json:"bytes_cookie,omitempty"`                              //对应数据库cookie字段，如果有则写入数据库�?
	BytesKey             []byte `protobuf:"bytes,24,opt,name=bytes_key,json=bytesKey" json:"bytes_key,omitempty"`                                       //客户端绑定腾讯云的字�?
	BytesQuuid           []byte `protobuf:"bytes,25,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`                                 //子机元数�?腾讯云uuid
	BytesInstanceid      []byte `protobuf:"bytes,26,opt,name=bytes_instanceid,json=bytesInstanceid" json:"bytes_instanceid,omitempty"`                  //子机元数�?实例id
	BytesPlacementRegion []byte `protobuf:"bytes,27,opt,name=bytes_placement_region,json=bytesPlacementRegion" json:"bytes_placement_region,omitempty"` //子机元数�?实例所在地域信�
	BytesPlacementZone   []byte `protobuf:"bytes,28,opt,name=bytes_placement_zone,json=bytesPlacementZone" json:"bytes_placement_zone,omitempty"`       //子机元数�?实例所在可用区信息
	BytesToken           []byte `protobuf:"bytes,29,opt,name=bytes_token,json=bytesToken" json:"bytes_token,omitempty"`                                 //用户标识，混合云环境下关联用户资产
}

func (x *ReqMachineInfo) Reset() {
	*x = ReqMachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMachineInfo) ProtoMessage() {}

func (x *ReqMachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMachineInfo.ProtoReflect.Descriptor instead.
func (*ReqMachineInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{11}
}

func (x *ReqMachineInfo) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesMachineName() []byte {
	if x != nil {
		return x.BytesMachineName
	}
	return nil
}

func (x *ReqMachineInfo) GetInt32BindPort() int32 {
	if x != nil && x.Int32BindPort != nil {
		return *x.Int32BindPort
	}
	return 0
}

func (x *ReqMachineInfo) GetBytesIplist() []byte {
	if x != nil {
		return x.BytesIplist
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesCpuid() []byte {
	if x != nil {
		return x.BytesCpuid
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesMacs() []byte {
	if x != nil {
		return x.BytesMacs
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesHdName() []byte {
	if x != nil {
		return x.BytesHdName
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesMemName() []byte {
	if x != nil {
		return x.BytesMemName
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesMbName() []byte {
	if x != nil {
		return x.BytesMbName
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesBiosInfo() []byte {
	if x != nil {
		return x.BytesBiosInfo
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesOsInfo() []byte {
	if x != nil {
		return x.BytesOsInfo
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesPlatform() []byte {
	if x != nil {
		return x.BytesPlatform
	}
	return nil
}

func (x *ReqMachineInfo) GetInt32Pid() int32 {
	if x != nil && x.Int32Pid != nil {
		return *x.Int32Pid
	}
	return 0
}

func (x *ReqMachineInfo) GetBytesAppName() []byte {
	if x != nil {
		return x.BytesAppName
	}
	return nil
}

func (x *ReqMachineInfo) GetInt64AppStartTime() int64 {
	if x != nil && x.Int64AppStartTime != nil {
		return *x.Int64AppStartTime
	}
	return 0
}

func (x *ReqMachineInfo) GetInt64AppInstTime() int64 {
	if x != nil && x.Int64AppInstTime != nil {
		return *x.Int64AppInstTime
	}
	return 0
}

func (x *ReqMachineInfo) GetInt64OsStartTime() int64 {
	if x != nil && x.Int64OsStartTime != nil {
		return *x.Int64OsStartTime
	}
	return 0
}

func (x *ReqMachineInfo) GetBytesRegion() []byte {
	if x != nil {
		return x.BytesRegion
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesUpdateVer() []byte {
	if x != nil {
		return x.BytesUpdateVer
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesRtpVer() []byte {
	if x != nil {
		return x.BytesRtpVer
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesCookie() []byte {
	if x != nil {
		return x.BytesCookie
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesKey() []byte {
	if x != nil {
		return x.BytesKey
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesInstanceid() []byte {
	if x != nil {
		return x.BytesInstanceid
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesPlacementRegion() []byte {
	if x != nil {
		return x.BytesPlacementRegion
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesPlacementZone() []byte {
	if x != nil {
		return x.BytesPlacementZone
	}
	return nil
}

func (x *ReqMachineInfo) GetBytesToken() []byte {
	if x != nil {
		return x.BytesToken
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//登录初始化返回
type RspMachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid             []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                                       //GUID
	BytesUuid             []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                                       //UUID
	BytesAppConfig        []byte `protobuf:"bytes,3,opt,name=bytes_app_config,json=bytesAppConfig" json:"bytes_app_config,omitempty"`                      //ydeyes程序配置，对应数据库字段: app_config
	BytesCollectionConfig []byte `protobuf:"bytes,4,opt,name=bytes_collection_config,json=bytesCollectionConfig" json:"bytes_collection_config,omitempty"` //日志采集配置 对应数据库字�? collection_config
	BytesSecurityConfig   []byte `protobuf:"bytes,5,opt,name=bytes_security_config,json=bytesSecurityConfig" json:"bytes_security_config,omitempty"`       //安全功能配置（waf、firewall、webshell集成一个xml）对应数据字段：security_config
	BytesPreOperate       []byte `protobuf:"bytes,6,opt,name=bytes_pre_operate,json=bytesPreOperate" json:"bytes_pre_operate,omitempty"`                   //登录后的预操作：对应字段：pre_operate
	BytesReason           []byte `protobuf:"bytes,7,opt,name=bytes_reason,json=bytesReason" json:"bytes_reason,omitempty"`                                 //登录失败的原因（用该字符串表示，服务器程序内定义好）
}

func (x *RspMachineInfo) Reset() {
	*x = RspMachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMachineInfo) ProtoMessage() {}

func (x *RspMachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMachineInfo.ProtoReflect.Descriptor instead.
func (*RspMachineInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{12}
}

func (x *RspMachineInfo) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *RspMachineInfo) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *RspMachineInfo) GetBytesAppConfig() []byte {
	if x != nil {
		return x.BytesAppConfig
	}
	return nil
}

func (x *RspMachineInfo) GetBytesCollectionConfig() []byte {
	if x != nil {
		return x.BytesCollectionConfig
	}
	return nil
}

func (x *RspMachineInfo) GetBytesSecurityConfig() []byte {
	if x != nil {
		return x.BytesSecurityConfig
	}
	return nil
}

func (x *RspMachineInfo) GetBytesPreOperate() []byte {
	if x != nil {
		return x.BytesPreOperate
	}
	return nil
}

func (x *RspMachineInfo) GetBytesReason() []byte {
	if x != nil {
		return x.BytesReason
	}
	return nil
}

//--------------------------------------------------------------------------------------------
//push命令
type PushCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid     []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                 //GUID
	BytesUuid     []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                 //UUID
	Int32OpType   *int32 `protobuf:"varint,3,req,name=int32_op_type,json=int32OpType" json:"int32_op_type,omitempty"`        //操作类型
	BytesOpId     []byte `protobuf:"bytes,4,req,name=bytes_op_id,json=bytesOpId" json:"bytes_op_id,omitempty"`               //push全局id 类似生成一个guid,对应数据库id
	BytesArg1     []byte `protobuf:"bytes,5,opt,name=bytes_arg1,json=bytesArg1" json:"bytes_arg1,omitempty"`                 //参数1 根据 int32_op_type，后端定�?
	BytesArg2     []byte `protobuf:"bytes,6,opt,name=bytes_arg2,json=bytesArg2" json:"bytes_arg2,omitempty"`                 //参数2 根据 int32_op_type，后端定�?
	BytesArg3     []byte `protobuf:"bytes,7,opt,name=bytes_arg3,json=bytesArg3" json:"bytes_arg3,omitempty"`                 //参数3 根据 int32_op_type，后端定�?
	BytesArg4     []byte `protobuf:"bytes,8,opt,name=bytes_arg4,json=bytesArg4" json:"bytes_arg4,omitempty"`                 //参数4 根据 int32_op_type，后端定�?
	BytesArg5     []byte `protobuf:"bytes,9,opt,name=bytes_arg5,json=bytesArg5" json:"bytes_arg5,omitempty"`                 //参数5 根据 int32_op_type，后端定�?
	BytesArg6     []byte `protobuf:"bytes,10,opt,name=bytes_arg6,json=bytesArg6" json:"bytes_arg6,omitempty"`                //参数6 根据 int32_op_type，后端定�?
	Int32ResultId *int32 `protobuf:"varint,11,opt,name=int32_result_id,json=int32ResultId" json:"int32_result_id,omitempty"` //结果记录id
}

func (x *PushCommand) Reset() {
	*x = PushCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCommand) ProtoMessage() {}

func (x *PushCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCommand.ProtoReflect.Descriptor instead.
func (*PushCommand) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{13}
}

func (x *PushCommand) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *PushCommand) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *PushCommand) GetInt32OpType() int32 {
	if x != nil && x.Int32OpType != nil {
		return *x.Int32OpType
	}
	return 0
}

func (x *PushCommand) GetBytesOpId() []byte {
	if x != nil {
		return x.BytesOpId
	}
	return nil
}

func (x *PushCommand) GetBytesArg1() []byte {
	if x != nil {
		return x.BytesArg1
	}
	return nil
}

func (x *PushCommand) GetBytesArg2() []byte {
	if x != nil {
		return x.BytesArg2
	}
	return nil
}

func (x *PushCommand) GetBytesArg3() []byte {
	if x != nil {
		return x.BytesArg3
	}
	return nil
}

func (x *PushCommand) GetBytesArg4() []byte {
	if x != nil {
		return x.BytesArg4
	}
	return nil
}

func (x *PushCommand) GetBytesArg5() []byte {
	if x != nil {
		return x.BytesArg5
	}
	return nil
}

func (x *PushCommand) GetBytesArg6() []byte {
	if x != nil {
		return x.BytesArg6
	}
	return nil
}

func (x *PushCommand) GetInt32ResultId() int32 {
	if x != nil && x.Int32ResultId != nil {
		return *x.Int32ResultId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
//push命令的return
type RetCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid       []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                       //GUID
	BytesUuid       []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                       //UUID
	Int32OpType     *int32 `protobuf:"varint,3,req,name=int32_op_type,json=int32OpType" json:"int32_op_type,omitempty"`              //操作类型
	BytesOpId       []byte `protobuf:"bytes,4,req,name=bytes_op_id,json=bytesOpId" json:"bytes_op_id,omitempty"`                     //push全局id 类似生成一个guid,对应数据库id
	Int32Retcode    *int32 `protobuf:"varint,5,req,name=int32_retcode,json=int32Retcode" json:"int32_retcode,omitempty"`             //返回执行过程结果，等价于函数返回�?
	Int32Fincode    *int32 `protobuf:"varint,6,req,name=int32_fincode,json=int32Fincode" json:"int32_fincode,omitempty"`             //返回执行是否完结的状�?1=执行正常结束 �?=不正�?
	BytesMessage    []byte `protobuf:"bytes,7,opt,name=bytes_message,json=bytesMessage" json:"bytes_message,omitempty"`              //返回执行提示信息，等价于函数返回的字符串值（如参数错误，执行成功等）
	BytesExeout     []byte `protobuf:"bytes,8,opt,name=bytes_exeout,json=bytesExeout" json:"bytes_exeout,omitempty"`                 //返回execute执行输出结果
	BytesResult     []byte `protobuf:"bytes,9,opt,name=bytes_result,json=bytesResult" json:"bytes_result,omitempty"`                 //返回业务需要的结果
	Int32ResultType *int32 `protobuf:"varint,10,opt,name=int32_result_type,json=int32ResultType" json:"int32_result_type,omitempty"` // 0=不需要返回数据，1=表示执行stdout输出存exeout 2=文本数据存result 3=二进制输出存result 4=文件存hdfs
}

func (x *RetCommand) Reset() {
	*x = RetCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetCommand) ProtoMessage() {}

func (x *RetCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetCommand.ProtoReflect.Descriptor instead.
func (*RetCommand) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{14}
}

func (x *RetCommand) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *RetCommand) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *RetCommand) GetInt32OpType() int32 {
	if x != nil && x.Int32OpType != nil {
		return *x.Int32OpType
	}
	return 0
}

func (x *RetCommand) GetBytesOpId() []byte {
	if x != nil {
		return x.BytesOpId
	}
	return nil
}

func (x *RetCommand) GetInt32Retcode() int32 {
	if x != nil && x.Int32Retcode != nil {
		return *x.Int32Retcode
	}
	return 0
}

func (x *RetCommand) GetInt32Fincode() int32 {
	if x != nil && x.Int32Fincode != nil {
		return *x.Int32Fincode
	}
	return 0
}

func (x *RetCommand) GetBytesMessage() []byte {
	if x != nil {
		return x.BytesMessage
	}
	return nil
}

func (x *RetCommand) GetBytesExeout() []byte {
	if x != nil {
		return x.BytesExeout
	}
	return nil
}

func (x *RetCommand) GetBytesResult() []byte {
	if x != nil {
		return x.BytesResult
	}
	return nil
}

func (x *RetCommand) GetInt32ResultType() int32 {
	if x != nil && x.Int32ResultType != nil {
		return *x.Int32ResultType
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// 漏洞扫描返回数据
type JsonProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid  []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`    //GUID
	BytesUuid  []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`    //UUID
	BytesQuuid []byte `protobuf:"bytes,3,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"` //å­�æœºå…ƒæ•°æ�¿è…¾è®¯äº‘uuid
	BytesJson  []byte `protobuf:"bytes,4,opt,name=bytes_json,json=bytesJson" json:"bytes_json,omitempty"`
}

func (x *JsonProto) Reset() {
	*x = JsonProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonProto) ProtoMessage() {}

func (x *JsonProto) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonProto.ProtoReflect.Descriptor instead.
func (*JsonProto) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{15}
}

func (x *JsonProto) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *JsonProto) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *JsonProto) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *JsonProto) GetBytesJson() []byte {
	if x != nil {
		return x.BytesJson
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// dns解释记录
type DnsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid   []byte  `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesUuid   []byte  `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid  []byte  `protobuf:"bytes,3,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Uint32Time  *uint32 `protobuf:"varint,4,opt,name=uint32_time,json=uint32Time" json:"uint32_time,omitempty"` // utc
	Uint32Saddr *uint32 `protobuf:"varint,5,opt,name=uint32_saddr,json=uint32Saddr" json:"uint32_saddr,omitempty"`
	Uint32Sport *uint32 `protobuf:"varint,6,opt,name=uint32_sport,json=uint32Sport" json:"uint32_sport,omitempty"`
	Uint32Daddr *uint32 `protobuf:"varint,7,opt,name=uint32_daddr,json=uint32Daddr" json:"uint32_daddr,omitempty"`
	Uint32Dport *uint32 `protobuf:"varint,8,opt,name=uint32_dport,json=uint32Dport" json:"uint32_dport,omitempty"`
	BytesUrl    []byte  `protobuf:"bytes,9,opt,name=bytes_url,json=bytesUrl" json:"bytes_url,omitempty"`            // json -> query
	Uint32Count *uint32 `protobuf:"varint,10,opt,name=uint32_count,json=uint32Count" json:"uint32_count,omitempty"` // url count
	BytesPacket []byte  `protobuf:"bytes,11,opt,name=bytes_packet,json=bytesPacket" json:"bytes_packet,omitempty"`  // json  -> answer -> json array
}

func (x *DnsRecord) Reset() {
	*x = DnsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecord) ProtoMessage() {}

func (x *DnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecord.ProtoReflect.Descriptor instead.
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{16}
}

func (x *DnsRecord) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *DnsRecord) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *DnsRecord) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *DnsRecord) GetUint32Time() uint32 {
	if x != nil && x.Uint32Time != nil {
		return *x.Uint32Time
	}
	return 0
}

func (x *DnsRecord) GetUint32Saddr() uint32 {
	if x != nil && x.Uint32Saddr != nil {
		return *x.Uint32Saddr
	}
	return 0
}

func (x *DnsRecord) GetUint32Sport() uint32 {
	if x != nil && x.Uint32Sport != nil {
		return *x.Uint32Sport
	}
	return 0
}

func (x *DnsRecord) GetUint32Daddr() uint32 {
	if x != nil && x.Uint32Daddr != nil {
		return *x.Uint32Daddr
	}
	return 0
}

func (x *DnsRecord) GetUint32Dport() uint32 {
	if x != nil && x.Uint32Dport != nil {
		return *x.Uint32Dport
	}
	return 0
}

func (x *DnsRecord) GetBytesUrl() []byte {
	if x != nil {
		return x.BytesUrl
	}
	return nil
}

func (x *DnsRecord) GetUint32Count() uint32 {
	if x != nil && x.Uint32Count != nil {
		return *x.Uint32Count
	}
	return 0
}

func (x *DnsRecord) GetBytesPacket() []byte {
	if x != nil {
		return x.BytesPacket
	}
	return nil
}

type DnsAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnsName []byte  `protobuf:"bytes,1,opt,name=ans_name,json=ansName" json:"ans_name,omitempty"`
	AnsType *int32  `protobuf:"varint,2,opt,name=ans_type,json=ansType" json:"ans_type,omitempty"`
	AnsTtl  *uint32 `protobuf:"varint,3,opt,name=ans_ttl,json=ansTtl" json:"ans_ttl,omitempty"`
	AnsData []byte  `protobuf:"bytes,4,opt,name=ans_data,json=ansData" json:"ans_data,omitempty"`
}

func (x *DnsAnswer) Reset() {
	*x = DnsAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAnswer) ProtoMessage() {}

func (x *DnsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAnswer.ProtoReflect.Descriptor instead.
func (*DnsAnswer) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{17}
}

func (x *DnsAnswer) GetAnsName() []byte {
	if x != nil {
		return x.AnsName
	}
	return nil
}

func (x *DnsAnswer) GetAnsType() int32 {
	if x != nil && x.AnsType != nil {
		return *x.AnsType
	}
	return 0
}

func (x *DnsAnswer) GetAnsTtl() uint32 {
	if x != nil && x.AnsTtl != nil {
		return *x.AnsTtl
	}
	return 0
}

func (x *DnsAnswer) GetAnsData() []byte {
	if x != nil {
		return x.AnsData
	}
	return nil
}

type DnsRecordToES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      []byte       `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Quuid     []byte       `protobuf:"bytes,2,opt,name=quuid" json:"quuid,omitempty"`
	QueryTime *uint32      `protobuf:"varint,3,opt,name=query_time,json=queryTime" json:"query_time,omitempty"`
	SrcAddr   *uint32      `protobuf:"varint,4,opt,name=src_addr,json=srcAddr" json:"src_addr,omitempty"`
	SrcPort   *uint32      `protobuf:"varint,5,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstAddr   *uint32      `protobuf:"varint,6,opt,name=dst_addr,json=dstAddr" json:"dst_addr,omitempty"`
	DstPort   *uint32      `protobuf:"varint,7,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	QueryUrl  []byte       `protobuf:"bytes,8,opt,name=query_url,json=queryUrl" json:"query_url,omitempty"`
	Count     *uint32      `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	Answer    []*DnsAnswer `protobuf:"bytes,10,rep,name=answer" json:"answer,omitempty"`
}

func (x *DnsRecordToES) Reset() {
	*x = DnsRecordToES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecordToES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecordToES) ProtoMessage() {}

func (x *DnsRecordToES) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecordToES.ProtoReflect.Descriptor instead.
func (*DnsRecordToES) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{18}
}

func (x *DnsRecordToES) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *DnsRecordToES) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *DnsRecordToES) GetQueryTime() uint32 {
	if x != nil && x.QueryTime != nil {
		return *x.QueryTime
	}
	return 0
}

func (x *DnsRecordToES) GetSrcAddr() uint32 {
	if x != nil && x.SrcAddr != nil {
		return *x.SrcAddr
	}
	return 0
}

func (x *DnsRecordToES) GetSrcPort() uint32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *DnsRecordToES) GetDstAddr() uint32 {
	if x != nil && x.DstAddr != nil {
		return *x.DstAddr
	}
	return 0
}

func (x *DnsRecordToES) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *DnsRecordToES) GetQueryUrl() []byte {
	if x != nil {
		return x.QueryUrl
	}
	return nil
}

func (x *DnsRecordToES) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *DnsRecordToES) GetAnswer() []*DnsAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

type DnsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        []byte  `protobuf:"bytes,1,req,name=guid" json:"guid,omitempty"`
	Uuid        []byte  `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
	Quuid       []byte  `protobuf:"bytes,3,req,name=quuid" json:"quuid,omitempty"`
	Time        *uint32 `protobuf:"varint,4,req,name=time" json:"time,omitempty"` // utc
	Url         []byte  `protobuf:"bytes,5,req,name=url" json:"url,omitempty"`    // json -> query
	ProcId      *uint32 `protobuf:"varint,6,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	ProcPath    []byte  `protobuf:"bytes,7,opt,name=proc_path,json=procPath" json:"proc_path,omitempty"`
	ProcCmdline []byte  `protobuf:"bytes,8,opt,name=proc_cmdline,json=procCmdline" json:"proc_cmdline,omitempty"`
	ProcMd5     []byte  `protobuf:"bytes,9,opt,name=proc_md5,json=procMd5" json:"proc_md5,omitempty"`
	Count       *uint32 `protobuf:"varint,10,opt,name=count" json:"count,omitempty"` // 新增加，agent 合并统计次数
}

func (x *DnsQuery) Reset() {
	*x = DnsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsQuery) ProtoMessage() {}

func (x *DnsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsQuery.ProtoReflect.Descriptor instead.
func (*DnsQuery) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{19}
}

func (x *DnsQuery) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *DnsQuery) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *DnsQuery) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *DnsQuery) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *DnsQuery) GetUrl() []byte {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *DnsQuery) GetProcId() uint32 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

func (x *DnsQuery) GetProcPath() []byte {
	if x != nil {
		return x.ProcPath
	}
	return nil
}

func (x *DnsQuery) GetProcCmdline() []byte {
	if x != nil {
		return x.ProcCmdline
	}
	return nil
}

func (x *DnsQuery) GetProcMd5() []byte {
	if x != nil {
		return x.ProcMd5
	}
	return nil
}

func (x *DnsQuery) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// 全量或增量上报系统账户信息
//  subcmd = 0x01;  全量上报系统账户信息
//  subcmd = 0x02; 	增量上报系统账户信息
type UserAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid   []byte                     `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesUuid   []byte                     `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid  []byte                     `protobuf:"bytes,3,opt,name=bytes_quuid,json=bytesQuuid,def=" json:"bytes_quuid,omitempty"`
	AccountList []*UserAccountInfo_Account `protobuf:"bytes,4,rep,name=account_list,json=accountList" json:"account_list,omitempty"`
	Platform    *Platform                  `protobuf:"varint,5,req,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
}

// Default values for UserAccountInfo fields.
var (
	Default_UserAccountInfo_BytesQuuid = []byte("")
)

func (x *UserAccountInfo) Reset() {
	*x = UserAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfo) ProtoMessage() {}

func (x *UserAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfo.ProtoReflect.Descriptor instead.
func (*UserAccountInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{20}
}

func (x *UserAccountInfo) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *UserAccountInfo) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *UserAccountInfo) GetBytesQuuid() []byte {
	if x != nil && x.BytesQuuid != nil {
		return x.BytesQuuid
	}
	return append([]byte(nil), Default_UserAccountInfo_BytesQuuid...)
}

func (x *UserAccountInfo) GetAccountList() []*UserAccountInfo_Account {
	if x != nil {
		return x.AccountList
	}
	return nil
}

func (x *UserAccountInfo) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

//--------------------------------------------------------------------------------------------
type AgentDumpDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentDumpDefine) Reset() {
	*x = AgentDumpDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDumpDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDumpDefine) ProtoMessage() {}

func (x *AgentDumpDefine) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDumpDefine.ProtoReflect.Descriptor instead.
func (*AgentDumpDefine) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{21}
}

//--------------------------------------------------------------------------------------------
//监听端口信息上报协议  cmd_open_port_report = 0x19;
type OpenPortMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid   []byte                  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid   []byte                  `protobuf:"bytes,2,opt,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	ReportType  *OpenPortMsg_ReportType `protobuf:"varint,3,req,name=report_type,json=reportType,enum=ydeyes.OpenPortMsg_ReportType,def=0" json:"report_type,omitempty"`
	PortInfoLst []*OpenPortMsg_PortInfo `protobuf:"bytes,4,rep,name=port_info_lst,json=portInfoLst" json:"port_info_lst,omitempty"`
	BytesQuuid  []byte                  `protobuf:"bytes,5,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	PushResult  []byte                  `protobuf:"bytes,6,opt,name=push_result,json=pushResult" json:"push_result,omitempty"` //由push 触发的全量上报进程数据时，最后一页上报push result 序列化的数据
}

// Default values for OpenPortMsg fields.
const (
	Default_OpenPortMsg_ReportType = OpenPortMsg_REPORT_ALL
)

func (x *OpenPortMsg) Reset() {
	*x = OpenPortMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPortMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPortMsg) ProtoMessage() {}

func (x *OpenPortMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPortMsg.ProtoReflect.Descriptor instead.
func (*OpenPortMsg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{22}
}

func (x *OpenPortMsg) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *OpenPortMsg) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *OpenPortMsg) GetReportType() OpenPortMsg_ReportType {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return Default_OpenPortMsg_ReportType
}

func (x *OpenPortMsg) GetPortInfoLst() []*OpenPortMsg_PortInfo {
	if x != nil {
		return x.PortInfoLst
	}
	return nil
}

func (x *OpenPortMsg) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *OpenPortMsg) GetPushResult() []byte {
	if x != nil {
		return x.PushResult
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// agent 上报进程信息, cmdid=0x20
type ProcessInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid   []byte                     `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid   []byte                     `protobuf:"bytes,2,opt,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	ProcessList []*ProcessInfoMsg_Process  `protobuf:"bytes,3,rep,name=process_list,json=processList" json:"process_list,omitempty"`
	ReportType  *ProcessInfoMsg_ReportType `protobuf:"varint,4,req,name=report_type,json=reportType,enum=ydeyes.ProcessInfoMsg_ReportType" json:"report_type,omitempty"`
	CurrentPage *uint32                    `protobuf:"varint,5,req,name=current_page,json=currentPage" json:"current_page,omitempty"` //分页上报，当前第几页.  第一页为 1
	TotalPage   *uint32                    `protobuf:"varint,6,req,name=total_page,json=totalPage" json:"total_page,omitempty"`       //分页上报，总共有多少页
	Platform    *Platform                  `protobuf:"varint,7,req,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
	PushResult  []byte                     `protobuf:"bytes,8,opt,name=push_result,json=pushResult" json:"push_result,omitempty"` //由push 触发的全量上报进程数据时，最后一页上报push result 序列化的数据
	BytesQuuid  []byte                     `protobuf:"bytes,9,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
}

func (x *ProcessInfoMsg) Reset() {
	*x = ProcessInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoMsg) ProtoMessage() {}

func (x *ProcessInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoMsg.ProtoReflect.Descriptor instead.
func (*ProcessInfoMsg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{23}
}

func (x *ProcessInfoMsg) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *ProcessInfoMsg) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *ProcessInfoMsg) GetProcessList() []*ProcessInfoMsg_Process {
	if x != nil {
		return x.ProcessList
	}
	return nil
}

func (x *ProcessInfoMsg) GetReportType() ProcessInfoMsg_ReportType {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return ProcessInfoMsg_REPORT_ALL
}

func (x *ProcessInfoMsg) GetCurrentPage() uint32 {
	if x != nil && x.CurrentPage != nil {
		return *x.CurrentPage
	}
	return 0
}

func (x *ProcessInfoMsg) GetTotalPage() uint32 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *ProcessInfoMsg) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

func (x *ProcessInfoMsg) GetPushResult() []byte {
	if x != nil {
		return x.PushResult
	}
	return nil
}

func (x *ProcessInfoMsg) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

//用户自定义配置
type UserDefConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid          []byte    `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid         []byte    `protobuf:"bytes,2,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	LocalConfigVersion *uint32   `protobuf:"varint,3,req,name=local_config_version,json=localConfigVersion" json:"local_config_version,omitempty"` // unix time stamp as version
	Platform           *Platform `protobuf:"varint,4,opt,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
	LatestVersion      *uint32   `protobuf:"varint,5,opt,name=latest_version,json=latestVersion" json:"latest_version,omitempty"`
	BytesConfig        []byte    `protobuf:"bytes,6,opt,name=bytes_config,json=bytesConfig" json:"bytes_config,omitempty"`
}

func (x *UserDefConfig) Reset() {
	*x = UserDefConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDefConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDefConfig) ProtoMessage() {}

func (x *UserDefConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDefConfig.ProtoReflect.Descriptor instead.
func (*UserDefConfig) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{24}
}

func (x *UserDefConfig) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *UserDefConfig) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *UserDefConfig) GetLocalConfigVersion() uint32 {
	if x != nil && x.LocalConfigVersion != nil {
		return *x.LocalConfigVersion
	}
	return 0
}

func (x *UserDefConfig) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

func (x *UserDefConfig) GetLatestVersion() uint32 {
	if x != nil && x.LatestVersion != nil {
		return *x.LatestVersion
	}
	return 0
}

func (x *UserDefConfig) GetBytesConfig() []byte {
	if x != nil {
		return x.BytesConfig
	}
	return nil
}

// agent 上报的cpu， 内存等监控信息
type AgentMonitorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid      []byte                             `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	MonitorValues  []*AgentMonitorReport_MonitorData  `protobuf:"bytes,2,rep,name=monitor_values,json=monitorValues" json:"monitor_values,omitempty"`
	Platform       *Platform                          `protobuf:"varint,3,req,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
	MonitorProcess *AgentMonitorReport_MonitorProcess `protobuf:"varint,4,req,name=monitor_process,json=monitorProcess,enum=ydeyes.AgentMonitorReport_MonitorProcess" json:"monitor_process,omitempty"`
	ProcssId       *uint32                            `protobuf:"varint,5,opt,name=procss_id,json=procssId" json:"procss_id,omitempty"`
	ByteVer        []byte                             `protobuf:"bytes,6,opt,name=byte_ver,json=byteVer" json:"byte_ver,omitempty"`
	KernelNum      *uint32                            `protobuf:"varint,7,opt,name=kernel_num,json=kernelNum" json:"kernel_num,omitempty"`
	TotalMem       *uint32                            `protobuf:"varint,8,opt,name=total_mem,json=totalMem" json:"total_mem,omitempty"`
}

func (x *AgentMonitorReport) Reset() {
	*x = AgentMonitorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMonitorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMonitorReport) ProtoMessage() {}

func (x *AgentMonitorReport) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMonitorReport.ProtoReflect.Descriptor instead.
func (*AgentMonitorReport) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{25}
}

func (x *AgentMonitorReport) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *AgentMonitorReport) GetMonitorValues() []*AgentMonitorReport_MonitorData {
	if x != nil {
		return x.MonitorValues
	}
	return nil
}

func (x *AgentMonitorReport) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

func (x *AgentMonitorReport) GetMonitorProcess() AgentMonitorReport_MonitorProcess {
	if x != nil && x.MonitorProcess != nil {
		return *x.MonitorProcess
	}
	return AgentMonitorReport_YDLive
}

func (x *AgentMonitorReport) GetProcssId() uint32 {
	if x != nil && x.ProcssId != nil {
		return *x.ProcssId
	}
	return 0
}

func (x *AgentMonitorReport) GetByteVer() []byte {
	if x != nil {
		return x.ByteVer
	}
	return nil
}

func (x *AgentMonitorReport) GetKernelNum() uint32 {
	if x != nil && x.KernelNum != nil {
		return *x.KernelNum
	}
	return 0
}

func (x *AgentMonitorReport) GetTotalMem() uint32 {
	if x != nil && x.TotalMem != nil {
		return *x.TotalMem
	}
	return 0
}

//user history 上报
type UserCommandReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName    []byte                              `protobuf:"bytes,1,req,name=user_name,json=userName" json:"user_name,omitempty"`
	BytesUuid   []byte                              `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	CommandList []*UserCommandReport_CommandElement `protobuf:"bytes,3,rep,name=command_list,json=commandList" json:"command_list,omitempty"`
	Platform    *Platform                           `protobuf:"varint,4,req,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
	BytesQuuid  []byte                              `protobuf:"bytes,5,opt,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
}

func (x *UserCommandReport) Reset() {
	*x = UserCommandReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommandReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommandReport) ProtoMessage() {}

func (x *UserCommandReport) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommandReport.ProtoReflect.Descriptor instead.
func (*UserCommandReport) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{26}
}

func (x *UserCommandReport) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *UserCommandReport) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *UserCommandReport) GetCommandList() []*UserCommandReport_CommandElement {
	if x != nil {
		return x.CommandList
	}
	return nil
}

func (x *UserCommandReport) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

func (x *UserCommandReport) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

//本地提权
type ProcPrivilegeEscalation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid     []byte                                       `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid    []byte                                       `protobuf:"bytes,2,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	PrivilegeList []*ProcPrivilegeEscalation_ProcPrivilegeInfo `protobuf:"bytes,3,rep,name=privilege_list,json=privilegeList" json:"privilege_list,omitempty"`
}

func (x *ProcPrivilegeEscalation) Reset() {
	*x = ProcPrivilegeEscalation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcPrivilegeEscalation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcPrivilegeEscalation) ProtoMessage() {}

func (x *ProcPrivilegeEscalation) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcPrivilegeEscalation.ProtoReflect.Descriptor instead.
func (*ProcPrivilegeEscalation) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{27}
}

func (x *ProcPrivilegeEscalation) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *ProcPrivilegeEscalation) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *ProcPrivilegeEscalation) GetPrivilegeList() []*ProcPrivilegeEscalation_ProcPrivilegeInfo {
	if x != nil {
		return x.PrivilegeList
	}
	return nil
}

//反弹shell
type ReverseShell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                           `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid       []byte                           `protobuf:"bytes,2,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ReverseShellList []*ReverseShell_ReverseShellInfo `protobuf:"bytes,3,rep,name=reverse_shell_list,json=reverseShellList" json:"reverse_shell_list,omitempty"`
}

func (x *ReverseShell) Reset() {
	*x = ReverseShell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseShell) ProtoMessage() {}

func (x *ReverseShell) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseShell.ProtoReflect.Descriptor instead.
func (*ReverseShell) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{28}
}

func (x *ReverseShell) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *ReverseShell) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *ReverseShell) GetReverseShellList() []*ReverseShell_ReverseShellInfo {
	if x != nil {
		return x.ReverseShellList
	}
	return nil
}

//----------------  cert proto -------------------------------
// -- step 1: init before install cert
type SqCertInitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Tid  []byte `protobuf:"bytes,2,req,name=tid" json:"tid,omitempty"`
}

func (x *SqCertInitReq) Reset() {
	*x = SqCertInitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqCertInitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqCertInitReq) ProtoMessage() {}

func (x *SqCertInitReq) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqCertInitReq.ProtoReflect.Descriptor instead.
func (*SqCertInitReq) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{29}
}

func (x *SqCertInitReq) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SqCertInitReq) GetTid() []byte {
	if x != nil {
		return x.Tid
	}
	return nil
}

type SqCertInitRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Tid        []byte `protobuf:"bytes,2,req,name=tid" json:"tid,omitempty"`
	CertUid    []byte `protobuf:"bytes,3,req,name=cert_uid,json=certUid" json:"cert_uid,omitempty"`          //as param for SqApplyCert
	RepContent []byte `protobuf:"bytes,4,req,name=rep_content,json=repContent" json:"rep_content,omitempty"` //base64 encoded. used by agent sdk
}

func (x *SqCertInitRsp) Reset() {
	*x = SqCertInitRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqCertInitRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqCertInitRsp) ProtoMessage() {}

func (x *SqCertInitRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqCertInitRsp.ProtoReflect.Descriptor instead.
func (*SqCertInitRsp) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{30}
}

func (x *SqCertInitRsp) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SqCertInitRsp) GetTid() []byte {
	if x != nil {
		return x.Tid
	}
	return nil
}

func (x *SqCertInitRsp) GetCertUid() []byte {
	if x != nil {
		return x.CertUid
	}
	return nil
}

func (x *SqCertInitRsp) GetRepContent() []byte {
	if x != nil {
		return x.RepContent
	}
	return nil
}

// -- step 2: install cert
type SqApplyCertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Tid         []byte `protobuf:"bytes,2,req,name=tid" json:"tid,omitempty"`                                    // from SqCertInitRsp
	CertUid     []byte `protobuf:"bytes,3,req,name=cert_uid,json=certUid" json:"cert_uid,omitempty"`             // from SqCertInitRsp
	CertRequest []byte `protobuf:"bytes,4,req,name=cert_request,json=certRequest" json:"cert_request,omitempty"` // generated by sdk
	CertCid     []byte `protobuf:"bytes,5,req,name=cert_cid,json=certCid" json:"cert_cid,omitempty"`             // generated by sdk
}

func (x *SqApplyCertReq) Reset() {
	*x = SqApplyCertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqApplyCertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqApplyCertReq) ProtoMessage() {}

func (x *SqApplyCertReq) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqApplyCertReq.ProtoReflect.Descriptor instead.
func (*SqApplyCertReq) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{31}
}

func (x *SqApplyCertReq) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SqApplyCertReq) GetTid() []byte {
	if x != nil {
		return x.Tid
	}
	return nil
}

func (x *SqApplyCertReq) GetCertUid() []byte {
	if x != nil {
		return x.CertUid
	}
	return nil
}

func (x *SqApplyCertReq) GetCertRequest() []byte {
	if x != nil {
		return x.CertRequest
	}
	return nil
}

func (x *SqApplyCertReq) GetCertCid() []byte {
	if x != nil {
		return x.CertCid
	}
	return nil
}

type SqApplyCertRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	CertSign   []byte `protobuf:"bytes,2,req,name=cert_sign,json=certSign" json:"cert_sign,omitempty"` // to install cert by sdk
	CertStatus *int64 `protobuf:"varint,3,req,name=cert_status,json=certStatus" json:"cert_status,omitempty"`
}

func (x *SqApplyCertRsp) Reset() {
	*x = SqApplyCertRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqApplyCertRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqApplyCertRsp) ProtoMessage() {}

func (x *SqApplyCertRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqApplyCertRsp.ProtoReflect.Descriptor instead.
func (*SqApplyCertRsp) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{32}
}

func (x *SqApplyCertRsp) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SqApplyCertRsp) GetCertSign() []byte {
	if x != nil {
		return x.CertSign
	}
	return nil
}

func (x *SqApplyCertRsp) GetCertStatus() int64 {
	if x != nil && x.CertStatus != nil {
		return *x.CertStatus
	}
	return 0
}

type SqVerifySignMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	SignedMsg []byte `protobuf:"bytes,2,req,name=signed_msg,json=signedMsg" json:"signed_msg,omitempty"`
}

func (x *SqVerifySignMsgReq) Reset() {
	*x = SqVerifySignMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqVerifySignMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqVerifySignMsgReq) ProtoMessage() {}

func (x *SqVerifySignMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqVerifySignMsgReq.ProtoReflect.Descriptor instead.
func (*SqVerifySignMsgReq) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{33}
}

func (x *SqVerifySignMsgReq) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SqVerifySignMsgReq) GetSignedMsg() []byte {
	if x != nil {
		return x.SignedMsg
	}
	return nil
}

type YmonMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  []byte                `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Quuid []byte                `protobuf:"bytes,2,req,name=quuid" json:"quuid,omitempty"`
	Regs  []*YmonMsg_YmonMsgReg `protobuf:"bytes,3,rep,name=regs" json:"regs,omitempty"`
	Guid  []byte                `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
}

func (x *YmonMsg) Reset() {
	*x = YmonMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YmonMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YmonMsg) ProtoMessage() {}

func (x *YmonMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YmonMsg.ProtoReflect.Descriptor instead.
func (*YmonMsg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{34}
}

func (x *YmonMsg) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *YmonMsg) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *YmonMsg) GetRegs() []*YmonMsg_YmonMsgReg {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *YmonMsg) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

type AgentCrashReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid    []byte                         `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	CrashType    *AgentCrashReport_CrashType    `protobuf:"varint,2,req,name=crash_type,json=crashType,enum=ydeyes.AgentCrashReport_CrashType" json:"crash_type,omitempty"`
	Platform     *Platform                      `protobuf:"varint,3,req,name=platform,enum=ydeyes.Platform" json:"platform,omitempty"`
	CrashProcess *AgentCrashReport_CrashProcess `protobuf:"varint,4,req,name=crash_process,json=crashProcess,enum=ydeyes.AgentCrashReport_CrashProcess" json:"crash_process,omitempty"`
	ProcssId     *uint32                        `protobuf:"varint,5,opt,name=procss_id,json=procssId" json:"procss_id,omitempty"`
	ByteVer      []byte                         `protobuf:"bytes,6,opt,name=byte_ver,json=byteVer" json:"byte_ver,omitempty"`
	KernelNum    *uint32                        `protobuf:"varint,7,opt,name=kernel_num,json=kernelNum" json:"kernel_num,omitempty"`
}

func (x *AgentCrashReport) Reset() {
	*x = AgentCrashReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentCrashReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCrashReport) ProtoMessage() {}

func (x *AgentCrashReport) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCrashReport.ProtoReflect.Descriptor instead.
func (*AgentCrashReport) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{35}
}

func (x *AgentCrashReport) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *AgentCrashReport) GetCrashType() AgentCrashReport_CrashType {
	if x != nil && x.CrashType != nil {
		return *x.CrashType
	}
	return AgentCrashReport_CPU_High
}

func (x *AgentCrashReport) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_PLATFORM_UNKNOWNTYPE
}

func (x *AgentCrashReport) GetCrashProcess() AgentCrashReport_CrashProcess {
	if x != nil && x.CrashProcess != nil {
		return *x.CrashProcess
	}
	return AgentCrashReport_YDLive
}

func (x *AgentCrashReport) GetProcssId() uint32 {
	if x != nil && x.ProcssId != nil {
		return *x.ProcssId
	}
	return 0
}

func (x *AgentCrashReport) GetByteVer() []byte {
	if x != nil {
		return x.ByteVer
	}
	return nil
}

func (x *AgentCrashReport) GetKernelNum() uint32 {
	if x != nil && x.KernelNum != nil {
		return *x.KernelNum
	}
	return 0
}

// for http
type MalwareScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       []byte  `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Guid       []byte  `protobuf:"bytes,2,req,name=guid" json:"guid,omitempty"`
	Quuid      []byte  `protobuf:"bytes,3,req,name=quuid" json:"quuid,omitempty"`
	StatusType *uint32 `protobuf:"varint,4,req,name=status_type,json=statusType" json:"status_type,omitempty"` // 1- start scan,   2 - scan finished
	ScanTime   *uint64 `protobuf:"varint,5,opt,name=scan_time,json=scanTime" json:"scan_time,omitempty"`       // unix time type为1是start time; 2是endtime
	FileCount  *uint64 `protobuf:"varint,6,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`    // scan file total count
}

func (x *MalwareScanStatus) Reset() {
	*x = MalwareScanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanStatus) ProtoMessage() {}

func (x *MalwareScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanStatus.ProtoReflect.Descriptor instead.
func (*MalwareScanStatus) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{36}
}

func (x *MalwareScanStatus) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *MalwareScanStatus) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *MalwareScanStatus) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *MalwareScanStatus) GetStatusType() uint32 {
	if x != nil && x.StatusType != nil {
		return *x.StatusType
	}
	return 0
}

func (x *MalwareScanStatus) GetScanTime() uint64 {
	if x != nil && x.ScanTime != nil {
		return *x.ScanTime
	}
	return 0
}

func (x *MalwareScanStatus) GetFileCount() uint64 {
	if x != nil && x.FileCount != nil {
		return *x.FileCount
	}
	return 0
}

type FileCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid     []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`               //GUID
	BytesUuid     []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`               //UUID
	BytesFilePath []byte `protobuf:"bytes,3,req,name=bytes_file_path,json=bytesFilePath" json:"bytes_file_path,omitempty"` //文件路径
}

func (x *FileCheckRequest) Reset() {
	*x = FileCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCheckRequest) ProtoMessage() {}

func (x *FileCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCheckRequest.ProtoReflect.Descriptor instead.
func (*FileCheckRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{37}
}

func (x *FileCheckRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *FileCheckRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *FileCheckRequest) GetBytesFilePath() []byte {
	if x != nil {
		return x.BytesFilePath
	}
	return nil
}

type FileCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesGuid     []byte `protobuf:"bytes,1,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`                //GUID
	BytesUuid     []byte `protobuf:"bytes,2,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`                //UUID
	BytesFilePath []byte `protobuf:"bytes,3,req,name=bytes_file_path,json=bytesFilePath" json:"bytes_file_path,omitempty"`  //文件路径
	Int32Exists   *int32 `protobuf:"varint,4,req,name=int32_exists,json=int32Exists" json:"int32_exists,omitempty"`         //是否存在
	Int64FileSize *int64 `protobuf:"varint,5,req,name=int64_file_size,json=int64FileSize" json:"int64_file_size,omitempty"` //文件大小
}

func (x *FileCheckResponse) Reset() {
	*x = FileCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCheckResponse) ProtoMessage() {}

func (x *FileCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCheckResponse.ProtoReflect.Descriptor instead.
func (*FileCheckResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{38}
}

func (x *FileCheckResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *FileCheckResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *FileCheckResponse) GetBytesFilePath() []byte {
	if x != nil {
		return x.BytesFilePath
	}
	return nil
}

func (x *FileCheckResponse) GetInt32Exists() int32 {
	if x != nil && x.Int32Exists != nil {
		return *x.Int32Exists
	}
	return 0
}

func (x *FileCheckResponse) GetInt64FileSize() int64 {
	if x != nil && x.Int64FileSize != nil {
		return *x.Int64FileSize
	}
	return 0
}

type WebServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte                  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte                  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte                  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ServerList []*WebServerInfo_Server `protobuf:"bytes,4,rep,name=server_list,json=serverList" json:"server_list,omitempty"`
}

func (x *WebServerInfo) Reset() {
	*x = WebServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServerInfo) ProtoMessage() {}

func (x *WebServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServerInfo.ProtoReflect.Descriptor instead.
func (*WebServerInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{39}
}

func (x *WebServerInfo) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *WebServerInfo) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *WebServerInfo) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *WebServerInfo) GetServerList() []*WebServerInfo_Server {
	if x != nil {
		return x.ServerList
	}
	return nil
}

type CrontabMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid   []byte                `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid   []byte                `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid  []byte                `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	CrontabList []*CrontabMsg_Crontab `protobuf:"bytes,4,rep,name=crontab_list,json=crontabList" json:"crontab_list,omitempty"`
}

func (x *CrontabMsg) Reset() {
	*x = CrontabMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabMsg) ProtoMessage() {}

func (x *CrontabMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabMsg.ProtoReflect.Descriptor instead.
func (*CrontabMsg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{40}
}

func (x *CrontabMsg) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *CrontabMsg) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *CrontabMsg) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *CrontabMsg) GetCrontabList() []*CrontabMsg_Crontab {
	if x != nil {
		return x.CrontabList
	}
	return nil
}

// 文件信息
type TamperProtectFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pathmd5     []byte                 `protobuf:"bytes,1,req,name=pathmd5" json:"pathmd5,omitempty"`                                                      //文件路径MD5
	Path        []byte                 `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`                                                            //文件路径
	Md5         []byte                 `protobuf:"bytes,3,req,name=md5" json:"md5,omitempty"`                                                              //文件MD5，目录取值空字符串
	Permissions []byte                 `protobuf:"bytes,4,req,name=permissions" json:"permissions,omitempty"`                                              //文件权限
	Ownership   []byte                 `protobuf:"bytes,5,req,name=ownership" json:"ownership,omitempty"`                                                  //文件归属
	FileType    *TamperProtectFileType `protobuf:"varint,6,req,name=file_type,json=fileType,enum=ydeyes.TamperProtectFileType" json:"file_type,omitempty"` //文件类型
}

func (x *TamperProtectFileInfo) Reset() {
	*x = TamperProtectFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectFileInfo) ProtoMessage() {}

func (x *TamperProtectFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectFileInfo.ProtoReflect.Descriptor instead.
func (*TamperProtectFileInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{41}
}

func (x *TamperProtectFileInfo) GetPathmd5() []byte {
	if x != nil {
		return x.Pathmd5
	}
	return nil
}

func (x *TamperProtectFileInfo) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TamperProtectFileInfo) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *TamperProtectFileInfo) GetPermissions() []byte {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *TamperProtectFileInfo) GetOwnership() []byte {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *TamperProtectFileInfo) GetFileType() TamperProtectFileType {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return TamperProtectFileType_TP_FILE_REGULAR
}

// 防篡改用户配置
type TamperProtectConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte               `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte               `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte               `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId         *uint64              `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`                          //配置标识
	BytesProtectPath []byte               `protobuf:"bytes,5,req,name=bytes_protect_path,json=bytesProtectPath" json:"bytes_protect_path,omitempty"` //需要防护的根目录
	FileTypesWhite   [][]byte             `protobuf:"bytes,6,rep,name=file_types_white,json=fileTypesWhite" json:"file_types_white,omitempty"`       //防护文件类型
	Status           *TamperProtectStatus `protobuf:"varint,7,req,name=status,enum=ydeyes.TamperProtectStatus" json:"status,omitempty"`              //防护状态
	AutoRecover      *uint32              `protobuf:"varint,8,req,name=auto_recover,json=autoRecover" json:"auto_recover,omitempty"`                 //文件被篡改自动恢复开关：0-未开启；1-已启动；客户端发现该自动从0变为1时要上报一次TamperProtectReportFilesRequest
	MaxFilesNumber   *uint32              `protobuf:"varint,9,req,name=max_files_number,json=maxFilesNumber" json:"max_files_number,omitempty"`      //总文件（包括普通文件、文件夹和软链）个数最大值
	MaxFileSize      *uint32              `protobuf:"varint,10,req,name=max_file_size,json=maxFileSize" json:"max_file_size,omitempty"`              //单文件体积最大值，单位byte
	MaxFilePathLen   *uint32              `protobuf:"varint,11,req,name=max_file_path_len,json=maxFilePathLen" json:"max_file_path_len,omitempty"`   //最大相对路径长度
}

func (x *TamperProtectConfigRequest) Reset() {
	*x = TamperProtectConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectConfigRequest) ProtoMessage() {}

func (x *TamperProtectConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectConfigRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectConfigRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{42}
}

func (x *TamperProtectConfigRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectConfigRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectConfigRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectConfigRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectConfigRequest) GetBytesProtectPath() []byte {
	if x != nil {
		return x.BytesProtectPath
	}
	return nil
}

func (x *TamperProtectConfigRequest) GetFileTypesWhite() [][]byte {
	if x != nil {
		return x.FileTypesWhite
	}
	return nil
}

func (x *TamperProtectConfigRequest) GetStatus() TamperProtectStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TamperProtectStatus_TP_STATUS_UNSTARTED
}

func (x *TamperProtectConfigRequest) GetAutoRecover() uint32 {
	if x != nil && x.AutoRecover != nil {
		return *x.AutoRecover
	}
	return 0
}

func (x *TamperProtectConfigRequest) GetMaxFilesNumber() uint32 {
	if x != nil && x.MaxFilesNumber != nil {
		return *x.MaxFilesNumber
	}
	return 0
}

func (x *TamperProtectConfigRequest) GetMaxFileSize() uint32 {
	if x != nil && x.MaxFileSize != nil {
		return *x.MaxFileSize
	}
	return 0
}

func (x *TamperProtectConfigRequest) GetMaxFilePathLen() uint32 {
	if x != nil && x.MaxFilePathLen != nil {
		return *x.MaxFilePathLen
	}
	return 0
}

type TamperProtectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
}

func (x *TamperProtectConfigResponse) Reset() {
	*x = TamperProtectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectConfigResponse) ProtoMessage() {}

func (x *TamperProtectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectConfigResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectConfigResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{43}
}

func (x *TamperProtectConfigResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectConfigResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectConfigResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectConfigResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

// 防篡改启动
type TamperProtectStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
}

func (x *TamperProtectStartRequest) Reset() {
	*x = TamperProtectStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectStartRequest) ProtoMessage() {}

func (x *TamperProtectStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectStartRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectStartRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{44}
}

func (x *TamperProtectStartRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectStartRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectStartRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectStartRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

type TamperProtectStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                   `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                   `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                   `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId         *uint64                  `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Exception        *TamperProtectException  `protobuf:"varint,5,req,name=exception,enum=ydeyes.TamperProtectException" json:"exception,omitempty"`   //异常
	ExceptionMessage []byte                   `protobuf:"bytes,6,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` //异常提示
	Files            []*TamperProtectFileInfo `protobuf:"bytes,7,rep,name=files" json:"files,omitempty"`                                               //待监控文件信息列表
}

func (x *TamperProtectStartResponse) Reset() {
	*x = TamperProtectStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectStartResponse) ProtoMessage() {}

func (x *TamperProtectStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectStartResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectStartResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{45}
}

func (x *TamperProtectStartResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectStartResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectStartResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectStartResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectStartResponse) GetException() TamperProtectException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return TamperProtectException_TP_EXP_NONE
}

func (x *TamperProtectStartResponse) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

func (x *TamperProtectStartResponse) GetFiles() []*TamperProtectFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

// 下发待备份文件列表
type TamperProtectBackupFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte                   `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte                   `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte                   `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64                  `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Files      []*TamperProtectFileInfo `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"` //待备份文件信息列表
}

func (x *TamperProtectBackupFilesRequest) Reset() {
	*x = TamperProtectBackupFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectBackupFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectBackupFilesRequest) ProtoMessage() {}

func (x *TamperProtectBackupFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectBackupFilesRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectBackupFilesRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{46}
}

func (x *TamperProtectBackupFilesRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectBackupFilesRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectBackupFilesRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectBackupFilesRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectBackupFilesRequest) GetFiles() []*TamperProtectFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type TamperProtectBackupFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
}

func (x *TamperProtectBackupFilesResponse) Reset() {
	*x = TamperProtectBackupFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectBackupFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectBackupFilesResponse) ProtoMessage() {}

func (x *TamperProtectBackupFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectBackupFilesResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectBackupFilesResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{47}
}

func (x *TamperProtectBackupFilesResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectBackupFilesResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectBackupFilesResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectBackupFilesResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

// 上传文件
type TamperProtectUpFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId         *uint64                 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	FileInfo         *TamperProtectFileInfo  `protobuf:"bytes,5,req,name=file_info,json=fileInfo" json:"file_info,omitempty"`                           //文件信息，覆盖TamperProtectStartResponse
	BytesFileContent []byte                  `protobuf:"bytes,6,req,name=bytes_file_content,json=bytesFileContent" json:"bytes_file_content,omitempty"` //文件内容
	Exception        *TamperProtectException `protobuf:"varint,7,req,name=exception,enum=ydeyes.TamperProtectException" json:"exception,omitempty"`     //异常
	ExceptionMessage []byte                  `protobuf:"bytes,8,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"`   //异常提示
}

func (x *TamperProtectUpFileRequest) Reset() {
	*x = TamperProtectUpFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectUpFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectUpFileRequest) ProtoMessage() {}

func (x *TamperProtectUpFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectUpFileRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectUpFileRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{48}
}

func (x *TamperProtectUpFileRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectUpFileRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectUpFileRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectUpFileRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectUpFileRequest) GetFileInfo() *TamperProtectFileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *TamperProtectUpFileRequest) GetBytesFileContent() []byte {
	if x != nil {
		return x.BytesFileContent
	}
	return nil
}

func (x *TamperProtectUpFileRequest) GetException() TamperProtectException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return TamperProtectException_TP_EXP_NONE
}

func (x *TamperProtectUpFileRequest) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

type TamperProtectUpFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Pathmd5    []byte  `protobuf:"bytes,5,req,name=pathmd5" json:"pathmd5,omitempty"` //文件路径MD5
}

func (x *TamperProtectUpFileResponse) Reset() {
	*x = TamperProtectUpFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectUpFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectUpFileResponse) ProtoMessage() {}

func (x *TamperProtectUpFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectUpFileResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectUpFileResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{49}
}

func (x *TamperProtectUpFileResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectUpFileResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectUpFileResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectUpFileResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectUpFileResponse) GetPathmd5() []byte {
	if x != nil {
		return x.Pathmd5
	}
	return nil
}

// 上报文件信息
type TamperProtectReportFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte                                                       `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte                                                       `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte                                                       `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64                                                      `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	FilesInfo  []*TamperProtectReportFilesRequest_FileToBeCompared          `protobuf:"bytes,5,rep,name=files_info,json=filesInfo" json:"files_info,omitempty"` //待比对文件信息列表
	ReportType *TamperProtectReportFilesRequest_TamperProtectFileReportType `protobuf:"varint,6,req,name=report_type,json=reportType,enum=ydeyes.TamperProtectReportFilesRequest_TamperProtectFileReportType" json:"report_type,omitempty"`
}

func (x *TamperProtectReportFilesRequest) Reset() {
	*x = TamperProtectReportFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectReportFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectReportFilesRequest) ProtoMessage() {}

func (x *TamperProtectReportFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectReportFilesRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectReportFilesRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{50}
}

func (x *TamperProtectReportFilesRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectReportFilesRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectReportFilesRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectReportFilesRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectReportFilesRequest) GetFilesInfo() []*TamperProtectReportFilesRequest_FileToBeCompared {
	if x != nil {
		return x.FilesInfo
	}
	return nil
}

func (x *TamperProtectReportFilesRequest) GetReportType() TamperProtectReportFilesRequest_TamperProtectFileReportType {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return TamperProtectReportFilesRequest_TP_REPORT_TYPE_FULL
}

type TamperProtectReportFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid    []byte                                                `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid    []byte                                                `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid   []byte                                                `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId     *uint64                                               `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	RecoverFiles []*TamperProtectReportFilesResponse_FileToBeRecovered `protobuf:"bytes,5,rep,name=recover_files,json=recoverFiles" json:"recover_files,omitempty"` //待恢复文件列表
}

func (x *TamperProtectReportFilesResponse) Reset() {
	*x = TamperProtectReportFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectReportFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectReportFilesResponse) ProtoMessage() {}

func (x *TamperProtectReportFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectReportFilesResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectReportFilesResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{51}
}

func (x *TamperProtectReportFilesResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectReportFilesResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectReportFilesResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectReportFilesResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectReportFilesResponse) GetRecoverFiles() []*TamperProtectReportFilesResponse_FileToBeRecovered {
	if x != nil {
		return x.RecoverFiles
	}
	return nil
}

// 下载文件
type TamperProtectDownFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Pathmd5    []byte  `protobuf:"bytes,5,req,name=pathmd5" json:"pathmd5,omitempty"` //文件路径MD5
}

func (x *TamperProtectDownFileRequest) Reset() {
	*x = TamperProtectDownFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectDownFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectDownFileRequest) ProtoMessage() {}

func (x *TamperProtectDownFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectDownFileRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectDownFileRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{52}
}

func (x *TamperProtectDownFileRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectDownFileRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectDownFileRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectDownFileRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectDownFileRequest) GetPathmd5() []byte {
	if x != nil {
		return x.Pathmd5
	}
	return nil
}

type TamperProtectDownFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                 `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                 `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                 `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId         *uint64                `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	FileInfo         *TamperProtectFileInfo `protobuf:"bytes,5,req,name=file_info,json=fileInfo" json:"file_info,omitempty"`                           //文件信息
	BytesFileContent []byte                 `protobuf:"bytes,6,req,name=bytes_file_content,json=bytesFileContent" json:"bytes_file_content,omitempty"` //文件内容
}

func (x *TamperProtectDownFileResponse) Reset() {
	*x = TamperProtectDownFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectDownFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectDownFileResponse) ProtoMessage() {}

func (x *TamperProtectDownFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectDownFileResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectDownFileResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{53}
}

func (x *TamperProtectDownFileResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectDownFileResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectDownFileResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectDownFileResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectDownFileResponse) GetFileInfo() *TamperProtectFileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *TamperProtectDownFileResponse) GetBytesFileContent() []byte {
	if x != nil {
		return x.BytesFileContent
	}
	return nil
}

// 恢复文件结果上报
type TamperProtectRecoverResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                    `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                    `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                    `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId         *uint64                   `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Pathmd5          []byte                    `protobuf:"bytes,5,req,name=pathmd5" json:"pathmd5,omitempty"`                                            //文件路径MD5
	Path             []byte                    `protobuf:"bytes,6,req,name=path" json:"path,omitempty"`                                                  //文件路径
	Md5Modified      []byte                    `protobuf:"bytes,7,req,name=md5_modified,json=md5Modified" json:"md5_modified,omitempty"`                 //被篡改后的文件MD5，目录取值空字符串
	Md5              []byte                    `protobuf:"bytes,8,req,name=md5" json:"md5,omitempty"`                                                    //恢复后的文件MD5，目录取值空字符串
	Type             *TamperProtectRecoverType `protobuf:"varint,9,req,name=type,enum=ydeyes.TamperProtectRecoverType" json:"type,omitempty"`            //恢复类型
	Exception        *TamperProtectException   `protobuf:"varint,10,req,name=exception,enum=ydeyes.TamperProtectException" json:"exception,omitempty"`   //异常
	ExceptionMessage []byte                    `protobuf:"bytes,11,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` //异常提示
}

func (x *TamperProtectRecoverResultRequest) Reset() {
	*x = TamperProtectRecoverResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectRecoverResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectRecoverResultRequest) ProtoMessage() {}

func (x *TamperProtectRecoverResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectRecoverResultRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectRecoverResultRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{54}
}

func (x *TamperProtectRecoverResultRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectRecoverResultRequest) GetPathmd5() []byte {
	if x != nil {
		return x.Pathmd5
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetMd5Modified() []byte {
	if x != nil {
		return x.Md5Modified
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *TamperProtectRecoverResultRequest) GetType() TamperProtectRecoverType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamperProtectRecoverType_TP_RECOVER_CONTENT_RECOVER
}

func (x *TamperProtectRecoverResultRequest) GetException() TamperProtectException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return TamperProtectException_TP_EXP_NONE
}

func (x *TamperProtectRecoverResultRequest) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

type TamperProtectRecoverResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
	Pathmd5    []byte  `protobuf:"bytes,5,req,name=pathmd5" json:"pathmd5,omitempty"` //文件路径MD5
}

func (x *TamperProtectRecoverResultResponse) Reset() {
	*x = TamperProtectRecoverResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectRecoverResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectRecoverResultResponse) ProtoMessage() {}

func (x *TamperProtectRecoverResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectRecoverResultResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectRecoverResultResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{55}
}

func (x *TamperProtectRecoverResultResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectRecoverResultResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectRecoverResultResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectRecoverResultResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *TamperProtectRecoverResultResponse) GetPathmd5() []byte {
	if x != nil {
		return x.Pathmd5
	}
	return nil
}

// 防篡改关闭
type TamperProtectStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
}

func (x *TamperProtectStopRequest) Reset() {
	*x = TamperProtectStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectStopRequest) ProtoMessage() {}

func (x *TamperProtectStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectStopRequest.ProtoReflect.Descriptor instead.
func (*TamperProtectStopRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{56}
}

func (x *TamperProtectStopRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectStopRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectStopRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectStopRequest) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

type TamperProtectStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	ConfigId   *uint64 `protobuf:"varint,4,req,name=config_id,json=configId" json:"config_id,omitempty"`
}

func (x *TamperProtectStopResponse) Reset() {
	*x = TamperProtectStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectStopResponse) ProtoMessage() {}

func (x *TamperProtectStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectStopResponse.ProtoReflect.Descriptor instead.
func (*TamperProtectStopResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{57}
}

func (x *TamperProtectStopResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TamperProtectStopResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *TamperProtectStopResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TamperProtectStopResponse) GetConfigId() uint64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

//EDR数据通用消息，具体的采集数据是一个JSON
type FastMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte           `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid []byte           `protobuf:"bytes,2,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	MsgType    *FastMsg_MsgType `protobuf:"varint,3,req,name=msg_type,json=msgType,enum=ydeyes.FastMsg_MsgType,def=1" json:"msg_type,omitempty"`
	MsgId      *uint32          `protobuf:"varint,4,req,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Version    *uint32          `protobuf:"varint,5,req,name=version" json:"version,omitempty"`
	Result     []byte           `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
}

// Default values for FastMsg fields.
const (
	Default_FastMsg_MsgType = FastMsg_JSON
)

func (x *FastMsg) Reset() {
	*x = FastMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastMsg) ProtoMessage() {}

func (x *FastMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastMsg.ProtoReflect.Descriptor instead.
func (*FastMsg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{58}
}

func (x *FastMsg) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *FastMsg) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *FastMsg) GetMsgType() FastMsg_MsgType {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return Default_FastMsg_MsgType
}

func (x *FastMsg) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *FastMsg) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *FastMsg) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

// 下发扫描请求
type VulnerDetectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid    []byte                          `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid    []byte                          `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid   []byte                          `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Root         []byte                          `protobuf:"bytes,4,req,name=root" json:"root,omitempty"`                                       // 生成至 /usr/local/qcloud/YunJing/ 下的目录名
	BinPath      []byte                          `protobuf:"bytes,5,req,name=bin_path,json=binPath" json:"bin_path,omitempty"`                  // 相对 root 目录的可执行文件路径
	Cmdline      []byte                          `protobuf:"bytes,6,req,name=cmdline" json:"cmdline,omitempty"`                                 // 传给 bin_path 的二进制参数
	Timeout      *uint32                         `protobuf:"varint,7,req,name=timeout" json:"timeout,omitempty"`                                // 超时时间
	CompInfoList []*VulnerDetectRequest_CompInfo `protobuf:"bytes,8,rep,name=comp_info_list,json=compInfoList" json:"comp_info_list,omitempty"` // 组件列表
	TaskId       *uint64                         `protobuf:"varint,9,req,name=task_id,json=taskId" json:"task_id,omitempty"`                    // 任务id
	MemLimit     *uint32                         `protobuf:"varint,10,opt,name=mem_limit,json=memLimit" json:"mem_limit,omitempty"`             //内存限制值(M)
}

func (x *VulnerDetectRequest) Reset() {
	*x = VulnerDetectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectRequest) ProtoMessage() {}

func (x *VulnerDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectRequest.ProtoReflect.Descriptor instead.
func (*VulnerDetectRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{59}
}

func (x *VulnerDetectRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *VulnerDetectRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *VulnerDetectRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *VulnerDetectRequest) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *VulnerDetectRequest) GetBinPath() []byte {
	if x != nil {
		return x.BinPath
	}
	return nil
}

func (x *VulnerDetectRequest) GetCmdline() []byte {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *VulnerDetectRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *VulnerDetectRequest) GetCompInfoList() []*VulnerDetectRequest_CompInfo {
	if x != nil {
		return x.CompInfoList
	}
	return nil
}

func (x *VulnerDetectRequest) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *VulnerDetectRequest) GetMemLimit() uint32 {
	if x != nil && x.MemLimit != nil {
		return *x.MemLimit
	}
	return 0
}

// 下发扫描响应（用于重试确认）
type VulnerDetectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId     *uint64 `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"` // 任务id
}

func (x *VulnerDetectResponse) Reset() {
	*x = VulnerDetectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectResponse) ProtoMessage() {}

func (x *VulnerDetectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectResponse.ProtoReflect.Descriptor instead.
func (*VulnerDetectResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{60}
}

func (x *VulnerDetectResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *VulnerDetectResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *VulnerDetectResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *VulnerDetectResponse) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

// 上报扫描结果
type VulnerDetectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Status           *uint64 `protobuf:"varint,4,req,name=status" json:"status,omitempty"`                                            // 0: 成功,  > 0： 表示具体的错误码
	ExceptionMessage []byte  `protobuf:"bytes,5,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` // 异常提示
	StartTime        *uint64 `protobuf:"varint,6,req,name=start_time,json=startTime" json:"start_time,omitempty"`
	StopTime         *uint64 `protobuf:"varint,7,req,name=stop_time,json=stopTime" json:"stop_time,omitempty"`
	ResultContent    []byte  `protobuf:"bytes,8,req,name=result_content,json=resultContent" json:"result_content,omitempty"` // 任务执行数据，实际读取 task_result 文件
	StatContent      []byte  `protobuf:"bytes,9,req,name=stat_content,json=statContent" json:"stat_content,omitempty"`       // 任务统计(质量)数据，实际读取 task_stat 文件
	TaskId           *uint64 `protobuf:"varint,10,req,name=task_id,json=taskId" json:"task_id,omitempty"`                    // 任务id
}

func (x *VulnerDetectMessage) Reset() {
	*x = VulnerDetectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectMessage) ProtoMessage() {}

func (x *VulnerDetectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectMessage.ProtoReflect.Descriptor instead.
func (*VulnerDetectMessage) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{61}
}

func (x *VulnerDetectMessage) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *VulnerDetectMessage) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *VulnerDetectMessage) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *VulnerDetectMessage) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *VulnerDetectMessage) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

func (x *VulnerDetectMessage) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *VulnerDetectMessage) GetStopTime() uint64 {
	if x != nil && x.StopTime != nil {
		return *x.StopTime
	}
	return 0
}

func (x *VulnerDetectMessage) GetResultContent() []byte {
	if x != nil {
		return x.ResultContent
	}
	return nil
}

func (x *VulnerDetectMessage) GetStatContent() []byte {
	if x != nil {
		return x.StatContent
	}
	return nil
}

func (x *VulnerDetectMessage) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

//0x04终止扫描请求
type VulnerDetectStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId     *uint64 `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"` //任务id
}

func (x *VulnerDetectStopRequest) Reset() {
	*x = VulnerDetectStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectStopRequest) ProtoMessage() {}

func (x *VulnerDetectStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectStopRequest.ProtoReflect.Descriptor instead.
func (*VulnerDetectStopRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{62}
}

func (x *VulnerDetectStopRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *VulnerDetectStopRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *VulnerDetectStopRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *VulnerDetectStopRequest) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

//0x05终止扫描结果响应
type VulnerDetectStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                 `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                 `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                 `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId           *uint64                `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"`                              //任务id
	Exception        *VulnerDetectException `protobuf:"varint,5,req,name=exception,enum=ydeyes.VulnerDetectException" json:"exception,omitempty"`    //异常，为0（无异常）表示正常终止
	ExceptionMessage []byte                 `protobuf:"bytes,6,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` //异常提示
}

func (x *VulnerDetectStopResponse) Reset() {
	*x = VulnerDetectStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectStopResponse) ProtoMessage() {}

func (x *VulnerDetectStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectStopResponse.ProtoReflect.Descriptor instead.
func (*VulnerDetectStopResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{63}
}

func (x *VulnerDetectStopResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *VulnerDetectStopResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *VulnerDetectStopResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *VulnerDetectStopResponse) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *VulnerDetectStopResponse) GetException() VulnerDetectException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return VulnerDetectException_VD_EXP_SUCCESS
}

func (x *VulnerDetectStopResponse) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

// 下发扫描请求
type BaselineDetectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid    []byte                            `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid    []byte                            `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid   []byte                            `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Root         []byte                            `protobuf:"bytes,4,req,name=root" json:"root,omitempty"`                                       // 生成至 /usr/local/qcloud/YunJing/ 下的目录名
	BinPath      []byte                            `protobuf:"bytes,5,req,name=bin_path,json=binPath" json:"bin_path,omitempty"`                  // 相对 root 目录的可执行文件路径
	Cmdline      []byte                            `protobuf:"bytes,6,req,name=cmdline" json:"cmdline,omitempty"`                                 // 传给 bin_path 的二进制参数
	Timeout      *uint32                           `protobuf:"varint,7,req,name=timeout" json:"timeout,omitempty"`                                // 超时时间
	CompInfoList []*BaselineDetectRequest_CompInfo `protobuf:"bytes,8,rep,name=comp_info_list,json=compInfoList" json:"comp_info_list,omitempty"` // 组件列表
	TaskId       *uint64                           `protobuf:"varint,9,req,name=task_id,json=taskId" json:"task_id,omitempty"`                    // 任务id
}

func (x *BaselineDetectRequest) Reset() {
	*x = BaselineDetectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaselineDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaselineDetectRequest) ProtoMessage() {}

func (x *BaselineDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaselineDetectRequest.ProtoReflect.Descriptor instead.
func (*BaselineDetectRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{64}
}

func (x *BaselineDetectRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *BaselineDetectRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *BaselineDetectRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *BaselineDetectRequest) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *BaselineDetectRequest) GetBinPath() []byte {
	if x != nil {
		return x.BinPath
	}
	return nil
}

func (x *BaselineDetectRequest) GetCmdline() []byte {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *BaselineDetectRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *BaselineDetectRequest) GetCompInfoList() []*BaselineDetectRequest_CompInfo {
	if x != nil {
		return x.CompInfoList
	}
	return nil
}

func (x *BaselineDetectRequest) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

// 下发扫描响应（用于重试确认）
type BaselineDetectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId     *uint64 `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"` // 任务id
}

func (x *BaselineDetectResponse) Reset() {
	*x = BaselineDetectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaselineDetectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaselineDetectResponse) ProtoMessage() {}

func (x *BaselineDetectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaselineDetectResponse.ProtoReflect.Descriptor instead.
func (*BaselineDetectResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{65}
}

func (x *BaselineDetectResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *BaselineDetectResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *BaselineDetectResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *BaselineDetectResponse) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

// 上报扫描结果
type BaselineDetectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Status           *uint64 `protobuf:"varint,4,req,name=status" json:"status,omitempty"`                                            // 0: 成功,  > 0： 表示具体的错误码
	ExceptionMessage []byte  `protobuf:"bytes,5,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` // 异常提示
	StartTime        *uint64 `protobuf:"varint,6,req,name=start_time,json=startTime" json:"start_time,omitempty"`
	StopTime         *uint64 `protobuf:"varint,7,req,name=stop_time,json=stopTime" json:"stop_time,omitempty"`
	ResultContent    []byte  `protobuf:"bytes,8,req,name=result_content,json=resultContent" json:"result_content,omitempty"` // 任务执行数据，实际读取 task_result 文件
	StatContent      []byte  `protobuf:"bytes,9,req,name=stat_content,json=statContent" json:"stat_content,omitempty"`       // 任务统计(质量)数据，实际读取 task_stat 文件
	TaskId           *uint64 `protobuf:"varint,10,req,name=task_id,json=taskId" json:"task_id,omitempty"`                    // 任务id
}

func (x *BaselineDetectMessage) Reset() {
	*x = BaselineDetectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaselineDetectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaselineDetectMessage) ProtoMessage() {}

func (x *BaselineDetectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaselineDetectMessage.ProtoReflect.Descriptor instead.
func (*BaselineDetectMessage) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{66}
}

func (x *BaselineDetectMessage) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *BaselineDetectMessage) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *BaselineDetectMessage) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *BaselineDetectMessage) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BaselineDetectMessage) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

func (x *BaselineDetectMessage) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *BaselineDetectMessage) GetStopTime() uint64 {
	if x != nil && x.StopTime != nil {
		return *x.StopTime
	}
	return 0
}

func (x *BaselineDetectMessage) GetResultContent() []byte {
	if x != nil {
		return x.ResultContent
	}
	return nil
}

func (x *BaselineDetectMessage) GetStatContent() []byte {
	if x != nil {
		return x.StatContent
	}
	return nil
}

func (x *BaselineDetectMessage) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

//包含目录和排除目录（扫描或监控）
type MalwarePathes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludePathesLinux [][]byte `protobuf:"bytes,1,rep,name=include_pathes_linux,json=includePathesLinux" json:"include_pathes_linux,omitempty"` //Linux包含目录列表
	ExcludePathesLinux [][]byte `protobuf:"bytes,2,rep,name=exclude_pathes_linux,json=excludePathesLinux" json:"exclude_pathes_linux,omitempty"` //Linux排除目录列表
	IncludePathesWin   [][]byte `protobuf:"bytes,3,rep,name=include_pathes_win,json=includePathesWin" json:"include_pathes_win,omitempty"`       //Windows包含目录列表
	ExcludePathesWin   [][]byte `protobuf:"bytes,4,rep,name=exclude_pathes_win,json=excludePathesWin" json:"exclude_pathes_win,omitempty"`       //Windows排除目录列表
}

func (x *MalwarePathes) Reset() {
	*x = MalwarePathes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwarePathes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwarePathes) ProtoMessage() {}

func (x *MalwarePathes) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwarePathes.ProtoReflect.Descriptor instead.
func (*MalwarePathes) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{67}
}

func (x *MalwarePathes) GetIncludePathesLinux() [][]byte {
	if x != nil {
		return x.IncludePathesLinux
	}
	return nil
}

func (x *MalwarePathes) GetExcludePathesLinux() [][]byte {
	if x != nil {
		return x.ExcludePathesLinux
	}
	return nil
}

func (x *MalwarePathes) GetIncludePathesWin() [][]byte {
	if x != nil {
		return x.IncludePathesWin
	}
	return nil
}

func (x *MalwarePathes) GetExcludePathesWin() [][]byte {
	if x != nil {
		return x.ExcludePathesWin
	}
	return nil
}

//0x01扫描请求
type MalwareScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid      []byte           `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid      []byte           `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid     []byte           `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId         *uint64          `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"`                         //任务id
	Type           *MalwareScanType `protobuf:"varint,5,req,name=type,enum=ydeyes.MalwareScanType" json:"type,omitempty"`               //扫描模式
	Pathes         *MalwarePathes   `protobuf:"bytes,6,req,name=pathes" json:"pathes,omitempty"`                                        //监控目录和忽略目录
	Timeout        *uint32          `protobuf:"varint,7,req,name=timeout" json:"timeout,omitempty"`                                     //最大扫描时间，单位秒
	ReportInterval *uint32          `protobuf:"varint,8,opt,name=report_interval,json=reportInterval" json:"report_interval,omitempty"` //扫描文件上报间隔，单位毫秒
}

func (x *MalwareScanRequest) Reset() {
	*x = MalwareScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanRequest) ProtoMessage() {}

func (x *MalwareScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanRequest.ProtoReflect.Descriptor instead.
func (*MalwareScanRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{68}
}

func (x *MalwareScanRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareScanRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareScanRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareScanRequest) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *MalwareScanRequest) GetType() MalwareScanType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MalwareScanType_MS_TYPE_FULL
}

func (x *MalwareScanRequest) GetPathes() *MalwarePathes {
	if x != nil {
		return x.Pathes
	}
	return nil
}

func (x *MalwareScanRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *MalwareScanRequest) GetReportInterval() uint32 {
	if x != nil && x.ReportInterval != nil {
		return *x.ReportInterval
	}
	return 0
}

//0x02确认收到扫描请求
type MalwareScanAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId     *uint64 `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"` //任务id
}

func (x *MalwareScanAck) Reset() {
	*x = MalwareScanAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanAck) ProtoMessage() {}

func (x *MalwareScanAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanAck.ProtoReflect.Descriptor instead.
func (*MalwareScanAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{69}
}

func (x *MalwareScanAck) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareScanAck) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareScanAck) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareScanAck) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

//0x03扫描结果响应
type MalwareScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid            []byte                `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid            []byte                `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid           []byte                `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId               *uint64               `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"`                                                       //任务id
	Exception            *MalwareScanException `protobuf:"varint,5,req,name=exception,enum=ydeyes.MalwareScanException" json:"exception,omitempty"`                              //异常，为0（无异常）表示扫描结束
	ExceptionMessage     []byte                `protobuf:"bytes,6,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"`                          //异常提示
	UsedTimeS            *uint32               `protobuf:"varint,7,opt,name=used_time_s,json=usedTimeS" json:"used_time_s,omitempty"`                                            // 扫描任务总耗时，单位秒
	FastUsedTimeS        *uint32               `protobuf:"varint,8,opt,name=fast_used_time_s,json=fastUsedTimeS" json:"fast_used_time_s,omitempty"`                              // 快速扫描总耗时，单位秒
	FastException        *MalwareScanException `protobuf:"varint,9,opt,name=fast_exception,json=fastException,enum=ydeyes.MalwareScanException" json:"fast_exception,omitempty"` //异常，为0（无异常）表示扫描结束，用于快速扫描
	FastExceptionMessage []byte                `protobuf:"bytes,10,opt,name=fast_exception_message,json=fastExceptionMessage" json:"fast_exception_message,omitempty"`           //异常提示，用于快速扫描
}

func (x *MalwareScanResponse) Reset() {
	*x = MalwareScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanResponse) ProtoMessage() {}

func (x *MalwareScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanResponse.ProtoReflect.Descriptor instead.
func (*MalwareScanResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{70}
}

func (x *MalwareScanResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareScanResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareScanResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareScanResponse) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *MalwareScanResponse) GetException() MalwareScanException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return MalwareScanException_MS_EXP_SUCCESS
}

func (x *MalwareScanResponse) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

func (x *MalwareScanResponse) GetUsedTimeS() uint32 {
	if x != nil && x.UsedTimeS != nil {
		return *x.UsedTimeS
	}
	return 0
}

func (x *MalwareScanResponse) GetFastUsedTimeS() uint32 {
	if x != nil && x.FastUsedTimeS != nil {
		return *x.FastUsedTimeS
	}
	return 0
}

func (x *MalwareScanResponse) GetFastException() MalwareScanException {
	if x != nil && x.FastException != nil {
		return *x.FastException
	}
	return MalwareScanException_MS_EXP_SUCCESS
}

func (x *MalwareScanResponse) GetFastExceptionMessage() []byte {
	if x != nil {
		return x.FastExceptionMessage
	}
	return nil
}

//0x04终止扫描请求
type MalwareScanStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte  `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte  `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte  `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId     *uint64 `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"` //任务id
}

func (x *MalwareScanStopRequest) Reset() {
	*x = MalwareScanStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanStopRequest) ProtoMessage() {}

func (x *MalwareScanStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanStopRequest.ProtoReflect.Descriptor instead.
func (*MalwareScanStopRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{71}
}

func (x *MalwareScanStopRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareScanStopRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareScanStopRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareScanStopRequest) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

//0x05终止扫描结果响应
type MalwareScanStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid        []byte                `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid        []byte                `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid       []byte                `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	TaskId           *uint64               `protobuf:"varint,4,req,name=task_id,json=taskId" json:"task_id,omitempty"`                              //任务id
	Exception        *MalwareScanException `protobuf:"varint,5,req,name=exception,enum=ydeyes.MalwareScanException" json:"exception,omitempty"`     //异常，为0（无异常）表示正常终止
	ExceptionMessage []byte                `protobuf:"bytes,6,req,name=exception_message,json=exceptionMessage" json:"exception_message,omitempty"` //异常提示
}

func (x *MalwareScanStopResponse) Reset() {
	*x = MalwareScanStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareScanStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareScanStopResponse) ProtoMessage() {}

func (x *MalwareScanStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareScanStopResponse.ProtoReflect.Descriptor instead.
func (*MalwareScanStopResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{72}
}

func (x *MalwareScanStopResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareScanStopResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareScanStopResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareScanStopResponse) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *MalwareScanStopResponse) GetException() MalwareScanException {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return MalwareScanException_MS_EXP_SUCCESS
}

func (x *MalwareScanStopResponse) GetExceptionMessage() []byte {
	if x != nil {
		return x.ExceptionMessage
	}
	return nil
}

//0x06通知客户端变更监控请求
type MalwareMonitorPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid     []byte              `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid     []byte              `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid    []byte              `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	EnableMonitor *bool               `protobuf:"varint,4,req,name=enable_monitor,json=enableMonitor" json:"enable_monitor,omitempty"` //是否开启实时监控
	Type          *MalwareMonitorType `protobuf:"varint,5,req,name=type,enum=ydeyes.MalwareMonitorType" json:"type,omitempty"`         //监控模式
	Pathes        *MalwarePathes      `protobuf:"bytes,6,req,name=pathes" json:"pathes,omitempty"`                                     //监控目录和忽略目录
}

func (x *MalwareMonitorPushRequest) Reset() {
	*x = MalwareMonitorPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareMonitorPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareMonitorPushRequest) ProtoMessage() {}

func (x *MalwareMonitorPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareMonitorPushRequest.ProtoReflect.Descriptor instead.
func (*MalwareMonitorPushRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{73}
}

func (x *MalwareMonitorPushRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareMonitorPushRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareMonitorPushRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareMonitorPushRequest) GetEnableMonitor() bool {
	if x != nil && x.EnableMonitor != nil {
		return *x.EnableMonitor
	}
	return false
}

func (x *MalwareMonitorPushRequest) GetType() MalwareMonitorType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MalwareMonitorType_MS_TYPE_STANDARD
}

func (x *MalwareMonitorPushRequest) GetPathes() *MalwarePathes {
	if x != nil {
		return x.Pathes
	}
	return nil
}

//0x07通知客户端变更监控响应
type MalwareMonitorPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
}

func (x *MalwareMonitorPushResponse) Reset() {
	*x = MalwareMonitorPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareMonitorPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareMonitorPushResponse) ProtoMessage() {}

func (x *MalwareMonitorPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareMonitorPushResponse.ProtoReflect.Descriptor instead.
func (*MalwareMonitorPushResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{74}
}

func (x *MalwareMonitorPushResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareMonitorPushResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareMonitorPushResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

//0x08客户端拉取监控配置请求
type MalwareMonitorPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid  []byte `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid []byte `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
}

func (x *MalwareMonitorPullRequest) Reset() {
	*x = MalwareMonitorPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareMonitorPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareMonitorPullRequest) ProtoMessage() {}

func (x *MalwareMonitorPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareMonitorPullRequest.ProtoReflect.Descriptor instead.
func (*MalwareMonitorPullRequest) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{75}
}

func (x *MalwareMonitorPullRequest) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareMonitorPullRequest) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareMonitorPullRequest) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

//0x09客户端拉取监控配置响应
type MalwareMonitorPullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid     []byte              `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesGuid     []byte              `protobuf:"bytes,2,req,name=bytes_guid,json=bytesGuid" json:"bytes_guid,omitempty"`
	BytesQuuid    []byte              `protobuf:"bytes,3,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	EnableMonitor *bool               `protobuf:"varint,4,req,name=enable_monitor,json=enableMonitor" json:"enable_monitor,omitempty"` //是否开启实时监控
	Type          *MalwareMonitorType `protobuf:"varint,5,req,name=type,enum=ydeyes.MalwareMonitorType" json:"type,omitempty"`         //监控模式
	Pathes        *MalwarePathes      `protobuf:"bytes,6,req,name=pathes" json:"pathes,omitempty"`                                     //监控目录和忽略目录
}

func (x *MalwareMonitorPullResponse) Reset() {
	*x = MalwareMonitorPullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareMonitorPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareMonitorPullResponse) ProtoMessage() {}

func (x *MalwareMonitorPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareMonitorPullResponse.ProtoReflect.Descriptor instead.
func (*MalwareMonitorPullResponse) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{76}
}

func (x *MalwareMonitorPullResponse) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *MalwareMonitorPullResponse) GetBytesGuid() []byte {
	if x != nil {
		return x.BytesGuid
	}
	return nil
}

func (x *MalwareMonitorPullResponse) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *MalwareMonitorPullResponse) GetEnableMonitor() bool {
	if x != nil && x.EnableMonitor != nil {
		return *x.EnableMonitor
	}
	return false
}

func (x *MalwareMonitorPullResponse) GetType() MalwareMonitorType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MalwareMonitorType_MS_TYPE_STANDARD
}

func (x *MalwareMonitorPullResponse) GetPathes() *MalwarePathes {
	if x != nil {
		return x.Pathes
	}
	return nil
}

// 任务下发
type TcsTaskComm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesUuid  []byte `protobuf:"bytes,1,req,name=bytes_uuid,json=bytesUuid" json:"bytes_uuid,omitempty"`
	BytesQuuid []byte `protobuf:"bytes,2,req,name=bytes_quuid,json=bytesQuuid" json:"bytes_quuid,omitempty"`
	Taskid     []byte `protobuf:"bytes,3,req,name=taskid" json:"taskid,omitempty"`
}

func (x *TcsTaskComm) Reset() {
	*x = TcsTaskComm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsTaskComm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsTaskComm) ProtoMessage() {}

func (x *TcsTaskComm) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsTaskComm.ProtoReflect.Descriptor instead.
func (*TcsTaskComm) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{77}
}

func (x *TcsTaskComm) GetBytesUuid() []byte {
	if x != nil {
		return x.BytesUuid
	}
	return nil
}

func (x *TcsTaskComm) GetBytesQuuid() []byte {
	if x != nil {
		return x.BytesQuuid
	}
	return nil
}

func (x *TcsTaskComm) GetTaskid() []byte {
	if x != nil {
		return x.Taskid
	}
	return nil
}

// s->c 服务端发起镜像扫描任务
type TcsScanImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm     *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Imageid  []byte       `protobuf:"bytes,2,req,name=imageid" json:"imageid,omitempty"`
	Timeout  *uint32      `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`   // scan timeout seconds
	Excludes [][]byte     `protobuf:"bytes,4,rep,name=excludes" json:"excludes,omitempty"`  // exclude path
	Interval *uint32      `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"` // 扫描文件间隔(默认100，单位ms)
}

func (x *TcsScanImage) Reset() {
	*x = TcsScanImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanImage) ProtoMessage() {}

func (x *TcsScanImage) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanImage.ProtoReflect.Descriptor instead.
func (*TcsScanImage) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{78}
}

func (x *TcsScanImage) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsScanImage) GetImageid() []byte {
	if x != nil {
		return x.Imageid
	}
	return nil
}

func (x *TcsScanImage) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *TcsScanImage) GetExcludes() [][]byte {
	if x != nil {
		return x.Excludes
	}
	return nil
}

func (x *TcsScanImage) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

// s->c 取消扫描任务
type TcsScanImageCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
}

func (x *TcsScanImageCancel) Reset() {
	*x = TcsScanImageCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanImageCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanImageCancel) ProtoMessage() {}

func (x *TcsScanImageCancel) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanImageCancel.ProtoReflect.Descriptor instead.
func (*TcsScanImageCancel) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{79}
}

func (x *TcsScanImageCancel) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

// c->s 客户端接收扫描任务成功，发送ack
type TcsScanImageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm    *TcsTaskComm               `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Ack     *TcsScanImageAck_TcsStatus `protobuf:"varint,2,req,name=ack,enum=ydeyes.TcsScanImageAck_TcsStatus" json:"ack,omitempty"`
	Message []byte                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *TcsScanImageAck) Reset() {
	*x = TcsScanImageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanImageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanImageAck) ProtoMessage() {}

func (x *TcsScanImageAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanImageAck.ProtoReflect.Descriptor instead.
func (*TcsScanImageAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{80}
}

func (x *TcsScanImageAck) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsScanImageAck) GetAck() TcsScanImageAck_TcsStatus {
	if x != nil && x.Ack != nil {
		return *x.Ack
	}
	return TcsScanImageAck_NotFound
}

func (x *TcsScanImageAck) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

// c->s 客户端上报文件hash
type TcsReportHashs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm     *TcsTaskComm              `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	ReportId *uint32                   `protobuf:"varint,2,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	Files    []*TcsReportHashs_TcsHash `protobuf:"bytes,3,rep,name=files" json:"files,omitempty"`
}

func (x *TcsReportHashs) Reset() {
	*x = TcsReportHashs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportHashs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportHashs) ProtoMessage() {}

func (x *TcsReportHashs) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportHashs.ProtoReflect.Descriptor instead.
func (*TcsReportHashs) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{81}
}

func (x *TcsReportHashs) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsReportHashs) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsReportHashs) GetFiles() []*TcsReportHashs_TcsHash {
	if x != nil {
		return x.Files
	}
	return nil
}

// s->c 上报完成服务端确认ack
type TcsReportHashsAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm                *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	ReportId            *uint32      `protobuf:"varint,2,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	RequireContentPaths []string     `protobuf:"bytes,3,rep,name=require_content_paths,json=requireContentPaths" json:"require_content_paths,omitempty"` // 需要上报内容的路径列表
}

func (x *TcsReportHashsAck) Reset() {
	*x = TcsReportHashsAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportHashsAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportHashsAck) ProtoMessage() {}

func (x *TcsReportHashsAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportHashsAck.ProtoReflect.Descriptor instead.
func (*TcsReportHashsAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{82}
}

func (x *TcsReportHashsAck) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsReportHashsAck) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsReportHashsAck) GetRequireContentPaths() []string {
	if x != nil {
		return x.RequireContentPaths
	}
	return nil
}

// c->s 客户端上报文件内容
type TcsReportFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm     *TcsTaskComm              `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	ReportId *uint32                   `protobuf:"varint,2,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	Files    []*TcsReportFiles_TcsFile `protobuf:"bytes,3,rep,name=files" json:"files,omitempty"`
}

func (x *TcsReportFiles) Reset() {
	*x = TcsReportFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportFiles) ProtoMessage() {}

func (x *TcsReportFiles) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportFiles.ProtoReflect.Descriptor instead.
func (*TcsReportFiles) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{83}
}

func (x *TcsReportFiles) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsReportFiles) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsReportFiles) GetFiles() []*TcsReportFiles_TcsFile {
	if x != nil {
		return x.Files
	}
	return nil
}

// s->c 上报文件成功，服务端确认ack
type TcsReportFilesAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm     *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	ReportId *uint32      `protobuf:"varint,2,req,name=report_id,json=reportId" json:"report_id,omitempty"`
}

func (x *TcsReportFilesAck) Reset() {
	*x = TcsReportFilesAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportFilesAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportFilesAck) ProtoMessage() {}

func (x *TcsReportFilesAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportFilesAck.ProtoReflect.Descriptor instead.
func (*TcsReportFilesAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{84}
}

func (x *TcsReportFilesAck) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsReportFilesAck) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

// c->s agent查询策略
// agent启动时: 查询主机所有imageid
// 主机新镜像pulled: 查询新增imageid策略
type TcsImageQueryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imageids [][]byte `protobuf:"bytes,1,rep,name=imageids" json:"imageids,omitempty"`
	QueryId  *uint32  `protobuf:"varint,2,req,name=query_id,json=queryId" json:"query_id,omitempty"`
}

func (x *TcsImageQueryPolicy) Reset() {
	*x = TcsImageQueryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsImageQueryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsImageQueryPolicy) ProtoMessage() {}

func (x *TcsImageQueryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsImageQueryPolicy.ProtoReflect.Descriptor instead.
func (*TcsImageQueryPolicy) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{85}
}

func (x *TcsImageQueryPolicy) GetImageids() [][]byte {
	if x != nil {
		return x.Imageids
	}
	return nil
}

func (x *TcsImageQueryPolicy) GetQueryId() uint32 {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return 0
}

type TcsProcmonRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Process *string    `protobuf:"bytes,2,req,name=process" json:"process,omitempty"`                      // 进程
	Action  *TcsAction `protobuf:"varint,3,req,name=action,enum=ydeyes.TcsAction" json:"action,omitempty"` // 执行动作
}

func (x *TcsProcmonRule) Reset() {
	*x = TcsProcmonRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsProcmonRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsProcmonRule) ProtoMessage() {}

func (x *TcsProcmonRule) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsProcmonRule.ProtoReflect.Descriptor instead.
func (*TcsProcmonRule) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{86}
}

func (x *TcsProcmonRule) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TcsProcmonRule) GetProcess() string {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return ""
}

func (x *TcsProcmonRule) GetAction() TcsAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TcsAction_TcsAllow
}

type TcsFilemonRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Process *string    `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`                      // 源程序路径规则
	Target  *string    `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`                        // 被修改目标文件路径规则
	Action  *TcsAction `protobuf:"varint,4,req,name=action,enum=ydeyes.TcsAction" json:"action,omitempty"` // 执行动作
}

func (x *TcsFilemonRule) Reset() {
	*x = TcsFilemonRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsFilemonRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsFilemonRule) ProtoMessage() {}

func (x *TcsFilemonRule) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsFilemonRule.ProtoReflect.Descriptor instead.
func (*TcsFilemonRule) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{87}
}

func (x *TcsFilemonRule) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TcsFilemonRule) GetProcess() string {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return ""
}

func (x *TcsFilemonRule) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *TcsFilemonRule) GetAction() TcsAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TcsAction_TcsAllow
}

type TcsImagePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imageids   []string `protobuf:"bytes,1,rep,name=imageids" json:"imageids,omitempty"`                        // 镜像id
	DenyExecve *bool    `protobuf:"varint,2,req,name=deny_execve,json=denyExecve" json:"deny_execve,omitempty"` // 禁止镜像执行
	// 提权相关配置
	EscapeFileIsolate    *bool    `protobuf:"varint,3,req,name=escape_file_isolate,json=escapeFileIsolate" json:"escape_file_isolate,omitempty"`           // 文件修改逃逸: 容器内进程修改容器外文件(未挂载进容器)
	EscapeSyscall        *bool    `protobuf:"varint,4,req,name=escape_syscall,json=escapeSyscall" json:"escape_syscall,omitempty"`                         // syscall逃逸: 容器内进程调用容器白名单以外的syscall
	EscapeMountNamespace *bool    `protobuf:"varint,5,req,name=escape_mount_namespace,json=escapeMountNamespace" json:"escape_mount_namespace,omitempty"`  // 容器内进程突破文件系统隔离
	EscapePrivPromote    *bool    `protobuf:"varint,6,req,name=escape_priv_promote,json=escapePrivPromote" json:"escape_priv_promote,omitempty"`           // 容器内进程提权
	EscapePrivContainer  *uint64  `protobuf:"varint,7,req,name=escape_priv_container,json=escapePrivContainer" json:"escape_priv_container,omitempty"`     // 特权容器(权限列表)
	EscapeMountRiskPaths []string `protobuf:"bytes,8,rep,name=escape_mount_risk_paths,json=escapeMountRiskPaths" json:"escape_mount_risk_paths,omitempty"` // 挂载宿主机敏感目录|挂载docker.sock进容器
	// syscall监控
	SyscallmonRules  []string        `protobuf:"bytes,9,rep,name=syscallmon_rules,json=syscallmonRules" json:"syscallmon_rules,omitempty"`                           // syscall黑名单
	SyscallmonMode   *TcsMonitorMode `protobuf:"varint,10,opt,name=syscallmon_mode,json=syscallmonMode,enum=ydeyes.TcsMonitorMode" json:"syscallmon_mode,omitempty"` // syscall监控模式
	SyscallmonRuleId *string         `protobuf:"bytes,11,opt,name=syscallmon_rule_id,json=syscallmonRuleId" json:"syscallmon_rule_id,omitempty"`                     // 进程规则组id(后端用)
	// 进程监控
	ProcmonRules   []*TcsProcmonRule `protobuf:"bytes,12,rep,name=procmon_rules,json=procmonRules" json:"procmon_rules,omitempty"`
	ProcmonGroupId *string           `protobuf:"bytes,13,opt,name=procmon_group_id,json=procmonGroupId" json:"procmon_group_id,omitempty"` // 进程规则组id(后端用)
	// 文件监控(仅监控修改)
	FilemonRules   []*TcsFilemonRule `protobuf:"bytes,14,rep,name=filemon_rules,json=filemonRules" json:"filemon_rules,omitempty"`
	FilemonGroupId *string           `protobuf:"bytes,15,opt,name=filemon_group_id,json=filemonGroupId" json:"filemon_group_id,omitempty"` // 文件规则组id(后端用)
	Default        *bool             `protobuf:"varint,16,opt,name=default" json:"default,omitempty"`                                      // 默认策略
}

func (x *TcsImagePolicy) Reset() {
	*x = TcsImagePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsImagePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsImagePolicy) ProtoMessage() {}

func (x *TcsImagePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsImagePolicy.ProtoReflect.Descriptor instead.
func (*TcsImagePolicy) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{88}
}

func (x *TcsImagePolicy) GetImageids() []string {
	if x != nil {
		return x.Imageids
	}
	return nil
}

func (x *TcsImagePolicy) GetDenyExecve() bool {
	if x != nil && x.DenyExecve != nil {
		return *x.DenyExecve
	}
	return false
}

func (x *TcsImagePolicy) GetEscapeFileIsolate() bool {
	if x != nil && x.EscapeFileIsolate != nil {
		return *x.EscapeFileIsolate
	}
	return false
}

func (x *TcsImagePolicy) GetEscapeSyscall() bool {
	if x != nil && x.EscapeSyscall != nil {
		return *x.EscapeSyscall
	}
	return false
}

func (x *TcsImagePolicy) GetEscapeMountNamespace() bool {
	if x != nil && x.EscapeMountNamespace != nil {
		return *x.EscapeMountNamespace
	}
	return false
}

func (x *TcsImagePolicy) GetEscapePrivPromote() bool {
	if x != nil && x.EscapePrivPromote != nil {
		return *x.EscapePrivPromote
	}
	return false
}

func (x *TcsImagePolicy) GetEscapePrivContainer() uint64 {
	if x != nil && x.EscapePrivContainer != nil {
		return *x.EscapePrivContainer
	}
	return 0
}

func (x *TcsImagePolicy) GetEscapeMountRiskPaths() []string {
	if x != nil {
		return x.EscapeMountRiskPaths
	}
	return nil
}

func (x *TcsImagePolicy) GetSyscallmonRules() []string {
	if x != nil {
		return x.SyscallmonRules
	}
	return nil
}

func (x *TcsImagePolicy) GetSyscallmonMode() TcsMonitorMode {
	if x != nil && x.SyscallmonMode != nil {
		return *x.SyscallmonMode
	}
	return TcsMonitorMode_TcsMonitorSilent
}

func (x *TcsImagePolicy) GetSyscallmonRuleId() string {
	if x != nil && x.SyscallmonRuleId != nil {
		return *x.SyscallmonRuleId
	}
	return ""
}

func (x *TcsImagePolicy) GetProcmonRules() []*TcsProcmonRule {
	if x != nil {
		return x.ProcmonRules
	}
	return nil
}

func (x *TcsImagePolicy) GetProcmonGroupId() string {
	if x != nil && x.ProcmonGroupId != nil {
		return *x.ProcmonGroupId
	}
	return ""
}

func (x *TcsImagePolicy) GetFilemonRules() []*TcsFilemonRule {
	if x != nil {
		return x.FilemonRules
	}
	return nil
}

func (x *TcsImagePolicy) GetFilemonGroupId() string {
	if x != nil && x.FilemonGroupId != nil {
		return *x.FilemonGroupId
	}
	return ""
}

func (x *TcsImagePolicy) GetDefault() bool {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return false
}

// s->c server镜像策略响应
type TcsImageQueryPolicyACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId *uint32           `protobuf:"varint,1,req,name=query_id,json=queryId" json:"query_id,omitempty"`
	Policys []*TcsImagePolicy `protobuf:"bytes,2,rep,name=policys" json:"policys,omitempty"`
}

func (x *TcsImageQueryPolicyACK) Reset() {
	*x = TcsImageQueryPolicyACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsImageQueryPolicyACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsImageQueryPolicyACK) ProtoMessage() {}

func (x *TcsImageQueryPolicyACK) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsImageQueryPolicyACK.ProtoReflect.Descriptor instead.
func (*TcsImageQueryPolicyACK) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{89}
}

func (x *TcsImageQueryPolicyACK) GetQueryId() uint32 {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return 0
}

func (x *TcsImageQueryPolicyACK) GetPolicys() []*TcsImagePolicy {
	if x != nil {
		return x.Policys
	}
	return nil
}

type TcsImagePolicyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm     *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Imageids [][]byte     `protobuf:"bytes,2,rep,name=imageids" json:"imageids,omitempty"`
}

func (x *TcsImagePolicyNotify) Reset() {
	*x = TcsImagePolicyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsImagePolicyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsImagePolicyNotify) ProtoMessage() {}

func (x *TcsImagePolicyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsImagePolicyNotify.ProtoReflect.Descriptor instead.
func (*TcsImagePolicyNotify) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{90}
}

func (x *TcsImagePolicyNotify) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsImagePolicyNotify) GetImageids() [][]byte {
	if x != nil {
		return x.Imageids
	}
	return nil
}

type TcsImagePolicyNotifyACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
}

func (x *TcsImagePolicyNotifyACK) Reset() {
	*x = TcsImagePolicyNotifyACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsImagePolicyNotifyACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsImagePolicyNotifyACK) ProtoMessage() {}

func (x *TcsImagePolicyNotifyACK) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsImagePolicyNotifyACK.ProtoReflect.Descriptor instead.
func (*TcsImagePolicyNotifyACK) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{91}
}

func (x *TcsImagePolicyNotifyACK) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

//---------------------------容器木马扫描----------------------------------
// s->c 发起扫描任务
type TcsScanContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm         *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Containerids [][]byte     `protobuf:"bytes,2,rep,name=containerids" json:"containerids,omitempty"` // 容器id 为空时扫描所有容器
	Timeout      *uint32      `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`          // scan timeout seconds
	Excludes     [][]byte     `protobuf:"bytes,4,rep,name=excludes" json:"excludes,omitempty"`         // exclude path(容器内扫描目录, 支持通配符)
	Includes     [][]byte     `protobuf:"bytes,5,rep,name=includes" json:"includes,omitempty"`         // include path(容器内扫描目录， 支持通配符)
	Interval     *uint32      `protobuf:"varint,6,opt,name=interval" json:"interval,omitempty"`        // 扫描文件间隔(默认100，单位ms)
}

func (x *TcsScanContainer) Reset() {
	*x = TcsScanContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanContainer) ProtoMessage() {}

func (x *TcsScanContainer) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanContainer.ProtoReflect.Descriptor instead.
func (*TcsScanContainer) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{92}
}

func (x *TcsScanContainer) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsScanContainer) GetContainerids() [][]byte {
	if x != nil {
		return x.Containerids
	}
	return nil
}

func (x *TcsScanContainer) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *TcsScanContainer) GetExcludes() [][]byte {
	if x != nil {
		return x.Excludes
	}
	return nil
}

func (x *TcsScanContainer) GetIncludes() [][]byte {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *TcsScanContainer) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

// s->c 取消扫描任务
type TcsScanContainerCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm        *TcsTaskComm `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Containerid [][]byte     `protobuf:"bytes,2,rep,name=containerid" json:"containerid,omitempty"` // 停止容器(containerid 不为空)或任务(containerid 为空)
}

func (x *TcsScanContainerCancel) Reset() {
	*x = TcsScanContainerCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanContainerCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanContainerCancel) ProtoMessage() {}

func (x *TcsScanContainerCancel) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanContainerCancel.ProtoReflect.Descriptor instead.
func (*TcsScanContainerCancel) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{93}
}

func (x *TcsScanContainerCancel) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsScanContainerCancel) GetContainerid() [][]byte {
	if x != nil {
		return x.Containerid
	}
	return nil
}

// c->s agent收到扫描任务ack确认
type TcsScanContainerAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm    *TcsTaskComm                              `protobuf:"bytes,1,req,name=comm" json:"comm,omitempty"`
	Ack     []*TcsScanContainerAck_TcsContainerStatus `protobuf:"bytes,2,rep,name=ack" json:"ack,omitempty"`         // container扫描状态列表
	Message []byte                                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"` //附带信息
}

func (x *TcsScanContainerAck) Reset() {
	*x = TcsScanContainerAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanContainerAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanContainerAck) ProtoMessage() {}

func (x *TcsScanContainerAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanContainerAck.ProtoReflect.Descriptor instead.
func (*TcsScanContainerAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{94}
}

func (x *TcsScanContainerAck) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *TcsScanContainerAck) GetAck() []*TcsScanContainerAck_TcsContainerStatus {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *TcsScanContainerAck) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type TcsFileOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containerid []byte `protobuf:"bytes,1,opt,name=containerid" json:"containerid,omitempty"`         // 容器id
	Imageid     []byte `protobuf:"bytes,2,opt,name=imageid" json:"imageid,omitempty"`                 // 镜像id
	InitPid     *int32 `protobuf:"varint,3,opt,name=init_pid,json=initPid" json:"init_pid,omitempty"` //容器init pid
	// 实时监控上报时存在如下字段
	Pid             *int64  `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`                           //运行进程pid
	Exe             []byte  `protobuf:"bytes,5,opt,name=exe" json:"exe,omitempty"`                            //相关进程
	Cmdline         []byte  `protobuf:"bytes,6,opt,name=cmdline" json:"cmdline,omitempty"`                    //命令行参数
	DetectBy        *int32  `protobuf:"varint,7,opt,name=detect_by,json=detectBy" json:"detect_by,omitempty"` // 默认为0
	Reason          *uint64 `protobuf:"varint,8,opt,name=reason" json:"reason,omitempty"`
	Uppdir          []byte  `protobuf:"bytes,9,opt,name=uppdir" json:"uppdir,omitempty"`                                           // uppdir (主动触发模式) , "-" 监控模式
	Ptree           []byte  `protobuf:"bytes,10,opt,name=ptree" json:"ptree,omitempty"`                                            // 进程树
	Account         []byte  `protobuf:"bytes,11,opt,name=account" json:"account,omitempty"`                                        // account, uname:gname
	Authority       []byte  `protobuf:"bytes,12,opt,name=authority" json:"authority,omitempty"`                                    // 进程文件权限
	PodName         []byte  `protobuf:"bytes,13,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`                         // pod集群名称
	ContainerName   []byte  `protobuf:"bytes,14,opt,name=container_name,json=containerName" json:"container_name,omitempty"`       // 容器名
	ImageName       []byte  `protobuf:"bytes,15,opt,name=image_name,json=imageName" json:"image_name,omitempty"`                   // 镜像名
	ContainerStatus []byte  `protobuf:"bytes,16,opt,name=container_status,json=containerStatus" json:"container_status,omitempty"` // 容器状态
}

func (x *TcsFileOperator) Reset() {
	*x = TcsFileOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsFileOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsFileOperator) ProtoMessage() {}

func (x *TcsFileOperator) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsFileOperator.ProtoReflect.Descriptor instead.
func (*TcsFileOperator) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{95}
}

func (x *TcsFileOperator) GetContainerid() []byte {
	if x != nil {
		return x.Containerid
	}
	return nil
}

func (x *TcsFileOperator) GetImageid() []byte {
	if x != nil {
		return x.Imageid
	}
	return nil
}

func (x *TcsFileOperator) GetInitPid() int32 {
	if x != nil && x.InitPid != nil {
		return *x.InitPid
	}
	return 0
}

func (x *TcsFileOperator) GetPid() int64 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *TcsFileOperator) GetExe() []byte {
	if x != nil {
		return x.Exe
	}
	return nil
}

func (x *TcsFileOperator) GetCmdline() []byte {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *TcsFileOperator) GetDetectBy() int32 {
	if x != nil && x.DetectBy != nil {
		return *x.DetectBy
	}
	return 0
}

func (x *TcsFileOperator) GetReason() uint64 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *TcsFileOperator) GetUppdir() []byte {
	if x != nil {
		return x.Uppdir
	}
	return nil
}

func (x *TcsFileOperator) GetPtree() []byte {
	if x != nil {
		return x.Ptree
	}
	return nil
}

func (x *TcsFileOperator) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TcsFileOperator) GetAuthority() []byte {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *TcsFileOperator) GetPodName() []byte {
	if x != nil {
		return x.PodName
	}
	return nil
}

func (x *TcsFileOperator) GetContainerName() []byte {
	if x != nil {
		return x.ContainerName
	}
	return nil
}

func (x *TcsFileOperator) GetImageName() []byte {
	if x != nil {
		return x.ImageName
	}
	return nil
}

func (x *TcsFileOperator) GetContainerStatus() []byte {
	if x != nil {
		return x.ContainerStatus
	}
	return nil
}

type TcsScanHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5      []byte           `protobuf:"bytes,1,req,name=md5" json:"md5,omitempty"`
	Path     []byte           `protobuf:"bytes,2,req,name=path" json:"path,omitempty"` // 相对容器内路径
	Size     *int64           `protobuf:"varint,3,req,name=size" json:"size,omitempty"`
	Mtime    *uint32          `protobuf:"varint,4,req,name=mtime" json:"mtime,omitempty"`
	Ctime    *uint32          `protobuf:"varint,5,req,name=ctime" json:"ctime,omitempty"`
	Atime    *uint32          `protobuf:"varint,6,req,name=atime" json:"atime,omitempty"`
	Filetype []byte           `protobuf:"bytes,7,req,name=filetype" json:"filetype,omitempty"`
	Operator *TcsFileOperator `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
	Comm     *TcsTaskComm     `protobuf:"bytes,9,req,name=comm" json:"comm,omitempty"`
}

func (x *TcsScanHash) Reset() {
	*x = TcsScanHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanHash) ProtoMessage() {}

func (x *TcsScanHash) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanHash.ProtoReflect.Descriptor instead.
func (*TcsScanHash) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{96}
}

func (x *TcsScanHash) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *TcsScanHash) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TcsScanHash) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *TcsScanHash) GetMtime() uint32 {
	if x != nil && x.Mtime != nil {
		return *x.Mtime
	}
	return 0
}

func (x *TcsScanHash) GetCtime() uint32 {
	if x != nil && x.Ctime != nil {
		return *x.Ctime
	}
	return 0
}

func (x *TcsScanHash) GetAtime() uint32 {
	if x != nil && x.Atime != nil {
		return *x.Atime
	}
	return 0
}

func (x *TcsScanHash) GetFiletype() []byte {
	if x != nil {
		return x.Filetype
	}
	return nil
}

func (x *TcsScanHash) GetOperator() *TcsFileOperator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *TcsScanHash) GetComm() *TcsTaskComm {
	if x != nil {
		return x.Comm
	}
	return nil
}

// c->s 扫描文件hash
type TcsScanFileHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId *uint32        `protobuf:"varint,1,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	Hashs    []*TcsScanHash `protobuf:"bytes,2,rep,name=hashs" json:"hashs,omitempty"`
}

func (x *TcsScanFileHash) Reset() {
	*x = TcsScanFileHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanFileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanFileHash) ProtoMessage() {}

func (x *TcsScanFileHash) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanFileHash.ProtoReflect.Descriptor instead.
func (*TcsScanFileHash) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{97}
}

func (x *TcsScanFileHash) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsScanFileHash) GetHashs() []*TcsScanHash {
	if x != nil {
		return x.Hashs
	}
	return nil
}

// s->c 确认
type TcsScanFileHashAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId  *uint32        `protobuf:"varint,1,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	MissHashs []*TcsScanHash `protobuf:"bytes,2,rep,name=miss_hashs,json=missHashs" json:"miss_hashs,omitempty"` // 不存在文件内容的hash列表
}

func (x *TcsScanFileHashAck) Reset() {
	*x = TcsScanFileHashAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanFileHashAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanFileHashAck) ProtoMessage() {}

func (x *TcsScanFileHashAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanFileHashAck.ProtoReflect.Descriptor instead.
func (*TcsScanFileHashAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{98}
}

func (x *TcsScanFileHashAck) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsScanFileHashAck) GetMissHashs() []*TcsScanHash {
	if x != nil {
		return x.MissHashs
	}
	return nil
}

// c->s report file
type TcsScanFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId *uint32                 `protobuf:"varint,1,req,name=report_id,json=reportId" json:"report_id,omitempty"`
	Files    []*TcsScanFile_TcsFiles `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (x *TcsScanFile) Reset() {
	*x = TcsScanFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanFile) ProtoMessage() {}

func (x *TcsScanFile) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanFile.ProtoReflect.Descriptor instead.
func (*TcsScanFile) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{99}
}

func (x *TcsScanFile) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *TcsScanFile) GetFiles() []*TcsScanFile_TcsFiles {
	if x != nil {
		return x.Files
	}
	return nil
}

// s->c report file ack
type TcsScanFileAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId *uint32 `protobuf:"varint,1,req,name=report_id,json=reportId" json:"report_id,omitempty"`
}

func (x *TcsScanFileAck) Reset() {
	*x = TcsScanFileAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanFileAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanFileAck) ProtoMessage() {}

func (x *TcsScanFileAck) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanFileAck.ProtoReflect.Descriptor instead.
func (*TcsScanFileAck) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{100}
}

func (x *TcsScanFileAck) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

type UserAccountInfo_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName        []byte                            `protobuf:"bytes,1,req,name=user_name,json=userName" json:"user_name,omitempty"`
	GroupNames      []byte                            `protobuf:"bytes,2,req,name=group_names,json=groupNames" json:"group_names,omitempty"`
	CreateTime      *int64                            `protobuf:"varint,3,opt,name=create_time,json=createTime,def=0" json:"create_time,omitempty"`            //the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC
	LastLoginTime   *int64                            `protobuf:"varint,4,opt,name=last_login_time,json=lastLoginTime,def=0" json:"last_login_time,omitempty"` //the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC
	ShellPath       []byte                            `protobuf:"bytes,5,opt,name=shell_path,json=shellPath,def=" json:"shell_path,omitempty"`                 //for linux
	IsLoginAccount  *bool                             `protobuf:"varint,6,req,name=is_login_account,json=isLoginAccount" json:"is_login_account,omitempty"`    // true -> 登录账户
	IsHiddenAccount *bool                             `protobuf:"varint,7,req,name=is_hidden_account,json=isHiddenAccount" json:"is_hidden_account,omitempty"` // true -> 隐藏账户
	IsWithoutPwd    *bool                             `protobuf:"varint,8,req,name=is_without_pwd,json=isWithoutPwd" json:"is_without_pwd,omitempty"`          // true -> 无密码账户
	Privilege       *UserAccountInfo_AccountPrivilege `protobuf:"varint,9,req,name=privilege,enum=ydeyes.UserAccountInfo_AccountPrivilege" json:"privilege,omitempty"`
	ModifyType      *UserAccountInfo_ModifiedType     `protobuf:"varint,10,opt,name=modify_type,json=modifyType,enum=ydeyes.UserAccountInfo_ModifiedType,def=0" json:"modify_type,omitempty"` // 增量上报时指明事件的类型, 全量上报可忽略
}

// Default values for UserAccountInfo_Account fields.
const (
	Default_UserAccountInfo_Account_CreateTime    = int64(0)
	Default_UserAccountInfo_Account_LastLoginTime = int64(0)
	Default_UserAccountInfo_Account_ModifyType    = UserAccountInfo_NOT_SET
)

// Default values for UserAccountInfo_Account fields.
var (
	Default_UserAccountInfo_Account_ShellPath = []byte("")
)

func (x *UserAccountInfo_Account) Reset() {
	*x = UserAccountInfo_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfo_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfo_Account) ProtoMessage() {}

func (x *UserAccountInfo_Account) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfo_Account.ProtoReflect.Descriptor instead.
func (*UserAccountInfo_Account) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UserAccountInfo_Account) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *UserAccountInfo_Account) GetGroupNames() []byte {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *UserAccountInfo_Account) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return Default_UserAccountInfo_Account_CreateTime
}

func (x *UserAccountInfo_Account) GetLastLoginTime() int64 {
	if x != nil && x.LastLoginTime != nil {
		return *x.LastLoginTime
	}
	return Default_UserAccountInfo_Account_LastLoginTime
}

func (x *UserAccountInfo_Account) GetShellPath() []byte {
	if x != nil && x.ShellPath != nil {
		return x.ShellPath
	}
	return append([]byte(nil), Default_UserAccountInfo_Account_ShellPath...)
}

func (x *UserAccountInfo_Account) GetIsLoginAccount() bool {
	if x != nil && x.IsLoginAccount != nil {
		return *x.IsLoginAccount
	}
	return false
}

func (x *UserAccountInfo_Account) GetIsHiddenAccount() bool {
	if x != nil && x.IsHiddenAccount != nil {
		return *x.IsHiddenAccount
	}
	return false
}

func (x *UserAccountInfo_Account) GetIsWithoutPwd() bool {
	if x != nil && x.IsWithoutPwd != nil {
		return *x.IsWithoutPwd
	}
	return false
}

func (x *UserAccountInfo_Account) GetPrivilege() UserAccountInfo_AccountPrivilege {
	if x != nil && x.Privilege != nil {
		return *x.Privilege
	}
	return UserAccountInfo_SUPER_USER
}

func (x *UserAccountInfo_Account) GetModifyType() UserAccountInfo_ModifiedType {
	if x != nil && x.ModifyType != nil {
		return *x.ModifyType
	}
	return Default_UserAccountInfo_Account_ModifyType
}

type OpenPortMsg_PortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port            *int32  `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	ProcessName     []byte  `protobuf:"bytes,2,req,name=process_name,json=processName" json:"process_name,omitempty"`
	Pid             *uint32 `protobuf:"varint,3,req,name=pid" json:"pid,omitempty"`
	Key             *uint64 `protobuf:"varint,4,opt,name=key" json:"key,omitempty"` //  high 32bit: port, low 32bit: pid
	ModifyTimestamp *uint64 `protobuf:"varint,5,opt,name=modify_timestamp,json=modifyTimestamp" json:"modify_timestamp,omitempty"`
}

func (x *OpenPortMsg_PortInfo) Reset() {
	*x = OpenPortMsg_PortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPortMsg_PortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPortMsg_PortInfo) ProtoMessage() {}

func (x *OpenPortMsg_PortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPortMsg_PortInfo.ProtoReflect.Descriptor instead.
func (*OpenPortMsg_PortInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{22, 0}
}

func (x *OpenPortMsg_PortInfo) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *OpenPortMsg_PortInfo) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *OpenPortMsg_PortInfo) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *OpenPortMsg_PortInfo) GetKey() uint64 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *OpenPortMsg_PortInfo) GetModifyTimestamp() uint64 {
	if x != nil && x.ModifyTimestamp != nil {
		return *x.ModifyTimestamp
	}
	return 0
}

type ProcessInfoMsg_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName []byte                       `protobuf:"bytes,1,req,name=process_name,json=processName" json:"process_name,omitempty"`
	FullPath    []byte                       `protobuf:"bytes,2,req,name=full_path,json=fullPath" json:"full_path,omitempty"`
	Pid         *uint32                      `protobuf:"varint,3,req,name=pid" json:"pid,omitempty"`
	Ppid        *uint32                      `protobuf:"varint,4,req,name=ppid" json:"ppid,omitempty"`
	CmdLine     []byte                       `protobuf:"bytes,5,req,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"` // maxlen: 1024
	UserName    []byte                       `protobuf:"bytes,6,req,name=user_name,json=userName" json:"user_name,omitempty"`
	Sid         *uint32                      `protobuf:"varint,7,opt,name=sid" json:"sid,omitempty"`    // for linux
	Uid         *uint32                      `protobuf:"varint,8,opt,name=uid" json:"uid,omitempty"`    // for linux
	Gid         *uint32                      `protobuf:"varint,9,opt,name=gid" json:"gid,omitempty"`    // for linux
	Euid        *uint32                      `protobuf:"varint,10,opt,name=euid" json:"euid,omitempty"` // for linux
	Egid        *uint32                      `protobuf:"varint,11,opt,name=egid" json:"egid,omitempty"` // for linux
	ModifyType  *ProcessInfoMsg_ModifiedType `protobuf:"varint,12,req,name=modify_type,json=modifyType,enum=ydeyes.ProcessInfoMsg_ModifiedType" json:"modify_type,omitempty"`
	Md5         []byte                       `protobuf:"bytes,13,opt,name=md5" json:"md5,omitempty"`
	Cpu         *float64                     `protobuf:"fixed64,14,opt,name=cpu" json:"cpu,omitempty"`
	Mem         *uint32                      `protobuf:"varint,15,opt,name=mem" json:"mem,omitempty"` // in KB
}

func (x *ProcessInfoMsg_Process) Reset() {
	*x = ProcessInfoMsg_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoMsg_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoMsg_Process) ProtoMessage() {}

func (x *ProcessInfoMsg_Process) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoMsg_Process.ProtoReflect.Descriptor instead.
func (*ProcessInfoMsg_Process) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ProcessInfoMsg_Process) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *ProcessInfoMsg_Process) GetFullPath() []byte {
	if x != nil {
		return x.FullPath
	}
	return nil
}

func (x *ProcessInfoMsg_Process) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetPpid() uint32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *ProcessInfoMsg_Process) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ProcessInfoMsg_Process) GetSid() uint32 {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetEuid() uint32 {
	if x != nil && x.Euid != nil {
		return *x.Euid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetEgid() uint32 {
	if x != nil && x.Egid != nil {
		return *x.Egid
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetModifyType() ProcessInfoMsg_ModifiedType {
	if x != nil && x.ModifyType != nil {
		return *x.ModifyType
	}
	return ProcessInfoMsg_NOT_SET
}

func (x *ProcessInfoMsg_Process) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ProcessInfoMsg_Process) GetCpu() float64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *ProcessInfoMsg_Process) GetMem() uint32 {
	if x != nil && x.Mem != nil {
		return *x.Mem
	}
	return 0
}

type AgentMonitorReport_MonitorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorId   *AgentMonitorReport_MonitorId `protobuf:"varint,1,req,name=monitor_id,json=monitorId,enum=ydeyes.AgentMonitorReport_MonitorId" json:"monitor_id,omitempty"`
	Value       *uint32                       `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
	MonitorTime *int64                        `protobuf:"varint,3,req,name=monitor_time,json=monitorTime" json:"monitor_time,omitempty"` // unix time stamp
}

func (x *AgentMonitorReport_MonitorData) Reset() {
	*x = AgentMonitorReport_MonitorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMonitorReport_MonitorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMonitorReport_MonitorData) ProtoMessage() {}

func (x *AgentMonitorReport_MonitorData) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMonitorReport_MonitorData.ProtoReflect.Descriptor instead.
func (*AgentMonitorReport_MonitorData) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{25, 0}
}

func (x *AgentMonitorReport_MonitorData) GetMonitorId() AgentMonitorReport_MonitorId {
	if x != nil && x.MonitorId != nil {
		return *x.MonitorId
	}
	return AgentMonitorReport_CPU
}

func (x *AgentMonitorReport_MonitorData) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *AgentMonitorReport_MonitorData) GetMonitorTime() int64 {
	if x != nil && x.MonitorTime != nil {
		return *x.MonitorTime
	}
	return 0
}

type UserCommandReport_CommandElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"` //unix timestamp
	Commad    []byte `protobuf:"bytes,2,req,name=commad" json:"commad,omitempty"`
}

func (x *UserCommandReport_CommandElement) Reset() {
	*x = UserCommandReport_CommandElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommandReport_CommandElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommandReport_CommandElement) ProtoMessage() {}

func (x *UserCommandReport_CommandElement) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommandReport_CommandElement.ProtoReflect.Descriptor instead.
func (*UserCommandReport_CommandElement) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{26, 0}
}

func (x *UserCommandReport_CommandElement) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *UserCommandReport_CommandElement) GetCommad() []byte {
	if x != nil {
		return x.Commad
	}
	return nil
}

type ProcPrivilegeEscalation_ProcPrivilegeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName         []byte   `protobuf:"bytes,1,req,name=process_name,json=processName" json:"process_name,omitempty"`                              //进程名
	FullPath            []byte   `protobuf:"bytes,2,req,name=full_path,json=fullPath" json:"full_path,omitempty"`                                       //进程全路径
	Pid                 *uint32  `protobuf:"varint,3,req,name=pid" json:"pid,omitempty"`                                                                //pid
	CmdLine             []byte   `protobuf:"bytes,4,req,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"`                                          // maxlen: 1024
	UserName            []byte   `protobuf:"bytes,5,req,name=user_name,json=userName" json:"user_name,omitempty"`                                       //用户名
	UserGroupName       []byte   `protobuf:"bytes,6,req,name=user_group_name,json=userGroupName" json:"user_group_name,omitempty"`                      //用户组名
	ProcFilePrivilege   []byte   `protobuf:"bytes,7,req,name=proc_file_privilege,json=procFilePrivilege" json:"proc_file_privilege,omitempty"`          //提权进程
	Ppid                *uint32  `protobuf:"varint,8,req,name=ppid" json:"ppid,omitempty"`                                                              //ppid
	ParentProcName      []byte   `protobuf:"bytes,9,req,name=parent_proc_name,json=parentProcName" json:"parent_proc_name,omitempty"`                   //父进程名
	ParentProcUserName  []byte   `protobuf:"bytes,10,req,name=parent_proc_user_name,json=parentProcUserName" json:"parent_proc_user_name,omitempty"`    //父进用户
	ParentProcGroupName []byte   `protobuf:"bytes,11,req,name=parent_proc_group_name,json=parentProcGroupName" json:"parent_proc_group_name,omitempty"` //父进程用户组
	ParentProcPath      []byte   `protobuf:"bytes,12,req,name=parent_proc_path,json=parentProcPath" json:"parent_proc_path,omitempty"`                  //父进程路径
	FindTime            *uint64  `protobuf:"varint,13,req,name=find_time,json=findTime" json:"find_time,omitempty"`                                     //发现时间
	ProcTree            [][]byte `protobuf:"bytes,14,rep,name=proc_tree,json=procTree" json:"proc_tree,omitempty"`                                      //进程树
	Sid                 *uint32  `protobuf:"varint,15,opt,name=sid" json:"sid,omitempty"`
	Uid                 *uint32  `protobuf:"varint,16,opt,name=uid" json:"uid,omitempty"`
	Gid                 *uint32  `protobuf:"varint,17,opt,name=gid" json:"gid,omitempty"`
	Euid                *uint32  `protobuf:"varint,18,opt,name=euid" json:"euid,omitempty"`
	Egid                *uint32  `protobuf:"varint,19,opt,name=egid" json:"egid,omitempty"`
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) Reset() {
	*x = ProcPrivilegeEscalation_ProcPrivilegeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcPrivilegeEscalation_ProcPrivilegeInfo) ProtoMessage() {}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcPrivilegeEscalation_ProcPrivilegeInfo.ProtoReflect.Descriptor instead.
func (*ProcPrivilegeEscalation_ProcPrivilegeInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetFullPath() []byte {
	if x != nil {
		return x.FullPath
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetUserGroupName() []byte {
	if x != nil {
		return x.UserGroupName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetProcFilePrivilege() []byte {
	if x != nil {
		return x.ProcFilePrivilege
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetPpid() uint32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetParentProcName() []byte {
	if x != nil {
		return x.ParentProcName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetParentProcUserName() []byte {
	if x != nil {
		return x.ParentProcUserName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetParentProcGroupName() []byte {
	if x != nil {
		return x.ParentProcGroupName
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetParentProcPath() []byte {
	if x != nil {
		return x.ParentProcPath
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetFindTime() uint64 {
	if x != nil && x.FindTime != nil {
		return *x.FindTime
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetProcTree() [][]byte {
	if x != nil {
		return x.ProcTree
	}
	return nil
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetSid() uint32 {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetEuid() uint32 {
	if x != nil && x.Euid != nil {
		return *x.Euid
	}
	return 0
}

func (x *ProcPrivilegeEscalation_ProcPrivilegeInfo) GetEgid() uint32 {
	if x != nil && x.Egid != nil {
		return *x.Egid
	}
	return 0
}

type ReverseShell_ReverseShellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName         []byte   `protobuf:"bytes,1,req,name=process_name,json=processName" json:"process_name,omitempty"`                              //进程名
	FullPath            []byte   `protobuf:"bytes,2,req,name=full_path,json=fullPath" json:"full_path,omitempty"`                                       //进程全路径
	Pid                 *uint32  `protobuf:"varint,3,req,name=pid" json:"pid,omitempty"`                                                                //pid
	CmdLine             []byte   `protobuf:"bytes,4,req,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"`                                          // maxlen: 1024
	UserName            []byte   `protobuf:"bytes,5,req,name=user_name,json=userName" json:"user_name,omitempty"`                                       //用户名
	UserGroupName       []byte   `protobuf:"bytes,6,req,name=user_group_name,json=userGroupName" json:"user_group_name,omitempty"`                      //用户组名
	Ppid                *uint32  `protobuf:"varint,7,req,name=ppid" json:"ppid,omitempty"`                                                              //ppid
	ParentProcName      []byte   `protobuf:"bytes,8,req,name=parent_proc_name,json=parentProcName" json:"parent_proc_name,omitempty"`                   //父进程名
	ParentProcUserName  []byte   `protobuf:"bytes,9,req,name=parent_proc_user_name,json=parentProcUserName" json:"parent_proc_user_name,omitempty"`     //父进程用户名
	ParentProcGroupName []byte   `protobuf:"bytes,10,req,name=parent_proc_group_name,json=parentProcGroupName" json:"parent_proc_group_name,omitempty"` //父进程用户组
	ParentProcPath      []byte   `protobuf:"bytes,11,req,name=parent_proc_path,json=parentProcPath" json:"parent_proc_path,omitempty"`                  //父进程路径
	FindTime            *uint64  `protobuf:"varint,12,req,name=find_time,json=findTime" json:"find_time,omitempty"`                                     //发现时间
	ProcTree            [][]byte `protobuf:"bytes,13,rep,name=proc_tree,json=procTree" json:"proc_tree,omitempty"`                                      //进程数
	DstIp               []byte   `protobuf:"bytes,14,req,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`                                               //源IP
	DstPort             *uint32  `protobuf:"varint,15,req,name=dst_port,json=dstPort" json:"dst_port,omitempty"`                                        //源端口
}

func (x *ReverseShell_ReverseShellInfo) Reset() {
	*x = ReverseShell_ReverseShellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseShell_ReverseShellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseShell_ReverseShellInfo) ProtoMessage() {}

func (x *ReverseShell_ReverseShellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseShell_ReverseShellInfo.ProtoReflect.Descriptor instead.
func (*ReverseShell_ReverseShellInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ReverseShell_ReverseShellInfo) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetFullPath() []byte {
	if x != nil {
		return x.FullPath
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ReverseShell_ReverseShellInfo) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetUserGroupName() []byte {
	if x != nil {
		return x.UserGroupName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetPpid() uint32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *ReverseShell_ReverseShellInfo) GetParentProcName() []byte {
	if x != nil {
		return x.ParentProcName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetParentProcUserName() []byte {
	if x != nil {
		return x.ParentProcUserName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetParentProcGroupName() []byte {
	if x != nil {
		return x.ParentProcGroupName
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetParentProcPath() []byte {
	if x != nil {
		return x.ParentProcPath
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetFindTime() uint64 {
	if x != nil && x.FindTime != nil {
		return *x.FindTime
	}
	return 0
}

func (x *ReverseShell_ReverseShellInfo) GetProcTree() [][]byte {
	if x != nil {
		return x.ProcTree
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *ReverseShell_ReverseShellInfo) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

type YmonMsg_YmonMsgReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq       *uint64   `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Timestamp *uint64   `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	Pid       *uint32   `protobuf:"varint,3,req,name=pid" json:"pid,omitempty"`
	Oper      *YmonOper `protobuf:"varint,4,req,name=oper,enum=ydeyes.YmonOper" json:"oper,omitempty"`
	Result    *uint32   `protobuf:"varint,5,req,name=result" json:"result,omitempty"`
	Regname   []byte    `protobuf:"bytes,6,req,name=regname" json:"regname,omitempty"`
	Valname   []byte    `protobuf:"bytes,7,opt,name=valname" json:"valname,omitempty"`
	Data      []byte    `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
}

func (x *YmonMsg_YmonMsgReg) Reset() {
	*x = YmonMsg_YmonMsgReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YmonMsg_YmonMsgReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YmonMsg_YmonMsgReg) ProtoMessage() {}

func (x *YmonMsg_YmonMsgReg) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YmonMsg_YmonMsgReg.ProtoReflect.Descriptor instead.
func (*YmonMsg_YmonMsgReg) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{34, 0}
}

func (x *YmonMsg_YmonMsgReg) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *YmonMsg_YmonMsgReg) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *YmonMsg_YmonMsgReg) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *YmonMsg_YmonMsgReg) GetOper() YmonOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return YmonOper_YMON_REG_DELETE_KEY
}

func (x *YmonMsg_YmonMsgReg) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *YmonMsg_YmonMsgReg) GetRegname() []byte {
	if x != nil {
		return x.Regname
	}
	return nil
}

func (x *YmonMsg_YmonMsgReg) GetValname() []byte {
	if x != nil {
		return x.Valname
	}
	return nil
}

func (x *YmonMsg_YmonMsgReg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WebServerInfo_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *WebServerInfo_ServerType `protobuf:"varint,1,req,name=type,enum=ydeyes.WebServerInfo_ServerType" json:"type,omitempty"`
	RootConf []byte                    `protobuf:"bytes,2,req,name=root_conf,json=rootConf" json:"root_conf,omitempty"`
	PathList [][]byte                  `protobuf:"bytes,3,rep,name=path_list,json=pathList" json:"path_list,omitempty"`
}

func (x *WebServerInfo_Server) Reset() {
	*x = WebServerInfo_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServerInfo_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServerInfo_Server) ProtoMessage() {}

func (x *WebServerInfo_Server) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServerInfo_Server.ProtoReflect.Descriptor instead.
func (*WebServerInfo_Server) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{39, 0}
}

func (x *WebServerInfo_Server) GetType() WebServerInfo_ServerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WebServerInfo_undef
}

func (x *WebServerInfo_Server) GetRootConf() []byte {
	if x != nil {
		return x.RootConf
	}
	return nil
}

func (x *WebServerInfo_Server) GetPathList() [][]byte {
	if x != nil {
		return x.PathList
	}
	return nil
}

type CrontabMsg_Crontab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    []byte `protobuf:"bytes,1,req,name=user" json:"user,omitempty"`
	Path    []byte `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,3,req,name=content" json:"content,omitempty"`
}

func (x *CrontabMsg_Crontab) Reset() {
	*x = CrontabMsg_Crontab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabMsg_Crontab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabMsg_Crontab) ProtoMessage() {}

func (x *CrontabMsg_Crontab) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabMsg_Crontab.ProtoReflect.Descriptor instead.
func (*CrontabMsg_Crontab) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{40, 0}
}

func (x *CrontabMsg_Crontab) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CrontabMsg_Crontab) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CrontabMsg_Crontab) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type TamperProtectReportFilesRequest_FileToBeCompared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo *TamperProtectFileInfo                                       `protobuf:"bytes,1,req,name=file_info,json=fileInfo" json:"file_info,omitempty"`                                                  //待比较文件信息
	Type     *TamperProtectReportFilesRequest_TamperProtectFileChangeType `protobuf:"varint,2,opt,name=type,enum=ydeyes.TamperProtectReportFilesRequest_TamperProtectFileChangeType" json:"type,omitempty"` //文件被修改类型，仅在report_type为1时赋值
}

func (x *TamperProtectReportFilesRequest_FileToBeCompared) Reset() {
	*x = TamperProtectReportFilesRequest_FileToBeCompared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectReportFilesRequest_FileToBeCompared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectReportFilesRequest_FileToBeCompared) ProtoMessage() {}

func (x *TamperProtectReportFilesRequest_FileToBeCompared) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectReportFilesRequest_FileToBeCompared.ProtoReflect.Descriptor instead.
func (*TamperProtectReportFilesRequest_FileToBeCompared) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{50, 0}
}

func (x *TamperProtectReportFilesRequest_FileToBeCompared) GetFileInfo() *TamperProtectFileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *TamperProtectReportFilesRequest_FileToBeCompared) GetType() TamperProtectReportFilesRequest_TamperProtectFileChangeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamperProtectReportFilesRequest_TP_CHANGE_MODIFY
}

type TamperProtectReportFilesResponse_FileToBeRecovered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo *TamperProtectFileInfo    `protobuf:"bytes,1,req,name=file_info,json=fileInfo" json:"file_info,omitempty"`               //待恢复文件信息
	Type     *TamperProtectRecoverType `protobuf:"varint,2,req,name=type,enum=ydeyes.TamperProtectRecoverType" json:"type,omitempty"` //恢复类型
}

func (x *TamperProtectReportFilesResponse_FileToBeRecovered) Reset() {
	*x = TamperProtectReportFilesResponse_FileToBeRecovered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperProtectReportFilesResponse_FileToBeRecovered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperProtectReportFilesResponse_FileToBeRecovered) ProtoMessage() {}

func (x *TamperProtectReportFilesResponse_FileToBeRecovered) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperProtectReportFilesResponse_FileToBeRecovered.ProtoReflect.Descriptor instead.
func (*TamperProtectReportFilesResponse_FileToBeRecovered) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{51, 0}
}

func (x *TamperProtectReportFilesResponse_FileToBeRecovered) GetFileInfo() *TamperProtectFileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *TamperProtectReportFilesResponse_FileToBeRecovered) GetType() TamperProtectRecoverType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamperProtectRecoverType_TP_RECOVER_CONTENT_RECOVER
}

type VulnerDetectRequest_CompInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remote  []byte `protobuf:"bytes,1,req,name=remote" json:"remote,omitempty"`
	Md5     []byte `protobuf:"bytes,2,req,name=md5" json:"md5,omitempty"`
	Name    []byte `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Version []byte `protobuf:"bytes,4,req,name=version" json:"version,omitempty"`
}

func (x *VulnerDetectRequest_CompInfo) Reset() {
	*x = VulnerDetectRequest_CompInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerDetectRequest_CompInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerDetectRequest_CompInfo) ProtoMessage() {}

func (x *VulnerDetectRequest_CompInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerDetectRequest_CompInfo.ProtoReflect.Descriptor instead.
func (*VulnerDetectRequest_CompInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{59, 0}
}

func (x *VulnerDetectRequest_CompInfo) GetRemote() []byte {
	if x != nil {
		return x.Remote
	}
	return nil
}

func (x *VulnerDetectRequest_CompInfo) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *VulnerDetectRequest_CompInfo) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VulnerDetectRequest_CompInfo) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

type BaselineDetectRequest_CompInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remote  []byte `protobuf:"bytes,1,req,name=remote" json:"remote,omitempty"`
	Md5     []byte `protobuf:"bytes,2,req,name=md5" json:"md5,omitempty"`
	Name    []byte `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Version []byte `protobuf:"bytes,4,req,name=version" json:"version,omitempty"`
}

func (x *BaselineDetectRequest_CompInfo) Reset() {
	*x = BaselineDetectRequest_CompInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaselineDetectRequest_CompInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaselineDetectRequest_CompInfo) ProtoMessage() {}

func (x *BaselineDetectRequest_CompInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaselineDetectRequest_CompInfo.ProtoReflect.Descriptor instead.
func (*BaselineDetectRequest_CompInfo) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{64, 0}
}

func (x *BaselineDetectRequest_CompInfo) GetRemote() []byte {
	if x != nil {
		return x.Remote
	}
	return nil
}

func (x *BaselineDetectRequest_CompInfo) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *BaselineDetectRequest_CompInfo) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *BaselineDetectRequest_CompInfo) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

type TcsReportHashs_TcsHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5   []byte  `protobuf:"bytes,1,req,name=md5" json:"md5,omitempty"`
	Path  []byte  `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	Size  *int32  `protobuf:"varint,3,req,name=size" json:"size,omitempty"`
	Mtime *uint32 `protobuf:"varint,4,req,name=mtime" json:"mtime,omitempty"`
}

func (x *TcsReportHashs_TcsHash) Reset() {
	*x = TcsReportHashs_TcsHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportHashs_TcsHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportHashs_TcsHash) ProtoMessage() {}

func (x *TcsReportHashs_TcsHash) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportHashs_TcsHash.ProtoReflect.Descriptor instead.
func (*TcsReportHashs_TcsHash) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{81, 0}
}

func (x *TcsReportHashs_TcsHash) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *TcsReportHashs_TcsHash) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TcsReportHashs_TcsHash) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *TcsReportHashs_TcsHash) GetMtime() uint32 {
	if x != nil && x.Mtime != nil {
		return *x.Mtime
	}
	return 0
}

type TcsReportFiles_TcsFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5     []byte `protobuf:"bytes,1,req,name=md5" json:"md5,omitempty"`
	Path    []byte `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,3,req,name=content" json:"content,omitempty"`
}

func (x *TcsReportFiles_TcsFile) Reset() {
	*x = TcsReportFiles_TcsFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsReportFiles_TcsFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsReportFiles_TcsFile) ProtoMessage() {}

func (x *TcsReportFiles_TcsFile) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsReportFiles_TcsFile.ProtoReflect.Descriptor instead.
func (*TcsReportFiles_TcsFile) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{83, 0}
}

func (x *TcsReportFiles_TcsFile) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *TcsReportFiles_TcsFile) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TcsReportFiles_TcsFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type TcsScanContainerAck_TcsContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containerid []byte                         `protobuf:"bytes,1,req,name=containerid" json:"containerid,omitempty"`
	Status      *TcsScanContainerAck_TcsStatus `protobuf:"varint,2,req,name=status,enum=ydeyes.TcsScanContainerAck_TcsStatus" json:"status,omitempty"`
	ScanFiles   *uint32                        `protobuf:"varint,3,req,name=scan_files,json=scanFiles" json:"scan_files,omitempty"`
	ReportHashs *uint32                        `protobuf:"varint,4,req,name=report_hashs,json=reportHashs" json:"report_hashs,omitempty"`
}

func (x *TcsScanContainerAck_TcsContainerStatus) Reset() {
	*x = TcsScanContainerAck_TcsContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanContainerAck_TcsContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanContainerAck_TcsContainerStatus) ProtoMessage() {}

func (x *TcsScanContainerAck_TcsContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanContainerAck_TcsContainerStatus.ProtoReflect.Descriptor instead.
func (*TcsScanContainerAck_TcsContainerStatus) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{94, 0}
}

func (x *TcsScanContainerAck_TcsContainerStatus) GetContainerid() []byte {
	if x != nil {
		return x.Containerid
	}
	return nil
}

func (x *TcsScanContainerAck_TcsContainerStatus) GetStatus() TcsScanContainerAck_TcsStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TcsScanContainerAck_NotFound
}

func (x *TcsScanContainerAck_TcsContainerStatus) GetScanFiles() uint32 {
	if x != nil && x.ScanFiles != nil {
		return *x.ScanFiles
	}
	return 0
}

func (x *TcsScanContainerAck_TcsContainerStatus) GetReportHashs() uint32 {
	if x != nil && x.ReportHashs != nil {
		return *x.ReportHashs
	}
	return 0
}

type TcsScanFile_TcsFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    *TcsScanHash `protobuf:"bytes,1,req,name=hash" json:"hash,omitempty"`
	Content []byte       `protobuf:"bytes,2,req,name=content" json:"content,omitempty"`
}

func (x *TcsScanFile_TcsFiles) Reset() {
	*x = TcsScanFile_TcsFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydeyes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcsScanFile_TcsFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcsScanFile_TcsFiles) ProtoMessage() {}

func (x *TcsScanFile_TcsFiles) ProtoReflect() protoreflect.Message {
	mi := &file_ydeyes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcsScanFile_TcsFiles.ProtoReflect.Descriptor instead.
func (*TcsScanFile_TcsFiles) Descriptor() ([]byte, []int) {
	return file_ydeyes_proto_rawDescGZIP(), []int{99, 0}
}

func (x *TcsScanFile_TcsFiles) GetHash() *TcsScanHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TcsScanFile_TcsFiles) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_ydeyes_proto protoreflect.FileDescriptor

var file_ydeyes_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x22, 0xf9, 0x1d, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x43, 0x6d,
	0x64, 0x22, 0x31, 0x0a, 0x11, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x54,
	0x58, 0x5f, 0x43, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x54, 0x58,
	0x5f, 0x43, 0x10, 0x36, 0x22, 0x34, 0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x45, 0x54, 0x58, 0x5f, 0x43, 0x10, 0x29, 0x22, 0xe5, 0x07, 0x0a, 0x07, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x6d, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6d, 0x64, 0x5f, 0x77, 0x65,
	0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6d, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x71,
	0x75, 0x61, 0x72, 0x61, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6d,
	0x64, 0x5f, 0x62, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x74,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6d, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x63,
	0x6d, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d,
	0x73, 0x67, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x6d, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6d, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x18, 0x12,
	0x18, 0x0a, 0x14, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6d, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x20, 0x12,
	0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x63,
	0x6d, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x10, 0x23, 0x12, 0x16,
	0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x25, 0x12, 0x14, 0x0a,
	0x10, 0x63, 0x6d, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x61, 0x69, 0x63, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13,
	0x63, 0x6d, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x79, 0x6d, 0x6f, 0x6e, 0x10,
	0x30, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x10,
	0x63, 0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x79, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x10, 0x99, 0xb3, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12,
	0x63, 0x6d, 0x64, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x10, 0x41, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x10, 0x50, 0x12, 0x15, 0x0a, 0x11,
	0x63, 0x6d, 0x64, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x10, 0x60, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6d, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x10, 0x61, 0x12, 0x12, 0x0a, 0x0e,
	0x63, 0x6d, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x10, 0x62,
	0x12, 0x18, 0x0a, 0x14, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x10, 0x63, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x6d,
	0x64, 0x5f, 0x74, 0x63, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f,
	0x68, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x10, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x10,
	0x70, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x10, 0x71, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x63,
	0x73, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x63,
	0x6d, 0x64, 0x5f, 0x75, 0x73, 0x72, 0x63, 0x66, 0x67, 0x56, 0x32, 0x10, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x66, 0x69, 0x6d, 0x66, 0x69, 0x6c, 0x65,
	0x6d, 0x6f, 0x6e, 0x10, 0x75, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x63, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x10, 0x76, 0x22, 0x9d, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x12, 0x0f, 0x0a,
	0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x80, 0x02, 0x12, 0x15,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x10, 0x80, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x72, 0x73, 0x70, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x62,
	0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x10, 0x80, 0x04, 0x12, 0x0d, 0x0a, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x67, 0x10, 0x80, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x10, 0x81, 0x06, 0x12, 0x0d, 0x0a, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x82, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x73, 0x70, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x79, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67,
	0x10, 0x80, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x10, 0x81, 0x02, 0x12, 0x1e, 0x0a,
	0x19, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x80, 0x02, 0x12, 0x1e, 0x0a,
	0x19, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x10, 0x81, 0x02, 0x12, 0x21, 0x0a,
	0x1c, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x82, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61,
	0x72, 0x61, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x10, 0x88, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x77, 0x65,
	0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x61, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x10, 0x89, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x5f, 0x71, 0x75, 0x61, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x10, 0x90, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x77, 0x65, 0x62, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x91, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x77, 0x65,
	0x62, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x61, 0x5f, 0x6e, 0x6f, 0x74,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x92, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x08,
	0x12, 0x27, 0x0a, 0x23, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x10, 0x12, 0x24, 0x0a, 0x20, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x12,
	0x12, 0x29, 0x0a, 0x25, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x06, 0x12, 0x21, 0x0a, 0x1d, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x74, 0x63, 0x73,
	0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x63,
	0x6b, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x05,
	0x12, 0x1f, 0x0a, 0x1b, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x10,
	0x06, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x74, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x74, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x74, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x74, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x75, 0x73, 0x72, 0x63, 0x66, 0x67, 0x56, 0x32, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x75, 0x73, 0x72, 0x63, 0x66, 0x67,
	0x56, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x75, 0x73, 0x72, 0x63, 0x66, 0x67, 0x56, 0x32, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x75, 0x73, 0x72, 0x63, 0x66, 0x67, 0x56, 0x32, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x6d, 0x63, 0x6f, 0x72,
	0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x66, 0x69,
	0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x66, 0x69, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x69, 0x6d,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x69, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x66, 0x69, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x66,
	0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x69, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x0e, 0x66, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x66, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x10, 0x12,
	0x1e, 0x0a, 0x1a, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x6b, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x74, 0x63,
	0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x10,
	0x03, 0x12, 0x29, 0x0a, 0x25, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x74, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x06, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0x43, 0x0a, 0x0d, 0x59, 0x64, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x69, 0x72, 0x75, 0x73, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x62, 0x77, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0f, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x22, 0xf5, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x0d, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x12, 0x2b, 0x0a, 0x0c, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x59, 0x64, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x16, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x0d, 0x0a, 0x05, 0x71, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x10, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x1c, 0x0a, 0x14, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x22,
	0xcf, 0x02, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x15, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6d,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x18, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0e,
	0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x22, 0x51, 0x0a, 0x07, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x64, 0x62,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x22, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2b, 0x0a, 0x12, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x07,
	0x52, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x22, 0xda,
	0x05, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x17, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x17, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x12, 0x1d, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x12, 0x1f, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x12, 0x1d, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x12, 0x1a, 0x0a, 0x12, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x19, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x62, 0x77, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x12, 0x18, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x1a, 0x0a, 0x12, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x6d, 0x64, 0x35,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6f, 0x70, 0x72, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x12, 0x18, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x12, 0x19, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x12, 0x19, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x12, 0x2c, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x06, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79,
	0x65, 0x73, 0x2e, 0x50, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x08,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x45,
	0x78, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x61, 0x6e,
	0x44, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63,
	0x4d, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63,
	0x4d, 0x6f, 0x6e, 0x44, 0x6c, 0x6c, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63,
	0x4d, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x09, 0x22, 0xa6, 0x01, 0x0a, 0x08,
	0x50, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x65, 0x78, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x12, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0xe3, 0x04, 0x0a, 0x0a, 0x42, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x12, 0x18, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x12,
	0x17, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x16,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x12, 0x19, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x17, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x30, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x75,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x22, 0x5b, 0x0a, 0x0e, 0x42, 0x72, 0x75,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x56, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x4f, 0x4b, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0b,
	0x45, 0x56, 0x54, 0x5f, 0x48, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x45, 0x56, 0x54, 0x5f, 0x48, 0x41, 0x43, 0x4b, 0x4f, 0x4b, 0x10, 0xac, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x56, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0x90, 0x03, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x53,
	0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x57, 0x44, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x53, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x57, 0x44, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x58, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x49, 0x58, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x53, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4e, 0x45, 0x54, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x22, 0x4d, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x18, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x22, 0xaf, 0x05, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x1a, 0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x17, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x68, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x16, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6d, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x17,
	0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x16,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x12, 0x16, 0x0a, 0x0e, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x1c, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x12,
	0x1b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x12, 0x1b, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x18, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18,
	0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x1e, 0x0a, 0x16, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x1c, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xc3, 0x01, 0x0a, 0x0e,
	0x52, 0x73, 0x70, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x1f, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x1d, 0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x19, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x17, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x15, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05,
	0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14,
	0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x19, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x22, 0x5c, 0x0a, 0x09, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x22, 0xf4, 0x01, 0x0a, 0x09, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13,
	0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x14, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14,
	0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x22, 0x52, 0x0a, 0x09, 0x44, 0x6e,
	0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x61, 0x6e, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0f, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08,
	0x61, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xcd,
	0x01, 0x0a, 0x0d, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x45, 0x53,
	0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d,
	0x0a, 0x05, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0d, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x21, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xab,
	0x01, 0x0a, 0x08, 0x44, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d, 0x0a, 0x05, 0x71, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x63, 0x6d,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0d, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x92, 0x05, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x00, 0x12,
	0x35, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0xc9, 0x02, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x16,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x12, 0x1a, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x12, 0x14, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x08, 0x12, 0x19, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x12, 0x16, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x77, 0x64, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x08, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x22, 0x33, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x22, 0x64, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x04, 0x22, 0x7d, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x44, 0x55, 0x4d, 0x50,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x4d, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x10, 0x03, 0x22, 0x30,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x02,
	0x22, 0xd7, 0x02, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x73, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0a, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x33, 0x0a, 0x0d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x1a, 0x62, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x22, 0x1c, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x22, 0xad, 0x05, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x22, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x1a, 0x96, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0c, 0x0a,
	0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x0b, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x22, 0x31, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1c, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x14, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xfb, 0x03, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x3e, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x1a, 0x6c, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x0d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x22, 0x42, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x63,
	0x4e, 0x75, 0x6d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x44, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x10, 0x04, 0x22, 0x2b, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x44, 0x4c, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x10, 0x02, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x11, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x1a, 0x33, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x12, 0x0e,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x9e,
	0x04, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x8e,
	0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x17, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1d, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1e, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x22,
	0xcc, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x41, 0x0a, 0x12, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xcf, 0x02, 0x0a,
	0x10, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x17, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1d, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1e, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x2a,
	0x0a, 0x0d, 0x53, 0x71, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x71,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12, 0x0c, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x65, 0x0a,
	0x0e, 0x53, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0x46, 0x0a, 0x0e, 0x53, 0x71, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x22, 0x36, 0x0a, 0x12,
	0x53, 0x71, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0xfa, 0x01, 0x0a, 0x07, 0x59, 0x6d, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d,
	0x0a, 0x05, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x28, 0x0a,
	0x04, 0x72, 0x65, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x59, 0x6d, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x2e, 0x59, 0x6d, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x12, 0x0c, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x1a, 0x99, 0x01, 0x0a, 0x0a, 0x59, 0x6d, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x67, 0x12, 0x0b, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x04, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x12, 0x1e, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x59, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x72,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x39, 0x0a,
	0x09, 0x43, 0x72, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x50,
	0x55, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x6d,
	0x5f, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x03, 0x22, 0x29, 0x0a, 0x0c, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x44, 0x4c, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x11, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d, 0x0a, 0x05, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x12, 0x12, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x22,
	0x53, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x17, 0x0a, 0x0f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x17, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x12, 0x17, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x5e, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x22, 0x3a, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x74, 0x6f, 0x6d, 0x63, 0x61, 0x74, 0x10, 0x03, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x4d, 0x73, 0x67, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x1a, 0x36, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x9d,
	0x01, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x30, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1,
	0x02, 0x0a, 0x1a, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x1a, 0x0a,
	0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0c, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x15, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x0d, 0x22, 0x6d, 0x0a, 0x1b, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x22, 0x6b, 0x0a, 0x19, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xe8,
	0x01, 0x0a, 0x1a, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x31, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x2c, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x54, 0x61,
	0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x2c, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79,
	0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x20, 0x54,
	0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22,
	0x88, 0x02, 0x0a, 0x1a, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x55, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x30,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x31, 0x0a, 0x09,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x7e, 0x0a, 0x1b, 0x54, 0x61,
	0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x55, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x22, 0xe5, 0x04, 0x0a, 0x1f, 0x54,
	0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x4c,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x6f, 0x42, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x6f, 0x42, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x0a, 0x1b, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x50, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x10, 0x01, 0x22, 0x5c, 0x0a, 0x1b, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x50, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x57,
	0x10, 0x02, 0x22, 0xbc, 0x02, 0x0a, 0x20, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x42,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x75, 0x0a, 0x11, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x7f, 0x0a, 0x1c, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0c, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x04, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0c, 0x22, 0xb3, 0x02, 0x0a, 0x21, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x6d, 0x64, 0x35, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x85, 0x01, 0x0a, 0x22, 0x54, 0x61, 0x6d,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12,
	0x0f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c,
	0x22, 0x6a, 0x0a, 0x18, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0x6b, 0x0a, 0x19,
	0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xca, 0x01, 0x0a, 0x07, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x2f,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x0e, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x12,
	0x0f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x0e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x22, 0x34, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x5a, 0x49, 0x50, 0x10, 0x03, 0x22, 0xbe, 0x02, 0x0a, 0x13, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x62, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63,
	0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x3c, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x1a,
	0x46, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x64, 0x0a, 0x14, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xe3, 0x01,
	0x0a, 0x13, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x04, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x04, 0x22, 0x67, 0x0a, 0x17, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xb5, 0x01, 0x0a,
	0x18, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0xaf, 0x02, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x62, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63,
	0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x3e, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x1a, 0x46,
	0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64,
	0x35, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x66, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xe5,
	0x01, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x14, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x02, 0x28, 0x04, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x1c, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x12, 0x1a, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x12, 0x1a, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x22, 0xda, 0x01, 0x0a,
	0x12, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x65, 0x73, 0x12,
	0x0f, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x17, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x5e, 0x0a, 0x0e, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xb4, 0x02, 0x0a, 0x13, 0x4d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x12,
	0x2f, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x18, 0x0a, 0x10, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x34, 0x0a, 0x0e, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x16, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x22, 0x66, 0x0a, 0x16, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x04, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x22, 0xc1,
	0x01, 0x0a, 0x19, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x64,
	0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x65, 0x73, 0x22, 0x59, 0x0a, 0x1a, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x58, 0x0a,
	0x19, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x13,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x64, 0x65, 0x79,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x74, 0x68, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0b,
	0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x12, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x13, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x22, 0x77, 0x0a, 0x0c, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x0f, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x37, 0x0a,
	0x12, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x54, 0x63, 0x73, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f,
	0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x2e, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x6b, 0x2e, 0x54, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x22, 0x6f,
	0x0a, 0x09, 0x54, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x22,
	0xb8, 0x01, 0x0a, 0x0e, 0x54, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
	0x2e, 0x54, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x73, 0x2e,
	0x54, 0x63, 0x73, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x41, 0x0a, 0x07, 0x54, 0x63, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x12, 0x0d, 0x0a, 0x05, 0x6d,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x68, 0x0a, 0x11, 0x54, 0x63,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x73, 0x41, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x1d, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x54, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54,
	0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x2d, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79,
	0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x35, 0x0a, 0x07,
	0x54, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0c, 0x22, 0x49, 0x0a, 0x11, 0x54, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e,
	0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x11, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x39,
	0x0a, 0x13, 0x54, 0x63, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x50, 0x0a, 0x0e, 0x54, 0x63, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65,
	0x73, 0x2e, 0x54, 0x63, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x0e, 0x54,
	0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79, 0x64, 0x65,
	0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x03,
	0x0a, 0x0e, 0x54, 0x63, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x10, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x12, 0x1e, 0x0a, 0x16,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x12, 0x1d, 0x0a, 0x15, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x12, 0x1f, 0x0a, 0x17, 0x65, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x79, 0x73,
	0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79,
	0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
	0x2e, 0x54, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x12, 0x2d, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65,
	0x6d, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x22, 0x53, 0x0a, 0x16, 0x54, 0x63, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x43, 0x4b, 0x12, 0x10, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12,
	0x27, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x4b, 0x0a, 0x14, 0x54, 0x63, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x22, 0x3c, 0x0a, 0x17, 0x54, 0x63, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x43, 0x4b,
	0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e,
	0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x50, 0x0a, 0x16, 0x54, 0x63, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x22, 0xb6, 0x03, 0x0a, 0x13, 0x54,
	0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x3b, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x2e,
	0x54, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x1a, 0x8a, 0x01, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x2e, 0x54, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x22, 0xa0, 0x01, 0x0a, 0x09, 0x54, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x41, 0x43, 0x4b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x0a, 0x22, 0xb2, 0x02, 0x0a, 0x0f, 0x54, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a,
	0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12,
	0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x12, 0x0b, 0x0a, 0x03,
	0x65, 0x78, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x6d, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0e, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a,
	0x06, 0x75, 0x70, 0x70, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0d, 0x0a,
	0x05, 0x70, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x10, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x54, 0x63, 0x73,
	0x53, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x12, 0x0d, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x0d, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x12,
	0x0d, 0x0a, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c,
	0x12, 0x29, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x63,
	0x6f, 0x6d, 0x6d, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79,
	0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x22, 0x48,
	0x0a, 0x0f, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x12, 0x22, 0x0a, 0x05, 0x68, 0x61, 0x73, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73,
	0x53, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x50, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x12, 0x11,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x12, 0x27, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54,
	0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x54,
	0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x2b, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x2e, 0x54, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x08, 0x54, 0x63,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73, 0x2e, 0x54, 0x63,
	0x73, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x22, 0x23, 0x0a, 0x0e, 0x54, 0x63,
	0x73, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x2a,
	0x78, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x36, 0x34, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x33,
	0x32, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x4c, 0x49, 0x4e, 0x55, 0x58, 0x36, 0x34, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x07, 0x52, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x53,
	0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x8a,
	0x01, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x42, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x57, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x57, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f,
	0x42, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x42, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x31, 0x10,
	0x15, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x57, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x32, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x41,
	0x59, 0x5f, 0x42, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x1e, 0x2a, 0x50, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x2a, 0xaa, 0x02,
	0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x54,
	0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x54, 0x5f,
	0x4d, 0x41, 0x4c, 0x41, 0x57, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51,
	0x55, 0x41, 0x52, 0x41, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x54,
	0x5f, 0x4d, 0x41, 0x4c, 0x41, 0x57, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x56, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x41, 0x57, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x54, 0x44, 0x45, 0x4c, 0x10, 0x0c, 0x2a, 0x3c, 0x0a, 0x0b, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0xbd, 0x05, 0x0a, 0x08, 0x59, 0x6d, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x13, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x80, 0x02, 0x12,
	0x1b, 0x0a, 0x16, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x81, 0x02, 0x12, 0x1e, 0x0a, 0x19,
	0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x82, 0x02, 0x12, 0x21, 0x0a, 0x1c,
	0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x83, 0x02, 0x12,
	0x18, 0x0a, 0x13, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x84, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x59, 0x4d, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x85, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x86, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x59, 0x4d, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x87, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x88,
	0x02, 0x12, 0x26, 0x0a, 0x21, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x89, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x59, 0x4d, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x8a, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x8b, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x59,
	0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x8c, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x59, 0x4d, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45,
	0x58, 0x10, 0x8d, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x58, 0x10, 0x8e, 0x02, 0x12,
	0x17, 0x0a, 0x12, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x46, 0x4c, 0x55, 0x53,
	0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x8f, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x59, 0x4d, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x90, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x55, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x91, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x59, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x92, 0x02, 0x12, 0x1e, 0x0a, 0x19,
	0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x93, 0x02, 0x12, 0x19, 0x0a, 0x14,
	0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x94, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x59, 0x4d, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x47, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x95, 0x02, 0x12,
	0x19, 0x0a, 0x14, 0x59, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x96, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x59, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x97, 0x02, 0x2a, 0xe7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x5f,
	0x4b, 0x65, 0x79, 0x10, 0xa1, 0x8d, 0x06, 0x12, 0x16, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x4b, 0x65, 0x79, 0x10, 0xa2, 0x8d, 0x06, 0x12,
	0x19, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x4b, 0x65, 0x79, 0x10, 0xa3, 0x8d, 0x06, 0x12, 0x19, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x4b, 0x65,
	0x79, 0x10, 0xa4, 0x8d, 0x06, 0x12, 0x1f, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x4b, 0x65, 0x79, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x10, 0xa5, 0x8d, 0x06, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x5f, 0x4b, 0x65, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0xc1, 0x9a, 0x0c, 0x12, 0x1c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x53, 0x65, 0x74, 0x5f, 0x4b, 0x65, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0xc2,
	0x9a, 0x0c, 0x2a, 0xab, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05,
	0x2a, 0x84, 0x04, 0x0a, 0x16, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x50, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x54,
	0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x42, 0x49, 0x47, 0x10, 0x10, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f,
	0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x50, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x63, 0x2a, 0x54, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x44, 0x49, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x50, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x2a, 0xbb, 0x01,
	0x0a, 0x18, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x80, 0x04, 0x0a, 0x15,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x44, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x44,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x56,
	0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x44, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x55, 0x4e, 0x5a, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x07,
	0x12, 0x20, 0x0a, 0x1c, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x4d, 0x4f, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x44, 0x5f, 0x45,
	0x58, 0x50, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13,
	0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x10,
	0x12, 0x1c, 0x0a, 0x18, 0x56, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x63, 0x2a, 0x82,
	0x04, 0x0a, 0x17, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x55, 0x4e, 0x5a, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x42, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x42, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x4d, 0x4f, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x42, 0x49, 0x47, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x63, 0x2a, 0xdb, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x63, 0x2a, 0x35, 0x0a, 0x0f, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x12, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x45, 0x50, 0x10, 0x01, 0x2a, 0x50, 0x0a, 0x0e, 0x54, 0x63, 0x73, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x63, 0x73, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x63, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x63, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x09, 0x54, 0x63, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x63, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x03, 0x2a, 0xf1,
	0x04, 0x0a, 0x0c, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x49, 0x4e, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x63,
	0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6e, 0x79, 0x10,
	0x65, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x41, 0x58, 0x10, 0xc8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x63, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x49, 0x4e, 0x10, 0xc9, 0x01,
	0x12, 0x1e, 0x0a, 0x19, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x10, 0xc9, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0xca, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x53, 0x10, 0xcb, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x63, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x72, 0x69, 0x76, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x10, 0xcc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x63, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x72, 0x69, 0x76, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0xcd, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x63,
	0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x10, 0xce, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x41,
	0x58, 0x10, 0xac, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x49, 0x4e, 0x10, 0xad, 0x02, 0x12, 0x18, 0x0a,
	0x13, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x79, 0x73,
	0x63, 0x61, 0x6c, 0x6c, 0x10, 0xad, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x41, 0x58, 0x10, 0x90, 0x03,
	0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x4e, 0x10, 0x91, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x91, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x92, 0x03,
	0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x6d, 0x6f, 0x6e, 0x4d, 0x41, 0x58, 0x10, 0xf4, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x4e, 0x10,
	0xf5, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x10, 0xf5, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x63, 0x73,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x10, 0xf6, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x63, 0x73, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x6d, 0x6f, 0x6e, 0x4d, 0x41, 0x58, 0x10, 0xd8, 0x04, 0x1a, 0x02,
	0x10, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x79, 0x64, 0x65, 0x79, 0x65, 0x73,
}

var (
	file_ydeyes_proto_rawDescOnce sync.Once
	file_ydeyes_proto_rawDescData = file_ydeyes_proto_rawDesc
)

func file_ydeyes_proto_rawDescGZIP() []byte {
	file_ydeyes_proto_rawDescOnce.Do(func() {
		file_ydeyes_proto_rawDescData = protoimpl.X.CompressGZIP(file_ydeyes_proto_rawDescData)
	})
	return file_ydeyes_proto_rawDescData
}

var file_ydeyes_proto_enumTypes = make([]protoimpl.EnumInfo, 44)
var file_ydeyes_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_ydeyes_proto_goTypes = []interface{}{
	(Platform)(0),                          // 0: ydeyes.Platform
	(RspCode)(0),                           // 1: ydeyes.RspCode
	(SpecimenBwType)(0),                    // 2: ydeyes.SpecimenBwType
	(FileType)(0),                          // 3: ydeyes.FileType
	(EventsMalwareStatus)(0),               // 4: ydeyes.EventsMalwareStatus
	(FileOptCode)(0),                       // 5: ydeyes.FileOptCode
	(YmonOper)(0),                          // 6: ydeyes.YmonOper
	(RegistryOperate)(0),                   // 7: ydeyes.RegistryOperate
	(TamperProtectStatus)(0),               // 8: ydeyes.TamperProtectStatus
	(TamperProtectException)(0),            // 9: ydeyes.TamperProtectException
	(TamperProtectFileType)(0),             // 10: ydeyes.TamperProtectFileType
	(TamperProtectRecoverType)(0),          // 11: ydeyes.TamperProtectRecoverType
	(VulnerDetectException)(0),             // 12: ydeyes.VulnerDetectException
	(BaselineDetectException)(0),           // 13: ydeyes.BaselineDetectException
	(MalwareScanException)(0),              // 14: ydeyes.MalwareScanException
	(MalwareScanType)(0),                   // 15: ydeyes.MalwareScanType
	(MalwareMonitorType)(0),                // 16: ydeyes.MalwareMonitorType
	(TcsMonitorMode)(0),                    // 17: ydeyes.TcsMonitorMode
	(TcsAction)(0),                         // 18: ydeyes.TcsAction
	(TcsAlertType)(0),                      // 19: ydeyes.TcsAlertType
	(MsgCmd_TcpProtoDelimiter)(0),          // 20: ydeyes.MsgCmd.TcpProtoDelimiter
	(MsgCmd_HttpProtoDelimiter)(0),         // 21: ydeyes.MsgCmd.HttpProtoDelimiter
	(MsgCmdMaincmd)(0),                     // 22: ydeyes.MsgCmd.maincmd
	(MsgCmdSubcmd)(0),                      // 23: ydeyes.MsgCmd.subcmd
	(WebShell_DetectBy)(0),                 // 24: ydeyes.WebShell.DetectBy
	(BruteForce_BruteForceType)(0),         // 25: ydeyes.BruteForce.BruteForceType
	(BruteForce_LoginType)(0),              // 26: ydeyes.BruteForce.LoginType
	(UserAccountInfo_AccountPrivilege)(0),  // 27: ydeyes.UserAccountInfo.AccountPrivilege
	(UserAccountInfo_ModifiedType)(0),      // 28: ydeyes.UserAccountInfo.ModifiedType
	(AgentDumpDefine_DumpReason)(0),        // 29: ydeyes.AgentDumpDefine.DumpReason
	(AgentDumpDefine_Platform)(0),          // 30: ydeyes.AgentDumpDefine.Platform
	(OpenPortMsg_ReportType)(0),            // 31: ydeyes.OpenPortMsg.ReportType
	(ProcessInfoMsg_ReportType)(0),         // 32: ydeyes.ProcessInfoMsg.ReportType
	(ProcessInfoMsg_ModifiedType)(0),       // 33: ydeyes.ProcessInfoMsg.ModifiedType
	(AgentMonitorReport_MonitorId)(0),      // 34: ydeyes.AgentMonitorReport.MonitorId
	(AgentMonitorReport_MonitorProcess)(0), // 35: ydeyes.AgentMonitorReport.MonitorProcess
	(AgentCrashReport_CrashType)(0),        // 36: ydeyes.AgentCrashReport.CrashType
	(AgentCrashReport_CrashProcess)(0),     // 37: ydeyes.AgentCrashReport.CrashProcess
	(WebServerInfo_ServerType)(0),          // 38: ydeyes.WebServerInfo.ServerType
	(TamperProtectReportFilesRequest_TamperProtectFileReportType)(0), // 39: ydeyes.TamperProtectReportFilesRequest.TamperProtectFileReportType
	(TamperProtectReportFilesRequest_TamperProtectFileChangeType)(0), // 40: ydeyes.TamperProtectReportFilesRequest.TamperProtectFileChangeType
	(FastMsg_MsgType)(0),                                       // 41: ydeyes.FastMsg.MsgType
	(TcsScanImageAck_TcsStatus)(0),                             // 42: ydeyes.TcsScanImageAck.TcsStatus
	(TcsScanContainerAck_TcsStatus)(0),                         // 43: ydeyes.TcsScanContainerAck.TcsStatus
	(*MsgCmd)(nil),                                             // 44: ydeyes.MsgCmd
	(*YdMalwareAttr)(nil),                                      // 45: ydeyes.YdMalwareAttr
	(*AppendInternal)(nil),                                     // 46: ydeyes.AppendInternal
	(*Head)(nil),                                               // 47: ydeyes.Head
	(*IdValue)(nil),                                            // 48: ydeyes.IdValue
	(*ReqBody)(nil),                                            // 49: ydeyes.ReqBody
	(*RspBody)(nil),                                            // 50: ydeyes.RspBody
	(*WebShell)(nil),                                           // 51: ydeyes.WebShell
	(*PsParent)(nil),                                           // 52: ydeyes.PsParent
	(*BruteForce)(nil),                                         // 53: ydeyes.BruteForce
	(*HeartBeat)(nil),                                          // 54: ydeyes.HeartBeat
	(*ReqMachineInfo)(nil),                                     // 55: ydeyes.ReqMachineInfo
	(*RspMachineInfo)(nil),                                     // 56: ydeyes.RspMachineInfo
	(*PushCommand)(nil),                                        // 57: ydeyes.PushCommand
	(*RetCommand)(nil),                                         // 58: ydeyes.RetCommand
	(*JsonProto)(nil),                                          // 59: ydeyes.JsonProto
	(*DnsRecord)(nil),                                          // 60: ydeyes.DnsRecord
	(*DnsAnswer)(nil),                                          // 61: ydeyes.DnsAnswer
	(*DnsRecordToES)(nil),                                      // 62: ydeyes.DnsRecordToES
	(*DnsQuery)(nil),                                           // 63: ydeyes.DnsQuery
	(*UserAccountInfo)(nil),                                    // 64: ydeyes.UserAccountInfo
	(*AgentDumpDefine)(nil),                                    // 65: ydeyes.AgentDumpDefine
	(*OpenPortMsg)(nil),                                        // 66: ydeyes.OpenPortMsg
	(*ProcessInfoMsg)(nil),                                     // 67: ydeyes.ProcessInfoMsg
	(*UserDefConfig)(nil),                                      // 68: ydeyes.UserDefConfig
	(*AgentMonitorReport)(nil),                                 // 69: ydeyes.AgentMonitorReport
	(*UserCommandReport)(nil),                                  // 70: ydeyes.UserCommandReport
	(*ProcPrivilegeEscalation)(nil),                            // 71: ydeyes.ProcPrivilegeEscalation
	(*ReverseShell)(nil),                                       // 72: ydeyes.ReverseShell
	(*SqCertInitReq)(nil),                                      // 73: ydeyes.SqCertInitReq
	(*SqCertInitRsp)(nil),                                      // 74: ydeyes.SqCertInitRsp
	(*SqApplyCertReq)(nil),                                     // 75: ydeyes.SqApplyCertReq
	(*SqApplyCertRsp)(nil),                                     // 76: ydeyes.SqApplyCertRsp
	(*SqVerifySignMsgReq)(nil),                                 // 77: ydeyes.SqVerifySignMsgReq
	(*YmonMsg)(nil),                                            // 78: ydeyes.YmonMsg
	(*AgentCrashReport)(nil),                                   // 79: ydeyes.AgentCrashReport
	(*MalwareScanStatus)(nil),                                  // 80: ydeyes.MalwareScanStatus
	(*FileCheckRequest)(nil),                                   // 81: ydeyes.FileCheckRequest
	(*FileCheckResponse)(nil),                                  // 82: ydeyes.FileCheckResponse
	(*WebServerInfo)(nil),                                      // 83: ydeyes.WebServerInfo
	(*CrontabMsg)(nil),                                         // 84: ydeyes.CrontabMsg
	(*TamperProtectFileInfo)(nil),                              // 85: ydeyes.TamperProtectFileInfo
	(*TamperProtectConfigRequest)(nil),                         // 86: ydeyes.TamperProtectConfigRequest
	(*TamperProtectConfigResponse)(nil),                        // 87: ydeyes.TamperProtectConfigResponse
	(*TamperProtectStartRequest)(nil),                          // 88: ydeyes.TamperProtectStartRequest
	(*TamperProtectStartResponse)(nil),                         // 89: ydeyes.TamperProtectStartResponse
	(*TamperProtectBackupFilesRequest)(nil),                    // 90: ydeyes.TamperProtectBackupFilesRequest
	(*TamperProtectBackupFilesResponse)(nil),                   // 91: ydeyes.TamperProtectBackupFilesResponse
	(*TamperProtectUpFileRequest)(nil),                         // 92: ydeyes.TamperProtectUpFileRequest
	(*TamperProtectUpFileResponse)(nil),                        // 93: ydeyes.TamperProtectUpFileResponse
	(*TamperProtectReportFilesRequest)(nil),                    // 94: ydeyes.TamperProtectReportFilesRequest
	(*TamperProtectReportFilesResponse)(nil),                   // 95: ydeyes.TamperProtectReportFilesResponse
	(*TamperProtectDownFileRequest)(nil),                       // 96: ydeyes.TamperProtectDownFileRequest
	(*TamperProtectDownFileResponse)(nil),                      // 97: ydeyes.TamperProtectDownFileResponse
	(*TamperProtectRecoverResultRequest)(nil),                  // 98: ydeyes.TamperProtectRecoverResultRequest
	(*TamperProtectRecoverResultResponse)(nil),                 // 99: ydeyes.TamperProtectRecoverResultResponse
	(*TamperProtectStopRequest)(nil),                           // 100: ydeyes.TamperProtectStopRequest
	(*TamperProtectStopResponse)(nil),                          // 101: ydeyes.TamperProtectStopResponse
	(*FastMsg)(nil),                                            // 102: ydeyes.FastMsg
	(*VulnerDetectRequest)(nil),                                // 103: ydeyes.VulnerDetectRequest
	(*VulnerDetectResponse)(nil),                               // 104: ydeyes.VulnerDetectResponse
	(*VulnerDetectMessage)(nil),                                // 105: ydeyes.VulnerDetectMessage
	(*VulnerDetectStopRequest)(nil),                            // 106: ydeyes.VulnerDetectStopRequest
	(*VulnerDetectStopResponse)(nil),                           // 107: ydeyes.VulnerDetectStopResponse
	(*BaselineDetectRequest)(nil),                              // 108: ydeyes.BaselineDetectRequest
	(*BaselineDetectResponse)(nil),                             // 109: ydeyes.BaselineDetectResponse
	(*BaselineDetectMessage)(nil),                              // 110: ydeyes.BaselineDetectMessage
	(*MalwarePathes)(nil),                                      // 111: ydeyes.MalwarePathes
	(*MalwareScanRequest)(nil),                                 // 112: ydeyes.MalwareScanRequest
	(*MalwareScanAck)(nil),                                     // 113: ydeyes.MalwareScanAck
	(*MalwareScanResponse)(nil),                                // 114: ydeyes.MalwareScanResponse
	(*MalwareScanStopRequest)(nil),                             // 115: ydeyes.MalwareScanStopRequest
	(*MalwareScanStopResponse)(nil),                            // 116: ydeyes.MalwareScanStopResponse
	(*MalwareMonitorPushRequest)(nil),                          // 117: ydeyes.MalwareMonitorPushRequest
	(*MalwareMonitorPushResponse)(nil),                         // 118: ydeyes.MalwareMonitorPushResponse
	(*MalwareMonitorPullRequest)(nil),                          // 119: ydeyes.MalwareMonitorPullRequest
	(*MalwareMonitorPullResponse)(nil),                         // 120: ydeyes.MalwareMonitorPullResponse
	(*TcsTaskComm)(nil),                                        // 121: ydeyes.TcsTaskComm
	(*TcsScanImage)(nil),                                       // 122: ydeyes.TcsScanImage
	(*TcsScanImageCancel)(nil),                                 // 123: ydeyes.TcsScanImageCancel
	(*TcsScanImageAck)(nil),                                    // 124: ydeyes.TcsScanImageAck
	(*TcsReportHashs)(nil),                                     // 125: ydeyes.TcsReportHashs
	(*TcsReportHashsAck)(nil),                                  // 126: ydeyes.TcsReportHashsAck
	(*TcsReportFiles)(nil),                                     // 127: ydeyes.TcsReportFiles
	(*TcsReportFilesAck)(nil),                                  // 128: ydeyes.TcsReportFilesAck
	(*TcsImageQueryPolicy)(nil),                                // 129: ydeyes.TcsImageQueryPolicy
	(*TcsProcmonRule)(nil),                                     // 130: ydeyes.TcsProcmonRule
	(*TcsFilemonRule)(nil),                                     // 131: ydeyes.TcsFilemonRule
	(*TcsImagePolicy)(nil),                                     // 132: ydeyes.TcsImagePolicy
	(*TcsImageQueryPolicyACK)(nil),                             // 133: ydeyes.TcsImageQueryPolicyACK
	(*TcsImagePolicyNotify)(nil),                               // 134: ydeyes.TcsImagePolicyNotify
	(*TcsImagePolicyNotifyACK)(nil),                            // 135: ydeyes.TcsImagePolicyNotifyACK
	(*TcsScanContainer)(nil),                                   // 136: ydeyes.TcsScanContainer
	(*TcsScanContainerCancel)(nil),                             // 137: ydeyes.TcsScanContainerCancel
	(*TcsScanContainerAck)(nil),                                // 138: ydeyes.TcsScanContainerAck
	(*TcsFileOperator)(nil),                                    // 139: ydeyes.TcsFileOperator
	(*TcsScanHash)(nil),                                        // 140: ydeyes.TcsScanHash
	(*TcsScanFileHash)(nil),                                    // 141: ydeyes.TcsScanFileHash
	(*TcsScanFileHashAck)(nil),                                 // 142: ydeyes.TcsScanFileHashAck
	(*TcsScanFile)(nil),                                        // 143: ydeyes.TcsScanFile
	(*TcsScanFileAck)(nil),                                     // 144: ydeyes.TcsScanFileAck
	(*UserAccountInfo_Account)(nil),                            // 145: ydeyes.UserAccountInfo.Account
	(*OpenPortMsg_PortInfo)(nil),                               // 146: ydeyes.OpenPortMsg.PortInfo
	(*ProcessInfoMsg_Process)(nil),                             // 147: ydeyes.ProcessInfoMsg.Process
	(*AgentMonitorReport_MonitorData)(nil),                     // 148: ydeyes.AgentMonitorReport.MonitorData
	(*UserCommandReport_CommandElement)(nil),                   // 149: ydeyes.UserCommandReport.CommandElement
	(*ProcPrivilegeEscalation_ProcPrivilegeInfo)(nil),          // 150: ydeyes.ProcPrivilegeEscalation.ProcPrivilegeInfo
	(*ReverseShell_ReverseShellInfo)(nil),                      // 151: ydeyes.ReverseShell.ReverseShellInfo
	(*YmonMsg_YmonMsgReg)(nil),                                 // 152: ydeyes.YmonMsg.YmonMsgReg
	(*WebServerInfo_Server)(nil),                               // 153: ydeyes.WebServerInfo.Server
	(*CrontabMsg_Crontab)(nil),                                 // 154: ydeyes.CrontabMsg.Crontab
	(*TamperProtectReportFilesRequest_FileToBeCompared)(nil),   // 155: ydeyes.TamperProtectReportFilesRequest.FileToBeCompared
	(*TamperProtectReportFilesResponse_FileToBeRecovered)(nil), // 156: ydeyes.TamperProtectReportFilesResponse.FileToBeRecovered
	(*VulnerDetectRequest_CompInfo)(nil),                       // 157: ydeyes.VulnerDetectRequest.CompInfo
	(*BaselineDetectRequest_CompInfo)(nil),                     // 158: ydeyes.BaselineDetectRequest.CompInfo
	(*TcsReportHashs_TcsHash)(nil),                             // 159: ydeyes.TcsReportHashs.TcsHash
	(*TcsReportFiles_TcsFile)(nil),                             // 160: ydeyes.TcsReportFiles.TcsFile
	(*TcsScanContainerAck_TcsContainerStatus)(nil),             // 161: ydeyes.TcsScanContainerAck.TcsContainerStatus
	(*TcsScanFile_TcsFiles)(nil),                               // 162: ydeyes.TcsScanFile.TcsFiles
}
var file_ydeyes_proto_depIdxs = []int32{
	45,  // 0: ydeyes.AppendInternal.malware_attr:type_name -> ydeyes.YdMalwareAttr
	46,  // 1: ydeyes.Head.appendInternal:type_name -> ydeyes.AppendInternal
	48,  // 2: ydeyes.ReqBody.IdValue_reportdata:type_name -> ydeyes.IdValue
	24,  // 3: ydeyes.WebShell.detect_by:type_name -> ydeyes.WebShell.DetectBy
	52,  // 4: ydeyes.WebShell.pstree:type_name -> ydeyes.PsParent
	26,  // 5: ydeyes.BruteForce.login_type:type_name -> ydeyes.BruteForce.LoginType
	61,  // 6: ydeyes.DnsRecordToES.answer:type_name -> ydeyes.DnsAnswer
	145, // 7: ydeyes.UserAccountInfo.account_list:type_name -> ydeyes.UserAccountInfo.Account
	0,   // 8: ydeyes.UserAccountInfo.platform:type_name -> ydeyes.Platform
	31,  // 9: ydeyes.OpenPortMsg.report_type:type_name -> ydeyes.OpenPortMsg.ReportType
	146, // 10: ydeyes.OpenPortMsg.port_info_lst:type_name -> ydeyes.OpenPortMsg.PortInfo
	147, // 11: ydeyes.ProcessInfoMsg.process_list:type_name -> ydeyes.ProcessInfoMsg.Process
	32,  // 12: ydeyes.ProcessInfoMsg.report_type:type_name -> ydeyes.ProcessInfoMsg.ReportType
	0,   // 13: ydeyes.ProcessInfoMsg.platform:type_name -> ydeyes.Platform
	0,   // 14: ydeyes.UserDefConfig.platform:type_name -> ydeyes.Platform
	148, // 15: ydeyes.AgentMonitorReport.monitor_values:type_name -> ydeyes.AgentMonitorReport.MonitorData
	0,   // 16: ydeyes.AgentMonitorReport.platform:type_name -> ydeyes.Platform
	35,  // 17: ydeyes.AgentMonitorReport.monitor_process:type_name -> ydeyes.AgentMonitorReport.MonitorProcess
	149, // 18: ydeyes.UserCommandReport.command_list:type_name -> ydeyes.UserCommandReport.CommandElement
	0,   // 19: ydeyes.UserCommandReport.platform:type_name -> ydeyes.Platform
	150, // 20: ydeyes.ProcPrivilegeEscalation.privilege_list:type_name -> ydeyes.ProcPrivilegeEscalation.ProcPrivilegeInfo
	151, // 21: ydeyes.ReverseShell.reverse_shell_list:type_name -> ydeyes.ReverseShell.ReverseShellInfo
	152, // 22: ydeyes.YmonMsg.regs:type_name -> ydeyes.YmonMsg.YmonMsgReg
	36,  // 23: ydeyes.AgentCrashReport.crash_type:type_name -> ydeyes.AgentCrashReport.CrashType
	0,   // 24: ydeyes.AgentCrashReport.platform:type_name -> ydeyes.Platform
	37,  // 25: ydeyes.AgentCrashReport.crash_process:type_name -> ydeyes.AgentCrashReport.CrashProcess
	153, // 26: ydeyes.WebServerInfo.server_list:type_name -> ydeyes.WebServerInfo.Server
	154, // 27: ydeyes.CrontabMsg.crontab_list:type_name -> ydeyes.CrontabMsg.Crontab
	10,  // 28: ydeyes.TamperProtectFileInfo.file_type:type_name -> ydeyes.TamperProtectFileType
	8,   // 29: ydeyes.TamperProtectConfigRequest.status:type_name -> ydeyes.TamperProtectStatus
	9,   // 30: ydeyes.TamperProtectStartResponse.exception:type_name -> ydeyes.TamperProtectException
	85,  // 31: ydeyes.TamperProtectStartResponse.files:type_name -> ydeyes.TamperProtectFileInfo
	85,  // 32: ydeyes.TamperProtectBackupFilesRequest.files:type_name -> ydeyes.TamperProtectFileInfo
	85,  // 33: ydeyes.TamperProtectUpFileRequest.file_info:type_name -> ydeyes.TamperProtectFileInfo
	9,   // 34: ydeyes.TamperProtectUpFileRequest.exception:type_name -> ydeyes.TamperProtectException
	155, // 35: ydeyes.TamperProtectReportFilesRequest.files_info:type_name -> ydeyes.TamperProtectReportFilesRequest.FileToBeCompared
	39,  // 36: ydeyes.TamperProtectReportFilesRequest.report_type:type_name -> ydeyes.TamperProtectReportFilesRequest.TamperProtectFileReportType
	156, // 37: ydeyes.TamperProtectReportFilesResponse.recover_files:type_name -> ydeyes.TamperProtectReportFilesResponse.FileToBeRecovered
	85,  // 38: ydeyes.TamperProtectDownFileResponse.file_info:type_name -> ydeyes.TamperProtectFileInfo
	11,  // 39: ydeyes.TamperProtectRecoverResultRequest.type:type_name -> ydeyes.TamperProtectRecoverType
	9,   // 40: ydeyes.TamperProtectRecoverResultRequest.exception:type_name -> ydeyes.TamperProtectException
	41,  // 41: ydeyes.FastMsg.msg_type:type_name -> ydeyes.FastMsg.MsgType
	157, // 42: ydeyes.VulnerDetectRequest.comp_info_list:type_name -> ydeyes.VulnerDetectRequest.CompInfo
	12,  // 43: ydeyes.VulnerDetectStopResponse.exception:type_name -> ydeyes.VulnerDetectException
	158, // 44: ydeyes.BaselineDetectRequest.comp_info_list:type_name -> ydeyes.BaselineDetectRequest.CompInfo
	15,  // 45: ydeyes.MalwareScanRequest.type:type_name -> ydeyes.MalwareScanType
	111, // 46: ydeyes.MalwareScanRequest.pathes:type_name -> ydeyes.MalwarePathes
	14,  // 47: ydeyes.MalwareScanResponse.exception:type_name -> ydeyes.MalwareScanException
	14,  // 48: ydeyes.MalwareScanResponse.fast_exception:type_name -> ydeyes.MalwareScanException
	14,  // 49: ydeyes.MalwareScanStopResponse.exception:type_name -> ydeyes.MalwareScanException
	16,  // 50: ydeyes.MalwareMonitorPushRequest.type:type_name -> ydeyes.MalwareMonitorType
	111, // 51: ydeyes.MalwareMonitorPushRequest.pathes:type_name -> ydeyes.MalwarePathes
	16,  // 52: ydeyes.MalwareMonitorPullResponse.type:type_name -> ydeyes.MalwareMonitorType
	111, // 53: ydeyes.MalwareMonitorPullResponse.pathes:type_name -> ydeyes.MalwarePathes
	121, // 54: ydeyes.TcsScanImage.comm:type_name -> ydeyes.TcsTaskComm
	121, // 55: ydeyes.TcsScanImageCancel.comm:type_name -> ydeyes.TcsTaskComm
	121, // 56: ydeyes.TcsScanImageAck.comm:type_name -> ydeyes.TcsTaskComm
	42,  // 57: ydeyes.TcsScanImageAck.ack:type_name -> ydeyes.TcsScanImageAck.TcsStatus
	121, // 58: ydeyes.TcsReportHashs.comm:type_name -> ydeyes.TcsTaskComm
	159, // 59: ydeyes.TcsReportHashs.files:type_name -> ydeyes.TcsReportHashs.TcsHash
	121, // 60: ydeyes.TcsReportHashsAck.comm:type_name -> ydeyes.TcsTaskComm
	121, // 61: ydeyes.TcsReportFiles.comm:type_name -> ydeyes.TcsTaskComm
	160, // 62: ydeyes.TcsReportFiles.files:type_name -> ydeyes.TcsReportFiles.TcsFile
	121, // 63: ydeyes.TcsReportFilesAck.comm:type_name -> ydeyes.TcsTaskComm
	18,  // 64: ydeyes.TcsProcmonRule.action:type_name -> ydeyes.TcsAction
	18,  // 65: ydeyes.TcsFilemonRule.action:type_name -> ydeyes.TcsAction
	17,  // 66: ydeyes.TcsImagePolicy.syscallmon_mode:type_name -> ydeyes.TcsMonitorMode
	130, // 67: ydeyes.TcsImagePolicy.procmon_rules:type_name -> ydeyes.TcsProcmonRule
	131, // 68: ydeyes.TcsImagePolicy.filemon_rules:type_name -> ydeyes.TcsFilemonRule
	132, // 69: ydeyes.TcsImageQueryPolicyACK.policys:type_name -> ydeyes.TcsImagePolicy
	121, // 70: ydeyes.TcsImagePolicyNotify.comm:type_name -> ydeyes.TcsTaskComm
	121, // 71: ydeyes.TcsImagePolicyNotifyACK.comm:type_name -> ydeyes.TcsTaskComm
	121, // 72: ydeyes.TcsScanContainer.comm:type_name -> ydeyes.TcsTaskComm
	121, // 73: ydeyes.TcsScanContainerCancel.comm:type_name -> ydeyes.TcsTaskComm
	121, // 74: ydeyes.TcsScanContainerAck.comm:type_name -> ydeyes.TcsTaskComm
	161, // 75: ydeyes.TcsScanContainerAck.ack:type_name -> ydeyes.TcsScanContainerAck.TcsContainerStatus
	139, // 76: ydeyes.TcsScanHash.operator:type_name -> ydeyes.TcsFileOperator
	121, // 77: ydeyes.TcsScanHash.comm:type_name -> ydeyes.TcsTaskComm
	140, // 78: ydeyes.TcsScanFileHash.hashs:type_name -> ydeyes.TcsScanHash
	140, // 79: ydeyes.TcsScanFileHashAck.miss_hashs:type_name -> ydeyes.TcsScanHash
	162, // 80: ydeyes.TcsScanFile.files:type_name -> ydeyes.TcsScanFile.TcsFiles
	27,  // 81: ydeyes.UserAccountInfo.Account.privilege:type_name -> ydeyes.UserAccountInfo.AccountPrivilege
	28,  // 82: ydeyes.UserAccountInfo.Account.modify_type:type_name -> ydeyes.UserAccountInfo.ModifiedType
	33,  // 83: ydeyes.ProcessInfoMsg.Process.modify_type:type_name -> ydeyes.ProcessInfoMsg.ModifiedType
	34,  // 84: ydeyes.AgentMonitorReport.MonitorData.monitor_id:type_name -> ydeyes.AgentMonitorReport.MonitorId
	6,   // 85: ydeyes.YmonMsg.YmonMsgReg.oper:type_name -> ydeyes.YmonOper
	38,  // 86: ydeyes.WebServerInfo.Server.type:type_name -> ydeyes.WebServerInfo.ServerType
	85,  // 87: ydeyes.TamperProtectReportFilesRequest.FileToBeCompared.file_info:type_name -> ydeyes.TamperProtectFileInfo
	40,  // 88: ydeyes.TamperProtectReportFilesRequest.FileToBeCompared.type:type_name -> ydeyes.TamperProtectReportFilesRequest.TamperProtectFileChangeType
	85,  // 89: ydeyes.TamperProtectReportFilesResponse.FileToBeRecovered.file_info:type_name -> ydeyes.TamperProtectFileInfo
	11,  // 90: ydeyes.TamperProtectReportFilesResponse.FileToBeRecovered.type:type_name -> ydeyes.TamperProtectRecoverType
	43,  // 91: ydeyes.TcsScanContainerAck.TcsContainerStatus.status:type_name -> ydeyes.TcsScanContainerAck.TcsStatus
	140, // 92: ydeyes.TcsScanFile.TcsFiles.hash:type_name -> ydeyes.TcsScanHash
	93,  // [93:93] is the sub-list for method output_type
	93,  // [93:93] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_ydeyes_proto_init() }
func file_ydeyes_proto_init() {
	if File_ydeyes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ydeyes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YdMalwareAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebShell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PsParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BruteForce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecordToES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDumpDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPortMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDefConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMonitorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCommandReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcPrivilegeEscalation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseShell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqCertInitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqCertInitRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqApplyCertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqApplyCertRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqVerifySignMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YmonMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentCrashReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectBackupFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectBackupFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectUpFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectUpFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectReportFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectReportFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectDownFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectDownFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectRecoverResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectRecoverResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaselineDetectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaselineDetectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaselineDetectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwarePathes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareScanStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareMonitorPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareMonitorPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareMonitorPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareMonitorPullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsTaskComm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanImageCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanImageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportHashs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportHashsAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportFilesAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsImageQueryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsProcmonRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsFilemonRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsImagePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsImageQueryPolicyACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsImagePolicyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsImagePolicyNotifyACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanContainerCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanContainerAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsFileOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanFileHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanFileHashAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanFileAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfo_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPortMsg_PortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoMsg_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMonitorReport_MonitorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCommandReport_CommandElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcPrivilegeEscalation_ProcPrivilegeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseShell_ReverseShellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YmonMsg_YmonMsgReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServerInfo_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabMsg_Crontab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectReportFilesRequest_FileToBeCompared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperProtectReportFilesResponse_FileToBeRecovered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerDetectRequest_CompInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaselineDetectRequest_CompInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportHashs_TcsHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsReportFiles_TcsFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanContainerAck_TcsContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydeyes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcsScanFile_TcsFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ydeyes_proto_rawDesc,
			NumEnums:      44,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ydeyes_proto_goTypes,
		DependencyIndexes: file_ydeyes_proto_depIdxs,
		EnumInfos:         file_ydeyes_proto_enumTypes,
		MessageInfos:      file_ydeyes_proto_msgTypes,
	}.Build()
	File_ydeyes_proto = out.File
	file_ydeyes_proto_rawDesc = nil
	file_ydeyes_proto_goTypes = nil
	file_ydeyes_proto_depIdxs = nil
}
