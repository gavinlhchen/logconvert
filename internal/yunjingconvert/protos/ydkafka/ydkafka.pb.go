// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        (unknown)
// source: ydkafka.proto

package ydkafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 事件类型
type EventType int32

const (
	EventType_MALWARE              EventType = 1  // 木马
	EventType_LOGIN                EventType = 2  // 异常登录
	EventType_BRUTEFORCE           EventType = 3  // 爆破
	EventType_VUL                  EventType = 4  // 漏洞
	EventType_BASH                 EventType = 5  // 高危命令
	EventType_REVERSE_SHELL        EventType = 6  // 反弹shell
	EventType_PRIVILEGE_ESCALATION EventType = 7  // 本地提权
	EventType_NETWORK_ATTACK       EventType = 8  // 网络攻击
	EventType_RISK_DNS             EventType = 9  // 恶意请求
	EventType_RISK_BASELINE        EventType = 10 // 基线
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		1:  "MALWARE",
		2:  "LOGIN",
		3:  "BRUTEFORCE",
		4:  "VUL",
		5:  "BASH",
		6:  "REVERSE_SHELL",
		7:  "PRIVILEGE_ESCALATION",
		8:  "NETWORK_ATTACK",
		9:  "RISK_DNS",
		10: "RISK_BASELINE",
	}
	EventType_value = map[string]int32{
		"MALWARE":              1,
		"LOGIN":                2,
		"BRUTEFORCE":           3,
		"VUL":                  4,
		"BASH":                 5,
		"REVERSE_SHELL":        6,
		"PRIVILEGE_ESCALATION": 7,
		"NETWORK_ATTACK":       8,
		"RISK_DNS":             9,
		"RISK_BASELINE":        10,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ydkafka_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_ydkafka_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{0}
}

type SeverityClass int32

const (
	SeverityClass_CRITICAL SeverityClass = 10
	SeverityClass_HIGH     SeverityClass = 20
	SeverityClass_MIDDLE   SeverityClass = 30
	SeverityClass_LOW      SeverityClass = 40
)

// Enum value maps for SeverityClass.
var (
	SeverityClass_name = map[int32]string{
		10: "CRITICAL",
		20: "HIGH",
		30: "MIDDLE",
		40: "LOW",
	}
	SeverityClass_value = map[string]int32{
		"CRITICAL": 10,
		"HIGH":     20,
		"MIDDLE":   30,
		"LOW":      40,
	}
)

func (x SeverityClass) Enum() *SeverityClass {
	p := new(SeverityClass)
	*p = x
	return p
}

func (x SeverityClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityClass) Descriptor() protoreflect.EnumDescriptor {
	return file_ydkafka_proto_enumTypes[1].Descriptor()
}

func (SeverityClass) Type() protoreflect.EnumType {
	return &file_ydkafka_proto_enumTypes[1]
}

func (x SeverityClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeverityClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeverityClass(num)
	return nil
}

// Deprecated: Use SeverityClass.Descriptor instead.
func (SeverityClass) EnumDescriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{1}
}

// 变更标志
type EventMod int32

const (
	EventMod_ADD EventMod = 1
	EventMod_MOD EventMod = 2
	EventMod_DEL EventMod = 3
	EventMod_IGN EventMod = 4 // 暂未使用
)

// Enum value maps for EventMod.
var (
	EventMod_name = map[int32]string{
		1: "ADD",
		2: "MOD",
		3: "DEL",
		4: "IGN",
	}
	EventMod_value = map[string]int32{
		"ADD": 1,
		"MOD": 2,
		"DEL": 3,
		"IGN": 4,
	}
)

func (x EventMod) Enum() *EventMod {
	p := new(EventMod)
	*p = x
	return p
}

func (x EventMod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventMod) Descriptor() protoreflect.EnumDescriptor {
	return file_ydkafka_proto_enumTypes[2].Descriptor()
}

func (EventMod) Type() protoreflect.EnumType {
	return &file_ydkafka_proto_enumTypes[2]
}

func (x EventMod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventMod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventMod(num)
	return nil
}

// Deprecated: Use EventMod.Descriptor instead.
func (EventMod) EnumDescriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{2}
}

type EventMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *Head `protobuf:"bytes,1,req,name=head" json:"head,omitempty"`
	Body *Body `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (x *EventMsg) Reset() {
	*x = EventMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMsg) ProtoMessage() {}

func (x *EventMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMsg.ProtoReflect.Descriptor instead.
func (*EventMsg) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{0}
}

func (x *EventMsg) GetHead() *Head {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *EventMsg) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint64        `protobuf:"varint,1,req,name=appid" json:"appid,omitempty"`
	Uuid          []byte         `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`     // 云镜agent uuid
	Quuid         []byte         `protobuf:"bytes,3,req,name=quuid" json:"quuid,omitempty"`   // cvm uuid
	Hostip        []byte         `protobuf:"bytes,4,opt,name=hostip" json:"hostip,omitempty"` // cvm主机ip
	EventTime     *int64         `protobuf:"varint,5,req,name=event_time,json=eventTime" json:"event_time,omitempty"`
	EventType     *EventType     `protobuf:"varint,6,req,name=event_type,json=eventType,enum=ydkafka.EventType" json:"event_type,omitempty"`
	EventMod      *EventMod      `protobuf:"varint,7,req,name=event_mod,json=eventMod,enum=ydkafka.EventMod" json:"event_mod,omitempty"`
	SeverityClass *SeverityClass `protobuf:"varint,8,opt,name=severity_class,json=severityClass,enum=ydkafka.SeverityClass" json:"severity_class,omitempty"` // 暂未使用
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{1}
}

func (x *Head) GetAppid() uint64 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *Head) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Head) GetQuuid() []byte {
	if x != nil {
		return x.Quuid
	}
	return nil
}

func (x *Head) GetHostip() []byte {
	if x != nil {
		return x.Hostip
	}
	return nil
}

func (x *Head) GetEventTime() int64 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

func (x *Head) GetEventType() EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return EventType_MALWARE
}

func (x *Head) GetEventMod() EventMod {
	if x != nil && x.EventMod != nil {
		return *x.EventMod
	}
	return EventMod_ADD
}

func (x *Head) GetSeverityClass() SeverityClass {
	if x != nil && x.SeverityClass != nil {
		return *x.SeverityClass
	}
	return SeverityClass_CRITICAL
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Malware             *MalwareBody             `protobuf:"bytes,1,opt,name=malware" json:"malware,omitempty"`
	Login               *LoginBody               `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
	Bruteforce          *BruteforceBody          `protobuf:"bytes,3,opt,name=bruteforce" json:"bruteforce,omitempty"`
	Vul                 *VulBody                 `protobuf:"bytes,4,opt,name=vul" json:"vul,omitempty"`
	Bash                *BashBody                `protobuf:"bytes,5,opt,name=bash" json:"bash,omitempty"`
	ReverseShell        *ReverseShellBody        `protobuf:"bytes,6,opt,name=reverse_shell,json=reverseShell" json:"reverse_shell,omitempty"`
	PrivilegeEscalation *PrivilegeEscalationBody `protobuf:"bytes,7,opt,name=privilege_escalation,json=privilegeEscalation" json:"privilege_escalation,omitempty"`
	NetworkAttack       *NetworkAttackBody       `protobuf:"bytes,8,opt,name=network_attack,json=networkAttack" json:"network_attack,omitempty"`
	RiskDns             *RiskDnsBody             `protobuf:"bytes,9,opt,name=risk_dns,json=riskDns" json:"risk_dns,omitempty"`
	BaseLine            *BaseLineBody            `protobuf:"bytes,10,opt,name=base_line,json=baseLine" json:"base_line,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{2}
}

func (x *Body) GetMalware() *MalwareBody {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *Body) GetLogin() *LoginBody {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *Body) GetBruteforce() *BruteforceBody {
	if x != nil {
		return x.Bruteforce
	}
	return nil
}

func (x *Body) GetVul() *VulBody {
	if x != nil {
		return x.Vul
	}
	return nil
}

func (x *Body) GetBash() *BashBody {
	if x != nil {
		return x.Bash
	}
	return nil
}

func (x *Body) GetReverseShell() *ReverseShellBody {
	if x != nil {
		return x.ReverseShell
	}
	return nil
}

func (x *Body) GetPrivilegeEscalation() *PrivilegeEscalationBody {
	if x != nil {
		return x.PrivilegeEscalation
	}
	return nil
}

func (x *Body) GetNetworkAttack() *NetworkAttackBody {
	if x != nil {
		return x.NetworkAttack
	}
	return nil
}

func (x *Body) GetRiskDns() *RiskDnsBody {
	if x != nil {
		return x.RiskDns
	}
	return nil
}

func (x *Body) GetBaseLine() *BaseLineBody {
	if x != nil {
		return x.BaseLine
	}
	return nil
}

// 木马
type MalwareBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId        *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Status         *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`                                          // 事件状态 4: 待处理 5: 已信任 6：已隔离 8：文件已删除 12：事件纪录已删除
	Md5            []byte  `protobuf:"bytes,4,opt,name=md5" json:"md5,omitempty"`                                                 // 文件md5
	Virusname      []byte  `protobuf:"bytes,5,opt,name=virusname" json:"virusname,omitempty"`                                     // 病毒名
	Virustype      *int32  `protobuf:"varint,6,opt,name=virustype" json:"virustype,omitempty"`                                    //病毒类型
	Bwtype         *int32  `protobuf:"varint,7,opt,name=bwtype" json:"bwtype,omitempty"`                                          // 样本属性 10: 白 20~29: 黑
	Filepath       []byte  `protobuf:"bytes,8,opt,name=filepath" json:"filepath,omitempty"`                                       // 文件路径
	Filesize       *uint64 `protobuf:"varint,9,opt,name=filesize" json:"filesize,omitempty"`                                      // 文件大小
	FileAccessTime *int64  `protobuf:"varint,10,opt,name=file_access_time,json=fileAccessTime" json:"file_access_time,omitempty"` // 文件访问时间
	FileCreateTime *int64  `protobuf:"varint,11,opt,name=file_create_time,json=fileCreateTime" json:"file_create_time,omitempty"` // 文件创建时间
	FileModifyTime *int64  `protobuf:"varint,12,opt,name=file_modify_time,json=fileModifyTime" json:"file_modify_time,omitempty"` // 文件修改时间
	Int64Pid       *int64  `protobuf:"varint,13,opt,name=int64_pid,json=int64Pid" json:"int64_pid,omitempty"`                     //运行进程pid
	Exe            []byte  `protobuf:"bytes,14,opt,name=exe" json:"exe,omitempty"`                                                //相关进程
	Cmdline        []byte  `protobuf:"bytes,15,opt,name=cmdline" json:"cmdline,omitempty"`                                        //命令行参数
	DetectBy       *int32  `protobuf:"varint,16,opt,name=detect_by,json=detectBy" json:"detect_by,omitempty"`
	CreateTime     *int64  `protobuf:"varint,17,opt,name=create_time,json=createTime" json:"create_time,omitempty"`               // 首次发现时间
	LatestScanTime *int64  `protobuf:"varint,18,opt,name=latest_scan_time,json=latestScanTime" json:"latest_scan_time,omitempty"` // 最近检查时间
}

func (x *MalwareBody) Reset() {
	*x = MalwareBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareBody) ProtoMessage() {}

func (x *MalwareBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareBody.ProtoReflect.Descriptor instead.
func (*MalwareBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{3}
}

func (x *MalwareBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *MalwareBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *MalwareBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MalwareBody) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *MalwareBody) GetVirusname() []byte {
	if x != nil {
		return x.Virusname
	}
	return nil
}

func (x *MalwareBody) GetVirustype() int32 {
	if x != nil && x.Virustype != nil {
		return *x.Virustype
	}
	return 0
}

func (x *MalwareBody) GetBwtype() int32 {
	if x != nil && x.Bwtype != nil {
		return *x.Bwtype
	}
	return 0
}

func (x *MalwareBody) GetFilepath() []byte {
	if x != nil {
		return x.Filepath
	}
	return nil
}

func (x *MalwareBody) GetFilesize() uint64 {
	if x != nil && x.Filesize != nil {
		return *x.Filesize
	}
	return 0
}

func (x *MalwareBody) GetFileAccessTime() int64 {
	if x != nil && x.FileAccessTime != nil {
		return *x.FileAccessTime
	}
	return 0
}

func (x *MalwareBody) GetFileCreateTime() int64 {
	if x != nil && x.FileCreateTime != nil {
		return *x.FileCreateTime
	}
	return 0
}

func (x *MalwareBody) GetFileModifyTime() int64 {
	if x != nil && x.FileModifyTime != nil {
		return *x.FileModifyTime
	}
	return 0
}

func (x *MalwareBody) GetInt64Pid() int64 {
	if x != nil && x.Int64Pid != nil {
		return *x.Int64Pid
	}
	return 0
}

func (x *MalwareBody) GetExe() []byte {
	if x != nil {
		return x.Exe
	}
	return nil
}

func (x *MalwareBody) GetCmdline() []byte {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *MalwareBody) GetDetectBy() int32 {
	if x != nil && x.DetectBy != nil {
		return *x.DetectBy
	}
	return 0
}

func (x *MalwareBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *MalwareBody) GetLatestScanTime() int64 {
	if x != nil && x.LatestScanTime != nil {
		return *x.LatestScanTime
	}
	return 0
}

// 异常登录
type LoginBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId    *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Status     *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`                        // 1: 正常登陆 2：异常登录 5：已加白 7：已删除
	Username   []byte  `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`                     // 登录用户名
	SrcIp      []byte  `protobuf:"bytes,5,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`              // 登录来源IP
	DstPort    *int32  `protobuf:"varint,6,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`       //登录端口
	Count      *int64  `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`                          // 登录次数 （1分钟聚合一次）
	LoginTime  *int64  `protobuf:"varint,8,opt,name=login_time,json=loginTime" json:"login_time,omitempty"` // 登录时间
	CreateTime *int64  `protobuf:"varint,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	RiskLevel  *int32  `protobuf:"varint,10,opt,name=risk_level,json=riskLevel" json:"risk_level,omitempty"` // 风险等级：0高危，1可疑
}

func (x *LoginBody) Reset() {
	*x = LoginBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginBody) ProtoMessage() {}

func (x *LoginBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginBody.ProtoReflect.Descriptor instead.
func (*LoginBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{4}
}

func (x *LoginBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *LoginBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *LoginBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *LoginBody) GetUsername() []byte {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *LoginBody) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *LoginBody) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *LoginBody) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LoginBody) GetLoginTime() int64 {
	if x != nil && x.LoginTime != nil {
		return *x.LoginTime
	}
	return 0
}

func (x *LoginBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *LoginBody) GetRiskLevel() int32 {
	if x != nil && x.RiskLevel != nil {
		return *x.RiskLevel
	}
	return 0
}

// 暴力破解
type BruteforceBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId    *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Status     *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`                        // 事件状态 0: 待处理 1: 已忽略 2：误报 3：已删除 4：白名单
	Username   []byte  `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`                     // 用户名
	SrcIp      []byte  `protobuf:"bytes,5,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`              // 来源IP
	DstPort    *int32  `protobuf:"varint,6,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`       // 来源端口
	Count      *int64  `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`                          // 尝试次数次数
	EventType  *int32  `protobuf:"varint,8,opt,name=event_type,json=eventType" json:"event_type,omitempty"` // 事件类型 200: 爆破失败 300: 爆破成功 400：爆破不存在的账号
	Protocol   []byte  `protobuf:"bytes,9,opt,name=protocol" json:"protocol,omitempty"`                     // 应用协议，为空时为ssh/rdp
	Banned     *int32  `protobuf:"varint,10,opt,name=banned" json:"banned,omitempty"`                       // 阻断状态: 0未阻断，1已阻断，81未阻断(未开启阻断)，82未阻断(非专业版)，83未阻断(已加白名单)，85未阻断(未绑定公网IP)，2阻断失败(接口异常)，3阻断失败(内网不支持),4阻断失败(可用区不支持)
	CreateTime *int64  `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
}

func (x *BruteforceBody) Reset() {
	*x = BruteforceBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BruteforceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BruteforceBody) ProtoMessage() {}

func (x *BruteforceBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BruteforceBody.ProtoReflect.Descriptor instead.
func (*BruteforceBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{5}
}

func (x *BruteforceBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *BruteforceBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *BruteforceBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BruteforceBody) GetUsername() []byte {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *BruteforceBody) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *BruteforceBody) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *BruteforceBody) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BruteforceBody) GetEventType() int32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *BruteforceBody) GetProtocol() []byte {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *BruteforceBody) GetBanned() int32 {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return 0
}

func (x *BruteforceBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// 漏洞
type VulBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId      *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Status       *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`                                 // 漏洞状态 0: 待处理 1:已忽略  3:已修复 5:检测中 6:修复中 8:修复失败
	VulId        *uint32 `protobuf:"varint,4,opt,name=vul_id,json=vulId" json:"vul_id,omitempty"`                      // 漏洞poc id
	VulCategory  *uint32 `protobuf:"varint,5,opt,name=vul_category,json=vulCategory" json:"vul_category,omitempty"`    // 漏洞分类 1: web应用漏洞 2:系统组件漏洞 3:安全基线 4: Linux系统漏洞 5: windows系统漏洞
	VulName      []byte  `protobuf:"bytes,6,opt,name=vul_name,json=vulName" json:"vul_name,omitempty"`                 // 漏洞名
	VulLevel     *uint32 `protobuf:"varint,7,opt,name=vul_level,json=vulLevel" json:"vul_level,omitempty"`             // 漏洞等级 1:低 2:中 3:高 4:提示
	Description  []byte  `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`                        // 漏洞事件详情
	VulFix       []byte  `protobuf:"bytes,9,opt,name=vul_fix,json=vulFix" json:"vul_fix,omitempty"`                    // 暂未使用
	VulReference []byte  `protobuf:"bytes,10,opt,name=vul_reference,json=vulReference" json:"vul_reference,omitempty"` // 暂未使用
	CveId        []byte  `protobuf:"bytes,11,opt,name=cve_id,json=cveId" json:"cve_id,omitempty"`                      // 暂未使用
	CreateTime   *int64  `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
}

func (x *VulBody) Reset() {
	*x = VulBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulBody) ProtoMessage() {}

func (x *VulBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulBody.ProtoReflect.Descriptor instead.
func (*VulBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{6}
}

func (x *VulBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *VulBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *VulBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *VulBody) GetVulId() uint32 {
	if x != nil && x.VulId != nil {
		return *x.VulId
	}
	return 0
}

func (x *VulBody) GetVulCategory() uint32 {
	if x != nil && x.VulCategory != nil {
		return *x.VulCategory
	}
	return 0
}

func (x *VulBody) GetVulName() []byte {
	if x != nil {
		return x.VulName
	}
	return nil
}

func (x *VulBody) GetVulLevel() uint32 {
	if x != nil && x.VulLevel != nil {
		return *x.VulLevel
	}
	return 0
}

func (x *VulBody) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *VulBody) GetVulFix() []byte {
	if x != nil {
		return x.VulFix
	}
	return nil
}

func (x *VulBody) GetVulReference() []byte {
	if x != nil {
		return x.VulReference
	}
	return nil
}

func (x *VulBody) GetCveId() []byte {
	if x != nil {
		return x.CveId
	}
	return nil
}

func (x *VulBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// 高危命令
type BashBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId    *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	User       []byte  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`                             // 执行的用户
	BashCmd    []byte  `protobuf:"bytes,4,opt,name=bash_cmd,json=bashCmd" json:"bash_cmd,omitempty"`        // 执行的命令
	RuleId     *int64  `protobuf:"varint,5,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`          // 命中的规则id 10000及以下系统规则，10000以上用户规则
	RuleName   []byte  `protobuf:"bytes,6,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`     // 命中的规则名
	RuleLevel  *int32  `protobuf:"varint,7,opt,name=rule_level,json=ruleLevel" json:"rule_level,omitempty"` // 命令危险等级 1: 高危 2:中危 3: 低危
	ExecTime   *int64  `protobuf:"varint,8,opt,name=exec_time,json=execTime" json:"exec_time,omitempty"`    // 命令执行时间
	Status     *int32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`                        //  0: 危险命令,待处理 1: 危险命令 2：正常命令
	Pid        *uint32 `protobuf:"varint,10,opt,name=pid" json:"pid,omitempty"`
	Exe        []byte  `protobuf:"bytes,11,opt,name=exe" json:"exe,omitempty"` // 进程名
	CreateTime *int64  `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	RuleType   *int32  `protobuf:"varint,13,opt,name=rule_type,json=ruleType" json:"rule_type,omitempty"` // 0系统规则，1用户规则
}

func (x *BashBody) Reset() {
	*x = BashBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BashBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BashBody) ProtoMessage() {}

func (x *BashBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BashBody.ProtoReflect.Descriptor instead.
func (*BashBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{7}
}

func (x *BashBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *BashBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *BashBody) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BashBody) GetBashCmd() []byte {
	if x != nil {
		return x.BashCmd
	}
	return nil
}

func (x *BashBody) GetRuleId() int64 {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return 0
}

func (x *BashBody) GetRuleName() []byte {
	if x != nil {
		return x.RuleName
	}
	return nil
}

func (x *BashBody) GetRuleLevel() int32 {
	if x != nil && x.RuleLevel != nil {
		return *x.RuleLevel
	}
	return 0
}

func (x *BashBody) GetExecTime() int64 {
	if x != nil && x.ExecTime != nil {
		return *x.ExecTime
	}
	return 0
}

func (x *BashBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BashBody) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *BashBody) GetExe() []byte {
	if x != nil {
		return x.Exe
	}
	return nil
}

func (x *BashBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *BashBody) GetRuleType() int32 {
	if x != nil && x.RuleType != nil {
		return *x.RuleType
	}
	return 0
}

// 反弹shell
type ReverseShellBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName       []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId         *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	DestIp          []byte  `protobuf:"bytes,3,opt,name=dest_ip,json=destIp" json:"dest_ip,omitempty"`                // 目的IP
	DestPort        *uint32 `protobuf:"varint,4,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`         // 目的端口
	ProcessName     []byte  `protobuf:"bytes,5,opt,name=process_name,json=processName" json:"process_name,omitempty"` // 执行的进程
	FullPath        []byte  `protobuf:"bytes,6,opt,name=full_path,json=fullPath" json:"full_path,omitempty"`          // 进程路径
	Pid             *uint32 `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`                                   // 进程id
	CmdLine         []byte  `protobuf:"bytes,8,opt,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"`             // 执行的命令
	UserName        []byte  `protobuf:"bytes,9,opt,name=user_name,json=userName" json:"user_name,omitempty"`          // 执行的用户
	UserGroup       []byte  `protobuf:"bytes,10,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`      //执行用户所属组
	Ppid            *uint32 `protobuf:"varint,11,opt,name=ppid" json:"ppid,omitempty"`
	ParentProcName  []byte  `protobuf:"bytes,12,opt,name=parent_proc_name,json=parentProcName" json:"parent_proc_name,omitempty"`
	ParentProcUser  []byte  `protobuf:"bytes,13,opt,name=parent_proc_user,json=parentProcUser" json:"parent_proc_user,omitempty"`
	ParentProcGroup []byte  `protobuf:"bytes,14,opt,name=parent_proc_group,json=parentProcGroup" json:"parent_proc_group,omitempty"`
	ParentProcPath  []byte  `protobuf:"bytes,15,opt,name=parent_proc_path,json=parentProcPath" json:"parent_proc_path,omitempty"`
	FindTime        *int64  `protobuf:"varint,16,opt,name=find_time,json=findTime" json:"find_time,omitempty"` // 执行时间
	ProcTree        []byte  `protobuf:"bytes,17,opt,name=proc_tree,json=procTree" json:"proc_tree,omitempty"`  // 进程树
	Status          *int32  `protobuf:"varint,18,opt,name=status" json:"status,omitempty"`                     // 0: 反弹shell事件，待处理 1:提权事件 2:白名单
	CreateTime      *int64  `protobuf:"varint,19,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
}

func (x *ReverseShellBody) Reset() {
	*x = ReverseShellBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseShellBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseShellBody) ProtoMessage() {}

func (x *ReverseShellBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseShellBody.ProtoReflect.Descriptor instead.
func (*ReverseShellBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{8}
}

func (x *ReverseShellBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ReverseShellBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *ReverseShellBody) GetDestIp() []byte {
	if x != nil {
		return x.DestIp
	}
	return nil
}

func (x *ReverseShellBody) GetDestPort() uint32 {
	if x != nil && x.DestPort != nil {
		return *x.DestPort
	}
	return 0
}

func (x *ReverseShellBody) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *ReverseShellBody) GetFullPath() []byte {
	if x != nil {
		return x.FullPath
	}
	return nil
}

func (x *ReverseShellBody) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ReverseShellBody) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *ReverseShellBody) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ReverseShellBody) GetUserGroup() []byte {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *ReverseShellBody) GetPpid() uint32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *ReverseShellBody) GetParentProcName() []byte {
	if x != nil {
		return x.ParentProcName
	}
	return nil
}

func (x *ReverseShellBody) GetParentProcUser() []byte {
	if x != nil {
		return x.ParentProcUser
	}
	return nil
}

func (x *ReverseShellBody) GetParentProcGroup() []byte {
	if x != nil {
		return x.ParentProcGroup
	}
	return nil
}

func (x *ReverseShellBody) GetParentProcPath() []byte {
	if x != nil {
		return x.ParentProcPath
	}
	return nil
}

func (x *ReverseShellBody) GetFindTime() int64 {
	if x != nil && x.FindTime != nil {
		return *x.FindTime
	}
	return 0
}

func (x *ReverseShellBody) GetProcTree() []byte {
	if x != nil {
		return x.ProcTree
	}
	return nil
}

func (x *ReverseShellBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ReverseShellBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// 本地提权
type PrivilegeEscalationBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName         []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId           *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Status            *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`                                                 // 0: 提权事件，待处理 1:提权事件 2:白名单
	ProcFilePrivilege []byte  `protobuf:"bytes,4,opt,name=proc_file_privilege,json=procFilePrivilege" json:"proc_file_privilege,omitempty"` // 进程文件权限信息
	ProcessName       []byte  `protobuf:"bytes,5,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	FullPath          []byte  `protobuf:"bytes,6,opt,name=full_path,json=fullPath" json:"full_path,omitempty"`
	Pid               *uint32 `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`
	CmdLine           []byte  `protobuf:"bytes,8,opt,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"`
	UserName          []byte  `protobuf:"bytes,9,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	UserGroup         []byte  `protobuf:"bytes,10,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	Ppid              *uint32 `protobuf:"varint,11,opt,name=ppid" json:"ppid,omitempty"`
	ParentProcName    []byte  `protobuf:"bytes,12,opt,name=parent_proc_name,json=parentProcName" json:"parent_proc_name,omitempty"`
	ParentProcUser    []byte  `protobuf:"bytes,13,opt,name=parent_proc_user,json=parentProcUser" json:"parent_proc_user,omitempty"`
	ParentProcGroup   []byte  `protobuf:"bytes,14,opt,name=parent_proc_group,json=parentProcGroup" json:"parent_proc_group,omitempty"`
	ParentProcPath    []byte  `protobuf:"bytes,15,opt,name=parent_proc_path,json=parentProcPath" json:"parent_proc_path,omitempty"`
	FindTime          *int64  `protobuf:"varint,16,opt,name=find_time,json=findTime" json:"find_time,omitempty"`
	ProcTree          []byte  `protobuf:"bytes,17,opt,name=proc_tree,json=procTree" json:"proc_tree,omitempty"`
	Sid               *uint32 `protobuf:"varint,18,opt,name=sid" json:"sid,omitempty"`
	Uid               *uint32 `protobuf:"varint,19,opt,name=uid" json:"uid,omitempty"`
	Gid               *uint32 `protobuf:"varint,20,opt,name=gid" json:"gid,omitempty"`
	Euid              *uint32 `protobuf:"varint,21,opt,name=euid" json:"euid,omitempty"`
	Egid              *uint32 `protobuf:"varint,22,opt,name=egid" json:"egid,omitempty"`
	CreateTime        *int64  `protobuf:"varint,23,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
}

func (x *PrivilegeEscalationBody) Reset() {
	*x = PrivilegeEscalationBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeEscalationBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeEscalationBody) ProtoMessage() {}

func (x *PrivilegeEscalationBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeEscalationBody.ProtoReflect.Descriptor instead.
func (*PrivilegeEscalationBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{9}
}

func (x *PrivilegeEscalationBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetProcFilePrivilege() []byte {
	if x != nil {
		return x.ProcFilePrivilege
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetFullPath() []byte {
	if x != nil {
		return x.FullPath
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetUserGroup() []byte {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetPpid() uint32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetParentProcName() []byte {
	if x != nil {
		return x.ParentProcName
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetParentProcUser() []byte {
	if x != nil {
		return x.ParentProcUser
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetParentProcGroup() []byte {
	if x != nil {
		return x.ParentProcGroup
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetParentProcPath() []byte {
	if x != nil {
		return x.ParentProcPath
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetFindTime() int64 {
	if x != nil && x.FindTime != nil {
		return *x.FindTime
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetProcTree() []byte {
	if x != nil {
		return x.ProcTree
	}
	return nil
}

func (x *PrivilegeEscalationBody) GetSid() uint32 {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetEuid() uint32 {
	if x != nil && x.Euid != nil {
		return *x.Euid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetEgid() uint32 {
	if x != nil && x.Egid != nil {
		return *x.Egid
	}
	return 0
}

func (x *PrivilegeEscalationBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// 网络攻击
type NetworkAttackBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName     []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId       *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	SrcIp         []byte  `protobuf:"bytes,3,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`        // 来源IP
	SrcPort       *uint32 `protobuf:"varint,4,opt,name=src_port,json=srcPort" json:"src_port,omitempty"` // 来源端口
	HttpMethod    []byte  `protobuf:"bytes,5,opt,name=http_method,json=httpMethod" json:"http_method,omitempty"`
	HttpHost      []byte  `protobuf:"bytes,6,opt,name=http_host,json=httpHost" json:"http_host,omitempty"`
	HttpCgi       []byte  `protobuf:"bytes,7,opt,name=http_cgi,json=httpCgi" json:"http_cgi,omitempty"`
	HttpParam     []byte  `protobuf:"bytes,8,opt,name=http_param,json=httpParam" json:"http_param,omitempty"`
	HttpContent   []byte  `protobuf:"bytes,9,opt,name=http_content,json=httpContent" json:"http_content,omitempty"`
	HttpHead      []byte  `protobuf:"bytes,10,opt,name=http_head,json=httpHead" json:"http_head,omitempty"`
	HttpUserAgent []byte  `protobuf:"bytes,11,opt,name=http_user_agent,json=httpUserAgent" json:"http_user_agent,omitempty"`
	HttpReferer   []byte  `protobuf:"bytes,12,opt,name=http_referer,json=httpReferer" json:"http_referer,omitempty"`
	DstIp         []byte  `protobuf:"bytes,13,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`        // 目标IP
	DstPort       *uint32 `protobuf:"varint,14,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"` // 目标端口
	VulType       []byte  `protobuf:"bytes,15,opt,name=vul_type,json=vulType" json:"vul_type,omitempty"`  // 攻击方式说明， 如：命令注入，疑似webshell等
	CreateTime    *int64  `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	Chinese       []byte  `protobuf:"bytes,17,opt,name=chinese" json:"chinese,omitempty"` // 中文描述
	English       []byte  `protobuf:"bytes,18,opt,name=english" json:"english,omitempty"` // 英文描述
}

func (x *NetworkAttackBody) Reset() {
	*x = NetworkAttackBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAttackBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAttackBody) ProtoMessage() {}

func (x *NetworkAttackBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAttackBody.ProtoReflect.Descriptor instead.
func (*NetworkAttackBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkAttackBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *NetworkAttackBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *NetworkAttackBody) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *NetworkAttackBody) GetSrcPort() uint32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *NetworkAttackBody) GetHttpMethod() []byte {
	if x != nil {
		return x.HttpMethod
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpHost() []byte {
	if x != nil {
		return x.HttpHost
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpCgi() []byte {
	if x != nil {
		return x.HttpCgi
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpParam() []byte {
	if x != nil {
		return x.HttpParam
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpContent() []byte {
	if x != nil {
		return x.HttpContent
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpHead() []byte {
	if x != nil {
		return x.HttpHead
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpUserAgent() []byte {
	if x != nil {
		return x.HttpUserAgent
	}
	return nil
}

func (x *NetworkAttackBody) GetHttpReferer() []byte {
	if x != nil {
		return x.HttpReferer
	}
	return nil
}

func (x *NetworkAttackBody) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *NetworkAttackBody) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *NetworkAttackBody) GetVulType() []byte {
	if x != nil {
		return x.VulType
	}
	return nil
}

func (x *NetworkAttackBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *NetworkAttackBody) GetChinese() []byte {
	if x != nil {
		return x.Chinese
	}
	return nil
}

func (x *NetworkAttackBody) GetEnglish() []byte {
	if x != nil {
		return x.English
	}
	return nil
}

// 恶意请求
type RiskDnsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId      *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Url          []byte  `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Pid          *uint32 `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	ProcessMd5   []byte  `protobuf:"bytes,5,opt,name=process_md5,json=processMd5" json:"process_md5,omitempty"`
	ProcessName  []byte  `protobuf:"bytes,6,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	CmdLine      []byte  `protobuf:"bytes,7,opt,name=cmd_line,json=cmdLine" json:"cmd_line,omitempty"`
	GlobalRuleId *uint32 `protobuf:"varint,8,opt,name=global_rule_id,json=globalRuleId" json:"global_rule_id,omitempty"` // 关联dns_knowledge id
	RuleSource   *uint32 `protobuf:"varint,9,opt,name=rule_source,json=ruleSource" json:"rule_source,omitempty"`         // 1:用户黑名单，2：用户白名单；3：系统黑名单；4：管家安知系统；5：管家运营组威胁情报知识库
	RuleId       *uint32 `protobuf:"varint,10,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Status       *uint32 `protobuf:"varint,11,opt,name=status" json:"status,omitempty"`                              // 状态：0待处理，1已删除，2已加白
	AccessCount  *uint32 `protobuf:"varint,12,opt,name=access_count,json=accessCount" json:"access_count,omitempty"` // 请求次数
	QueryTime    *int64  `protobuf:"varint,13,opt,name=query_time,json=queryTime" json:"query_time,omitempty"`       // 首次请求时间
	MergeTime    *int64  `protobuf:"varint,14,opt,name=merge_time,json=mergeTime" json:"merge_time,omitempty"`       // 最近请求时间
	CreateTime   *int64  `protobuf:"varint,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
}

func (x *RiskDnsBody) Reset() {
	*x = RiskDnsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskDnsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskDnsBody) ProtoMessage() {}

func (x *RiskDnsBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskDnsBody.ProtoReflect.Descriptor instead.
func (*RiskDnsBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{11}
}

func (x *RiskDnsBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *RiskDnsBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *RiskDnsBody) GetUrl() []byte {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *RiskDnsBody) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *RiskDnsBody) GetProcessMd5() []byte {
	if x != nil {
		return x.ProcessMd5
	}
	return nil
}

func (x *RiskDnsBody) GetProcessName() []byte {
	if x != nil {
		return x.ProcessName
	}
	return nil
}

func (x *RiskDnsBody) GetCmdLine() []byte {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *RiskDnsBody) GetGlobalRuleId() uint32 {
	if x != nil && x.GlobalRuleId != nil {
		return *x.GlobalRuleId
	}
	return 0
}

func (x *RiskDnsBody) GetRuleSource() uint32 {
	if x != nil && x.RuleSource != nil {
		return *x.RuleSource
	}
	return 0
}

func (x *RiskDnsBody) GetRuleId() uint32 {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return 0
}

func (x *RiskDnsBody) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *RiskDnsBody) GetAccessCount() uint32 {
	if x != nil && x.AccessCount != nil {
		return *x.AccessCount
	}
	return 0
}

func (x *RiskDnsBody) GetQueryTime() int64 {
	if x != nil && x.QueryTime != nil {
		return *x.QueryTime
	}
	return 0
}

func (x *RiskDnsBody) GetMergeTime() int64 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *RiskDnsBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// 基线
type BaseLineBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      []byte  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId        *uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Name           []byte  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`                                               // 基线名称
	From           *uint32 `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`                                              // 数据源：0新版，1旧版
	Status         *uint32 `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`                                          // 状态：0未通过，1忽略，2通过，5检测中
	Level          *uint32 `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`                                            // 等级：1低危，2中危，3高危，4严重
	RuleId         *uint32 `protobuf:"varint,7,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`                            // 检测项ID
	CategoryId     *uint32 `protobuf:"varint,8,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`                // 基线分类id
	Descript       []byte  `protobuf:"bytes,9,opt,name=descript" json:"descript,omitempty"`                                       // 描述
	Remark         []byte  `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`                                          // 备注
	CreateTime     *int64  `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`               // 创建时间
	ModifyTime     *int64  `protobuf:"varint,12,opt,name=modify_time,json=modifyTime" json:"modify_time,omitempty"`               // 修改时间
	LatestScanTime *int64  `protobuf:"varint,13,opt,name=latest_scan_time,json=latestScanTime" json:"latest_scan_time,omitempty"` // 最近扫描时间
}

func (x *BaseLineBody) Reset() {
	*x = BaseLineBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydkafka_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseLineBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseLineBody) ProtoMessage() {}

func (x *BaseLineBody) ProtoReflect() protoreflect.Message {
	mi := &file_ydkafka_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseLineBody.ProtoReflect.Descriptor instead.
func (*BaseLineBody) Descriptor() ([]byte, []int) {
	return file_ydkafka_proto_rawDescGZIP(), []int{12}
}

func (x *BaseLineBody) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *BaseLineBody) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *BaseLineBody) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *BaseLineBody) GetFrom() uint32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *BaseLineBody) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BaseLineBody) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BaseLineBody) GetRuleId() uint32 {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return 0
}

func (x *BaseLineBody) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *BaseLineBody) GetDescript() []byte {
	if x != nil {
		return x.Descript
	}
	return nil
}

func (x *BaseLineBody) GetRemark() []byte {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *BaseLineBody) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *BaseLineBody) GetModifyTime() int64 {
	if x != nil && x.ModifyTime != nil {
		return *x.ModifyTime
	}
	return 0
}

func (x *BaseLineBody) GetLatestScanTime() int64 {
	if x != nil && x.LatestScanTime != nil {
		return *x.LatestScanTime
	}
	return 0
}

var File_ydkafka_proto protoreflect.FileDescriptor

var file_ydkafka_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x22, 0x44, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x1b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xd4,
	0x01, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x0d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d, 0x0a, 0x05, 0x71, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x12, 0x26, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x64,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25,
	0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x72, 0x75, 0x74,
	0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x76, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x56, 0x75, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x61, 0x73,
	0x68, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x6e, 0x73, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xeb, 0x02,
	0x0a, 0x0b, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x11, 0x0a, 0x09, 0x76, 0x69, 0x72, 0x75, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x69, 0x72, 0x75, 0x73, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0e, 0x0a, 0x06, 0x62, 0x77, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x12, 0x10, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x12, 0x18, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x12, 0x18,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x12, 0x0b, 0x0a, 0x03, 0x65,
	0x78, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x12, 0x13, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x22, 0xc1, 0x01, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12,
	0x10, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x12, 0x0d, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x22,
	0xd4, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x75, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x10, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0d, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x12,
	0x10, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x0e, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x56, 0x75, 0x6c, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0e, 0x0a, 0x06, 0x76, 0x75, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x75, 0x6c, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x76, 0x75, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x11, 0x0a, 0x09, 0x76, 0x75, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x75, 0x6c, 0x5f,
	0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x15, 0x0a, 0x0d, 0x76, 0x75, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x0e, 0x0a, 0x06, 0x63, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x22, 0xed, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x68, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x68, 0x5f, 0x63,
	0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x12, 0x0a, 0x0a,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x12, 0x11, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x0b, 0x0a, 0x03, 0x65, 0x78, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x13, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x22, 0x8d, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x0f, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x12, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x19, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x69,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x22, 0xd0, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x1b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0b, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x12, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x19, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x18, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x69,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x12, 0x11, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x0b, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x22, 0xec, 0x02, 0x0a, 0x11, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10,
	0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x12, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x11, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x17, 0x0a,
	0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0e, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x76, 0x75, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c,
	0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b,
	0x44, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0b, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0b, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x12, 0x12, 0x0a, 0x0a,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x22, 0xfb, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x10, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x0c, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x0e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x12,
	0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x2a, 0xa8, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x55,
	0x54, 0x45, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x55, 0x4c,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x48, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x2a, 0x3c,
	0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x28, 0x2a, 0x2e, 0x0a, 0x08,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x47, 0x4e, 0x10, 0x04, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x3b, 0x79, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61,
}

var (
	file_ydkafka_proto_rawDescOnce sync.Once
	file_ydkafka_proto_rawDescData = file_ydkafka_proto_rawDesc
)

func file_ydkafka_proto_rawDescGZIP() []byte {
	file_ydkafka_proto_rawDescOnce.Do(func() {
		file_ydkafka_proto_rawDescData = protoimpl.X.CompressGZIP(file_ydkafka_proto_rawDescData)
	})
	return file_ydkafka_proto_rawDescData
}

var file_ydkafka_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ydkafka_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_ydkafka_proto_goTypes = []interface{}{
	(EventType)(0),                  // 0: ydkafka.EventType
	(SeverityClass)(0),              // 1: ydkafka.SeverityClass
	(EventMod)(0),                   // 2: ydkafka.EventMod
	(*EventMsg)(nil),                // 3: ydkafka.EventMsg
	(*Head)(nil),                    // 4: ydkafka.Head
	(*Body)(nil),                    // 5: ydkafka.Body
	(*MalwareBody)(nil),             // 6: ydkafka.MalwareBody
	(*LoginBody)(nil),               // 7: ydkafka.LoginBody
	(*BruteforceBody)(nil),          // 8: ydkafka.BruteforceBody
	(*VulBody)(nil),                 // 9: ydkafka.VulBody
	(*BashBody)(nil),                // 10: ydkafka.BashBody
	(*ReverseShellBody)(nil),        // 11: ydkafka.ReverseShellBody
	(*PrivilegeEscalationBody)(nil), // 12: ydkafka.PrivilegeEscalationBody
	(*NetworkAttackBody)(nil),       // 13: ydkafka.NetworkAttackBody
	(*RiskDnsBody)(nil),             // 14: ydkafka.RiskDnsBody
	(*BaseLineBody)(nil),            // 15: ydkafka.BaseLineBody
}
var file_ydkafka_proto_depIdxs = []int32{
	4,  // 0: ydkafka.EventMsg.head:type_name -> ydkafka.Head
	5,  // 1: ydkafka.EventMsg.body:type_name -> ydkafka.Body
	0,  // 2: ydkafka.Head.event_type:type_name -> ydkafka.EventType
	2,  // 3: ydkafka.Head.event_mod:type_name -> ydkafka.EventMod
	1,  // 4: ydkafka.Head.severity_class:type_name -> ydkafka.SeverityClass
	6,  // 5: ydkafka.Body.malware:type_name -> ydkafka.MalwareBody
	7,  // 6: ydkafka.Body.login:type_name -> ydkafka.LoginBody
	8,  // 7: ydkafka.Body.bruteforce:type_name -> ydkafka.BruteforceBody
	9,  // 8: ydkafka.Body.vul:type_name -> ydkafka.VulBody
	10, // 9: ydkafka.Body.bash:type_name -> ydkafka.BashBody
	11, // 10: ydkafka.Body.reverse_shell:type_name -> ydkafka.ReverseShellBody
	12, // 11: ydkafka.Body.privilege_escalation:type_name -> ydkafka.PrivilegeEscalationBody
	13, // 12: ydkafka.Body.network_attack:type_name -> ydkafka.NetworkAttackBody
	14, // 13: ydkafka.Body.risk_dns:type_name -> ydkafka.RiskDnsBody
	15, // 14: ydkafka.Body.base_line:type_name -> ydkafka.BaseLineBody
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ydkafka_proto_init() }
func file_ydkafka_proto_init() {
	if File_ydkafka_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ydkafka_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BruteforceBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BashBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseShellBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeEscalationBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAttackBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskDnsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydkafka_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseLineBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ydkafka_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ydkafka_proto_goTypes,
		DependencyIndexes: file_ydkafka_proto_depIdxs,
		EnumInfos:         file_ydkafka_proto_enumTypes,
		MessageInfos:      file_ydkafka_proto_msgTypes,
	}.Build()
	File_ydkafka_proto = out.File
	file_ydkafka_proto_rawDesc = nil
	file_ydkafka_proto_goTypes = nil
	file_ydkafka_proto_depIdxs = nil
}
